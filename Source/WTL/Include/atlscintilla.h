#ifndef __ATLSCINTILLA_H__
#define __ATLSCINTILLA_H__

#pragma once

//
// Scintilla Editor WTL wrappers
//
// Automatically generated by Bjarke Viksoe (bjarke@viksoe.dk)
// The script (JavaScript) to regenerate these wrappers can be
// obtained by mail request.
//

#ifndef __cplusplus
   #error ATL requires C++ compilation (use a .cpp suffix)
#endif

#ifndef __ATLCTRLS_H__
   #error atlscintilla.h requires atlctrls.h to be included first
#endif

#if (_WIN32_IE < 0x0300)
   #error atlscintilla.h requires IE Version 3.0 or higher
#endif

// Include the original Scintilla C++ headers
#define PLAT_WIN 1
#include "Scintilla.h"
#undef PLAT_WIN


/////////////////////////////////////////////////////////////////////////////
// CScintillaCtrl

template< class TBase >
class CScintillaCtrlT : public TBase
{
public:
   CScintillaCtrlT(HWND hWnd = NULL) : TBase(hWnd) { }

   CScintillaCtrlT< TBase >& operator=(HWND hWnd)
   {
      m_hWnd = hWnd;
      return *this;
   }

   HWND Create(HWND hWndParent, _U_RECT rect = NULL, LPCTSTR szWindowName = NULL,
         DWORD dwStyle = 0, DWORD dwExStyle = 0,
         _U_MENUorID MenuOrID = 0U, LPVOID lpCreateParam = NULL)
   {
      return CWindow::Create(GetWndClassName(), hWndParent, rect.m_lpRect, szWindowName, dwStyle, dwExStyle, MenuOrID.m_hMenu, lpCreateParam);
   }

   // Attributes

   static LPCTSTR GetWndClassName()
   {
      return _T("Scintilla");
   }

   static LPCTSTR GetLibraryName()
   {
      return _T("SCILEXER.DLL");
   }

   // Operations

   CharacterRange GetSelection() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      CharacterRange cr;
      cr.cpMin = GetSelectionStart();
      cr.cpMax = GetSelectionEnd();
      return cr;
   }
   void SetSel(CharacterRange cr)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETSEL, (WPARAM) cr.cpMin, (LPARAM) cr.cpMax);
   }
   int GetCurrentLine() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return LineFromPosition(GetCurrentPos());
   }
   int GetLineLength(int iLine) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return GetLineEndPosition(iLine) - PositionFromLine(iLine);
   }
   int GetTextRange(int iStart, int iEnd, LPSTR pstrText) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrText);
      TextRange tr;
      tr.chrg.cpMin = iStart;
      tr.chrg.cpMax = iEnd;
      tr.lpstrText = pstrText;
      return (int) ::SendMessage(m_hWnd, SCI_GETTEXTRANGE, 0, (LPARAM) &tr);
   }
   int GetCaretInLine() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      int lCaret = GetCurrentPos();
      int lLine = LineFromPosition(lCaret);
      int lLineStart = PositionFromLine(lLine);
      return lCaret - lLineStart;
   }


   /**
    * AUTOGENERATED - START
    **/

   void AddText(int iLength, LPCSTR pstrText)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrText);
      ::SendMessage(m_hWnd, SCI_ADDTEXT, (WPARAM) iLength, (LPARAM) pstrText);
   }
   void AddStyledText(int iLength, LPSTR pCells)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pCells);
      ::SendMessage(m_hWnd, SCI_ADDSTYLEDTEXT, (WPARAM) iLength, (LPARAM) pCells);
   }
   void InsertText(long lPos, LPCSTR pstrText)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrText);
      ::SendMessage(m_hWnd, SCI_INSERTTEXT, (WPARAM) lPos, (LPARAM) pstrText);
   }
   void ClearAll()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_CLEARALL, 0, 0L);
   }
   void ClearDocumentStyle()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_CLEARDOCUMENTSTYLE, 0, 0L);
   }
   int GetLength() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETLENGTH, 0, 0L);
   }
   int GetCharAt(long lPos) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETCHARAT, (WPARAM) lPos, 0L);
   }
   long GetCurrentPos() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (long) ::SendMessage(m_hWnd, SCI_GETCURRENTPOS, 0, 0L);
   }
   long GetAnchor() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (long) ::SendMessage(m_hWnd, SCI_GETANCHOR, 0, 0L);
   }
   int GetStyleAt(long lPos) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETSTYLEAT, (WPARAM) lPos, 0L);
   }
   void Redo()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_REDO, 0, 0L);
   }
   void SetUndoCollection(BOOL bCollectUndo)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETUNDOCOLLECTION, (WPARAM) bCollectUndo, 0L);
   }
   void SelectAll()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SELECTALL, 0, 0L);
   }
   void SetSavePoint()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETSAVEPOINT, 0, 0L);
   }
   int GetStyledText(TextRange* pTextRange)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pTextRange);
      return (int) ::SendMessage(m_hWnd, SCI_GETSTYLEDTEXT, 0, (LPARAM) pTextRange);
   }
   BOOL CanRedo() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_CANREDO, 0, 0L);
   }
   int MarkerLineFromHandle(int iHandle)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_MARKERLINEFROMHANDLE, (WPARAM) iHandle, 0L);
   }
   void MarkerDeleteHandle(int iHandle)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_MARKERDELETEHANDLE, (WPARAM) iHandle, 0L);
   }
   BOOL GetUndoCollection() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_GETUNDOCOLLECTION, 0, 0L);
   }
   int GetViewWS() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETVIEWWS, 0, 0L);
   }
   void SetViewWS(int iViewWS)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETVIEWWS, (WPARAM) iViewWS, 0L);
   }
   long PositionFromPoint(int iX, int iY)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (long) ::SendMessage(m_hWnd, SCI_POSITIONFROMPOINT, (WPARAM) iX, (LPARAM) iY);
   }
   long PositionFromPointClose(int iX, int iY)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (long) ::SendMessage(m_hWnd, SCI_POSITIONFROMPOINTCLOSE, (WPARAM) iX, (LPARAM) iY);
   }
   void GotoLine(int iLine)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_GOTOLINE, (WPARAM) iLine, 0L);
   }
   void GotoPos(long lPos)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_GOTOPOS, (WPARAM) lPos, 0L);
   }
   void SetAnchor(long lPosAnchor)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETANCHOR, (WPARAM) lPosAnchor, 0L);
   }
   int GetCurLine(int iLength, LPSTR pstrText)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrText);
      return (int) ::SendMessage(m_hWnd, SCI_GETCURLINE, (WPARAM) iLength, (LPARAM) pstrText);
   }
   long GetEndStyled() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (long) ::SendMessage(m_hWnd, SCI_GETENDSTYLED, 0, 0L);
   }
   void ConvertEOLs(int iEolMode)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_CONVERTEOLS, (WPARAM) iEolMode, 0L);
   }
   int GetEOLMode() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETEOLMODE, 0, 0L);
   }
   void SetEOLMode(int iEolMode)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETEOLMODE, (WPARAM) iEolMode, 0L);
   }
   void StartStyling(long lPos, int iMask)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_STARTSTYLING, (WPARAM) lPos, (LPARAM) iMask);
   }
   void SetStyling(int iLength, int iStyle)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETSTYLING, (WPARAM) iLength, (LPARAM) iStyle);
   }
   BOOL GetBufferedDraw() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_GETBUFFEREDDRAW, 0, 0L);
   }
   void SetBufferedDraw(BOOL bBuffered)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETBUFFEREDDRAW, (WPARAM) bBuffered, 0L);
   }
   void SetTabWidth(int iTabWidth)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETTABWIDTH, (WPARAM) iTabWidth, 0L);
   }
   int GetTabWidth() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETTABWIDTH, 0, 0L);
   }
   void SetCodePage(int iCodePage)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETCODEPAGE, (WPARAM) iCodePage, 0L);
   }
   void SetUsePalette(BOOL bUsePalette)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETUSEPALETTE, (WPARAM) bUsePalette, 0L);
   }
   void MarkerDefine(int iMarkerNumber, int iMarkerSymbol)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_MARKERDEFINE, (WPARAM) iMarkerNumber, (LPARAM) iMarkerSymbol);
   }
   void MarkerSetFore(int iMarkerNumber, COLORREF clrFore)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_MARKERSETFORE, (WPARAM) iMarkerNumber, (LPARAM) clrFore);
   }
   void MarkerSetBack(int iMarkerNumber, COLORREF clrBack)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_MARKERSETBACK, (WPARAM) iMarkerNumber, (LPARAM) clrBack);
   }
   int MarkerAdd(int iLine, int iMarkerNumber)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_MARKERADD, (WPARAM) iLine, (LPARAM) iMarkerNumber);
   }
   void MarkerDelete(int iLine, int iMarkerNumber)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_MARKERDELETE, (WPARAM) iLine, (LPARAM) iMarkerNumber);
   }
   void MarkerDeleteAll(int iMarkerNumber)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_MARKERDELETEALL, (WPARAM) iMarkerNumber, 0L);
   }
   int MarkerGet(int iLine)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_MARKERGET, (WPARAM) iLine, 0L);
   }
   int MarkerNext(int iLineStart, int iMarkerMask)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_MARKERNEXT, (WPARAM) iLineStart, (LPARAM) iMarkerMask);
   }
   int MarkerPrevious(int iLineStart, int iMarkerMask)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_MARKERPREVIOUS, (WPARAM) iLineStart, (LPARAM) iMarkerMask);
   }
   void MarkerDefinePixmap(int iMarkerNumber, LPCSTR pstrPixmap)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrPixmap);
      ::SendMessage(m_hWnd, SCI_MARKERDEFINEPIXMAP, (WPARAM) iMarkerNumber, (LPARAM) pstrPixmap);
   }
   void MarkerAddSet(int iLine, int iSet)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_MARKERADDSET, (WPARAM) iLine, (LPARAM) iSet);
   }
   void MarkerSetAlpha(int iMarkerNumber, int iAlpha)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_MARKERSETALPHA, (WPARAM) iMarkerNumber, (LPARAM) iAlpha);
   }
   void SetMarginTypeN(int iMargin, int iMarginType)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETMARGINTYPEN, (WPARAM) iMargin, (LPARAM) iMarginType);
   }
   int GetMarginTypeN(int iMargin) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETMARGINTYPEN, (WPARAM) iMargin, 0L);
   }
   void SetMarginWidthN(int iMargin, int iPixelWidth)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETMARGINWIDTHN, (WPARAM) iMargin, (LPARAM) iPixelWidth);
   }
   int GetMarginWidthN(int iMargin) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETMARGINWIDTHN, (WPARAM) iMargin, 0L);
   }
   void SetMarginMaskN(int iMargin, int iMask)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETMARGINMASKN, (WPARAM) iMargin, (LPARAM) iMask);
   }
   int GetMarginMaskN(int iMargin) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETMARGINMASKN, (WPARAM) iMargin, 0L);
   }
   void SetMarginSensitiveN(int iMargin, BOOL bSensitive)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETMARGINSENSITIVEN, (WPARAM) iMargin, (LPARAM) bSensitive);
   }
   BOOL GetMarginSensitiveN(int iMargin) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_GETMARGINSENSITIVEN, (WPARAM) iMargin, 0L);
   }
   void StyleClearAll()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_STYLECLEARALL, 0, 0L);
   }
   void StyleSetFore(int iStyle, COLORREF clrFore)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_STYLESETFORE, (WPARAM) iStyle, (LPARAM) clrFore);
   }
   void StyleSetBack(int iStyle, COLORREF clrBack)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_STYLESETBACK, (WPARAM) iStyle, (LPARAM) clrBack);
   }
   void StyleSetBold(int iStyle, BOOL bBold)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_STYLESETBOLD, (WPARAM) iStyle, (LPARAM) bBold);
   }
   void StyleSetItalic(int iStyle, BOOL bItalic)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_STYLESETITALIC, (WPARAM) iStyle, (LPARAM) bItalic);
   }
   void StyleSetSize(int iStyle, int iSizePoints)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_STYLESETSIZE, (WPARAM) iStyle, (LPARAM) iSizePoints);
   }
   void StyleSetFont(int iStyle, LPCSTR pstrFontName)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrFontName);
      ::SendMessage(m_hWnd, SCI_STYLESETFONT, (WPARAM) iStyle, (LPARAM) pstrFontName);
   }
   void StyleSetEOLFilled(int iStyle, BOOL bFilled)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_STYLESETEOLFILLED, (WPARAM) iStyle, (LPARAM) bFilled);
   }
   void StyleResetDefault()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_STYLERESETDEFAULT, 0, 0L);
   }
   void StyleSetUnderline(int iStyle, BOOL bUnderline)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_STYLESETUNDERLINE, (WPARAM) iStyle, (LPARAM) bUnderline);
   }
   COLORREF StyleGetFore(int iStyle) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (COLORREF) ::SendMessage(m_hWnd, SCI_STYLEGETFORE, (WPARAM) iStyle, 0L);
   }
   COLORREF StyleGetBack(int iStyle) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (COLORREF) ::SendMessage(m_hWnd, SCI_STYLEGETBACK, (WPARAM) iStyle, 0L);
   }
   BOOL StyleGetBold(int iStyle) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_STYLEGETBOLD, (WPARAM) iStyle, 0L);
   }
   BOOL StyleGetItalic(int iStyle) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_STYLEGETITALIC, (WPARAM) iStyle, 0L);
   }
   int StyleGetSize(int iStyle) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_STYLEGETSIZE, (WPARAM) iStyle, 0L);
   }
   int StyleGetFont(int iStyle, LPSTR pstrFontName)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrFontName);
      return (int) ::SendMessage(m_hWnd, SCI_STYLEGETFONT, (WPARAM) iStyle, (LPARAM) pstrFontName);
   }
   BOOL StyleGetEOLFilled(int iStyle) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_STYLEGETEOLFILLED, (WPARAM) iStyle, 0L);
   }
   BOOL StyleGetUnderline(int iStyle) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_STYLEGETUNDERLINE, (WPARAM) iStyle, 0L);
   }
   int StyleGetCase(int iStyle) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_STYLEGETCASE, (WPARAM) iStyle, 0L);
   }
   int StyleGetCharacterSet(int iStyle) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_STYLEGETCHARACTERSET, (WPARAM) iStyle, 0L);
   }
   BOOL StyleGetVisible(int iStyle) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_STYLEGETVISIBLE, (WPARAM) iStyle, 0L);
   }
   BOOL StyleGetChangeable(int iStyle) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_STYLEGETCHANGEABLE, (WPARAM) iStyle, 0L);
   }
   BOOL StyleGetHotSpot(int iStyle) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_STYLEGETHOTSPOT, (WPARAM) iStyle, 0L);
   }
   void StyleSetCase(int iStyle, int iCaseForce)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_STYLESETCASE, (WPARAM) iStyle, (LPARAM) iCaseForce);
   }
   void StyleSetCharacterSet(int iStyle, int iCharacterSet)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_STYLESETCHARACTERSET, (WPARAM) iStyle, (LPARAM) iCharacterSet);
   }
   void StyleSetHotSpot(int iStyle, BOOL bHotspot)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_STYLESETHOTSPOT, (WPARAM) iStyle, (LPARAM) bHotspot);
   }
   void SetSelFore(BOOL bUseSetting, COLORREF clrFore)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETSELFORE, (WPARAM) bUseSetting, (LPARAM) clrFore);
   }
   void SetSelBack(BOOL bUseSetting, COLORREF clrBack)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETSELBACK, (WPARAM) bUseSetting, (LPARAM) clrBack);
   }
   int GetSelAlpha() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETSELALPHA, 0, 0L);
   }
   void SetSelAlpha(int iAlpha)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETSELALPHA, (WPARAM) iAlpha, 0L);
   }
   BOOL GetSelEOLFilled() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_GETSELEOLFILLED, 0, 0L);
   }
   void SetSelEOLFilled(BOOL bFilled)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETSELEOLFILLED, (WPARAM) bFilled, 0L);
   }
   void SetCaretFore(COLORREF clrFore)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETCARETFORE, (WPARAM) clrFore, 0L);
   }
   void AssignCmdKey(UINT iKm, int iMsg)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_ASSIGNCMDKEY, (WPARAM) iKm, (LPARAM) iMsg);
   }
   void ClearCmdKey(UINT iKm)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_CLEARCMDKEY, (WPARAM) iKm, 0L);
   }
   void ClearAllCmdKeys()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_CLEARALLCMDKEYS, 0, 0L);
   }
   void SetStylingEx(int iLength, LPCSTR pstrStyles)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrStyles);
      ::SendMessage(m_hWnd, SCI_SETSTYLINGEX, (WPARAM) iLength, (LPARAM) pstrStyles);
   }
   void StyleSetVisible(int iStyle, BOOL bVisible)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_STYLESETVISIBLE, (WPARAM) iStyle, (LPARAM) bVisible);
   }
   int GetCaretPeriod() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETCARETPERIOD, 0, 0L);
   }
   void SetCaretPeriod(int iPeriodMilliseconds)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETCARETPERIOD, (WPARAM) iPeriodMilliseconds, 0L);
   }
   void SetWordChars(LPCSTR pstrCharacters)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrCharacters);
      ::SendMessage(m_hWnd, SCI_SETWORDCHARS, 0, (LPARAM) pstrCharacters);
   }
   void BeginUndoAction()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_BEGINUNDOACTION, 0, 0L);
   }
   void EndUndoAction()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_ENDUNDOACTION, 0, 0L);
   }
   void IndicSetStyle(int iIndic, int iStyle)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_INDICSETSTYLE, (WPARAM) iIndic, (LPARAM) iStyle);
   }
   int IndicGetStyle(int iIndic) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_INDICGETSTYLE, (WPARAM) iIndic, 0L);
   }
   void IndicSetFore(int iIndic, COLORREF clrFore)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_INDICSETFORE, (WPARAM) iIndic, (LPARAM) clrFore);
   }
   COLORREF IndicGetFore(int iIndic) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (COLORREF) ::SendMessage(m_hWnd, SCI_INDICGETFORE, (WPARAM) iIndic, 0L);
   }
   void IndicSetUnder(int iIndic, BOOL bUnder)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_INDICSETUNDER, (WPARAM) iIndic, (LPARAM) bUnder);
   }
   BOOL IndicGetUnder(int iIndic) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_INDICGETUNDER, (WPARAM) iIndic, 0L);
   }
   void SetWhitespaceFore(BOOL bUseSetting, COLORREF clrFore)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETWHITESPACEFORE, (WPARAM) bUseSetting, (LPARAM) clrFore);
   }
   void SetWhitespaceBack(BOOL bUseSetting, COLORREF clrBack)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETWHITESPACEBACK, (WPARAM) bUseSetting, (LPARAM) clrBack);
   }
   void SetStyleBits(int iBits)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETSTYLEBITS, (WPARAM) iBits, 0L);
   }
   int GetStyleBits() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETSTYLEBITS, 0, 0L);
   }
   void SetLineState(int iLine, int iState)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETLINESTATE, (WPARAM) iLine, (LPARAM) iState);
   }
   int GetLineState(int iLine) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETLINESTATE, (WPARAM) iLine, 0L);
   }
   int GetMaxLineState() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETMAXLINESTATE, 0, 0L);
   }
   BOOL GetCaretLineVisible() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_GETCARETLINEVISIBLE, 0, 0L);
   }
   void SetCaretLineVisible(BOOL bShow)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETCARETLINEVISIBLE, (WPARAM) bShow, 0L);
   }
   COLORREF GetCaretLineBack() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (COLORREF) ::SendMessage(m_hWnd, SCI_GETCARETLINEBACK, 0, 0L);
   }
   void SetCaretLineBack(COLORREF clrBack)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETCARETLINEBACK, (WPARAM) clrBack, 0L);
   }
   void StyleSetChangeable(int iStyle, BOOL bChangeable)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_STYLESETCHANGEABLE, (WPARAM) iStyle, (LPARAM) bChangeable);
   }
   void AutoCShow(int iLenEntered, LPCSTR pstrItemList)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrItemList);
      ::SendMessage(m_hWnd, SCI_AUTOCSHOW, (WPARAM) iLenEntered, (LPARAM) pstrItemList);
   }
   void AutoCCancel()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_AUTOCCANCEL, 0, 0L);
   }
   BOOL AutoCActive()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_AUTOCACTIVE, 0, 0L);
   }
   long AutoCPosStart()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (long) ::SendMessage(m_hWnd, SCI_AUTOCPOSSTART, 0, 0L);
   }
   void AutoCComplete()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_AUTOCCOMPLETE, 0, 0L);
   }
   void AutoCStops(LPCSTR pstrCharacterSet)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrCharacterSet);
      ::SendMessage(m_hWnd, SCI_AUTOCSTOPS, 0, (LPARAM) pstrCharacterSet);
   }
   void AutoCSetSeparator(int iSeparatorCharacter)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_AUTOCSETSEPARATOR, (WPARAM) iSeparatorCharacter, 0L);
   }
   int AutoCGetSeparator() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_AUTOCGETSEPARATOR, 0, 0L);
   }
   void AutoCSelect(LPCSTR pstrText)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrText);
      ::SendMessage(m_hWnd, SCI_AUTOCSELECT, 0, (LPARAM) pstrText);
   }
   void AutoCSetCancelAtStart(BOOL bCancel)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_AUTOCSETCANCELATSTART, (WPARAM) bCancel, 0L);
   }
   BOOL AutoCGetCancelAtStart() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_AUTOCGETCANCELATSTART, 0, 0L);
   }
   void AutoCSetFillUps(LPCSTR pstrCharacterSet)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrCharacterSet);
      ::SendMessage(m_hWnd, SCI_AUTOCSETFILLUPS, 0, (LPARAM) pstrCharacterSet);
   }
   void AutoCSetChooseSingle(BOOL bChooseSingle)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_AUTOCSETCHOOSESINGLE, (WPARAM) bChooseSingle, 0L);
   }
   BOOL AutoCGetChooseSingle() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_AUTOCGETCHOOSESINGLE, 0, 0L);
   }
   void AutoCSetIgnoreCase(BOOL bIgnoreCase)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_AUTOCSETIGNORECASE, (WPARAM) bIgnoreCase, 0L);
   }
   BOOL AutoCGetIgnoreCase() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_AUTOCGETIGNORECASE, 0, 0L);
   }
   void UserListShow(int iListType, LPCSTR pstrItemList)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrItemList);
      ::SendMessage(m_hWnd, SCI_USERLISTSHOW, (WPARAM) iListType, (LPARAM) pstrItemList);
   }
   void AutoCSetAutoHide(BOOL bAutoHide)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_AUTOCSETAUTOHIDE, (WPARAM) bAutoHide, 0L);
   }
   BOOL AutoCGetAutoHide() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_AUTOCGETAUTOHIDE, 0, 0L);
   }
   void AutoCSetDropRestOfWord(BOOL bDropRestOfWord)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_AUTOCSETDROPRESTOFWORD, (WPARAM) bDropRestOfWord, 0L);
   }
   BOOL AutoCGetDropRestOfWord() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_AUTOCGETDROPRESTOFWORD, 0, 0L);
   }
   void RegisterImage(int iType, LPBYTE pXpmData)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pXpmData);
      ::SendMessage(m_hWnd, SCI_REGISTERIMAGE, (WPARAM) iType, (LPARAM) pXpmData);
   }
   void ClearRegisteredImages()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_CLEARREGISTEREDIMAGES, 0, 0L);
   }
   int AutoCGetTypeSeparator() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_AUTOCGETTYPESEPARATOR, 0, 0L);
   }
   void AutoCSetTypeSeparator(int iSeparatorCharacter)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_AUTOCSETTYPESEPARATOR, (WPARAM) iSeparatorCharacter, 0L);
   }
   void AutoCSetMaxWidth(int iCharacterCount)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_AUTOCSETMAXWIDTH, (WPARAM) iCharacterCount, 0L);
   }
   int AutoCGetMaxWidth() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_AUTOCGETMAXWIDTH, 0, 0L);
   }
   void AutoCSetMaxHeight(int iRowCount)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_AUTOCSETMAXHEIGHT, (WPARAM) iRowCount, 0L);
   }
   int AutoCGetMaxHeight() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_AUTOCGETMAXHEIGHT, 0, 0L);
   }
   void SetIndent(int iIndentSize)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETINDENT, (WPARAM) iIndentSize, 0L);
   }
   int GetIndent() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETINDENT, 0, 0L);
   }
   void SetUseTabs(BOOL bUseTabs)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETUSETABS, (WPARAM) bUseTabs, 0L);
   }
   BOOL GetUseTabs() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_GETUSETABS, 0, 0L);
   }
   void SetLineIndentation(int iLine, int iIndentSize)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETLINEINDENTATION, (WPARAM) iLine, (LPARAM) iIndentSize);
   }
   int GetLineIndentation(int iLine) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETLINEINDENTATION, (WPARAM) iLine, 0L);
   }
   long GetLineIndentPosition(int iLine) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (long) ::SendMessage(m_hWnd, SCI_GETLINEINDENTPOSITION, (WPARAM) iLine, 0L);
   }
   int GetColumn(long lPos) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETCOLUMN, (WPARAM) lPos, 0L);
   }
   void SetHScrollBar(BOOL bShow)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETHSCROLLBAR, (WPARAM) bShow, 0L);
   }
   BOOL GetHScrollBar() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_GETHSCROLLBAR, 0, 0L);
   }
   void SetIndentationGuides(BOOL bShow)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETINDENTATIONGUIDES, (WPARAM) bShow, 0L);
   }
   BOOL GetIndentationGuides() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_GETINDENTATIONGUIDES, 0, 0L);
   }
   void SetHighlightGuide(int iColumn)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETHIGHLIGHTGUIDE, (WPARAM) iColumn, 0L);
   }
   int GetHighlightGuide() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETHIGHLIGHTGUIDE, 0, 0L);
   }
   int GetLineEndPosition(int iLine) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETLINEENDPOSITION, (WPARAM) iLine, 0L);
   }
   int GetCodePage() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETCODEPAGE, 0, 0L);
   }
   COLORREF GetCaretFore() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (COLORREF) ::SendMessage(m_hWnd, SCI_GETCARETFORE, 0, 0L);
   }
   BOOL GetUsePalette() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_GETUSEPALETTE, 0, 0L);
   }
   BOOL GetReadOnly() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_GETREADONLY, 0, 0L);
   }
   void SetCurrentPos(long lPos)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETCURRENTPOS, (WPARAM) lPos, 0L);
   }
   void SetSelectionStart(long lPos)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETSELECTIONSTART, (WPARAM) lPos, 0L);
   }
   long GetSelectionStart() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (long) ::SendMessage(m_hWnd, SCI_GETSELECTIONSTART, 0, 0L);
   }
   void SetSelectionEnd(long lPos)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETSELECTIONEND, (WPARAM) lPos, 0L);
   }
   long GetSelectionEnd() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (long) ::SendMessage(m_hWnd, SCI_GETSELECTIONEND, 0, 0L);
   }
   void SetPrintMagnification(int iMagnification)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETPRINTMAGNIFICATION, (WPARAM) iMagnification, 0L);
   }
   int GetPrintMagnification() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETPRINTMAGNIFICATION, 0, 0L);
   }
   void SetPrintColourMode(int iMode)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETPRINTCOLOURMODE, (WPARAM) iMode, 0L);
   }
   int GetPrintColourMode() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETPRINTCOLOURMODE, 0, 0L);
   }
   long FindText(int iFlags, TextToFind* ft)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (long) ::SendMessage(m_hWnd, SCI_FINDTEXT, (WPARAM) iFlags, (LPARAM) ft);
   }
   long FormatRange(BOOL bDraw, long lFr)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (long) ::SendMessage(m_hWnd, SCI_FORMATRANGE, (WPARAM) bDraw, (LPARAM) lFr);
   }
   int GetFirstVisibleLine() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETFIRSTVISIBLELINE, 0, 0L);
   }
   int GetLine(int iLine, LPSTR pstrText)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrText);
      return (int) ::SendMessage(m_hWnd, SCI_GETLINE, (WPARAM) iLine, (LPARAM) pstrText);
   }
   int GetLineCount() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETLINECOUNT, 0, 0L);
   }
   void SetMarginLeft(int iPixelWidth)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETMARGINLEFT, 0, (LPARAM) iPixelWidth);
   }
   int GetMarginLeft() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETMARGINLEFT, 0, 0L);
   }
   void SetMarginRight(int iPixelWidth)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETMARGINRIGHT, 0, (LPARAM) iPixelWidth);
   }
   int GetMarginRight() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETMARGINRIGHT, 0, 0L);
   }
   BOOL GetModify() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_GETMODIFY, 0, 0L);
   }
   void SetSel(long lStart, long lEnd)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETSEL, (WPARAM) lStart, (LPARAM) lEnd);
   }
   int GetSelText(LPSTR pstrText)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrText);
      return (int) ::SendMessage(m_hWnd, SCI_GETSELTEXT, 0, (LPARAM) pstrText);
   }
   int GetTextRange(TextRange* pTextRange)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pTextRange);
      return (int) ::SendMessage(m_hWnd, SCI_GETTEXTRANGE, 0, (LPARAM) pTextRange);
   }
   void HideSelection(BOOL bNormal)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_HIDESELECTION, (WPARAM) bNormal, 0L);
   }
   int PointXFromPosition(long lPos)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_POINTXFROMPOSITION, 0, (LPARAM) lPos);
   }
   int PointYFromPosition(long lPos)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_POINTYFROMPOSITION, 0, (LPARAM) lPos);
   }
   int LineFromPosition(long lPos) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_LINEFROMPOSITION, (WPARAM) lPos, 0L);
   }
   long PositionFromLine(int iLine) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (long) ::SendMessage(m_hWnd, SCI_POSITIONFROMLINE, (WPARAM) iLine, 0L);
   }
   void LineScroll(int iColumns, int iLines)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_LINESCROLL, (WPARAM) iColumns, (LPARAM) iLines);
   }
   void ScrollCaret()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SCROLLCARET, 0, 0L);
   }
   void ReplaceSel(LPCSTR pstrText)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrText);
      ::SendMessage(m_hWnd, SCI_REPLACESEL, 0, (LPARAM) pstrText);
   }
   void SetReadOnly(BOOL bReadOnly)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETREADONLY, (WPARAM) bReadOnly, 0L);
   }
   void Null()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_NULL, 0, 0L);
   }
   BOOL CanPaste() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_CANPASTE, 0, 0L);
   }
   BOOL CanUndo() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_CANUNDO, 0, 0L);
   }
   void EmptyUndoBuffer()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_EMPTYUNDOBUFFER, 0, 0L);
   }
   void Undo()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_UNDO, 0, 0L);
   }
   void Cut()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_CUT, 0, 0L);
   }
   void Copy()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_COPY, 0, 0L);
   }
   void Paste()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_PASTE, 0, 0L);
   }
   void Clear()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_CLEAR, 0, 0L);
   }
   void SetText(LPCSTR pstrText)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrText);
      ::SendMessage(m_hWnd, SCI_SETTEXT, 0, (LPARAM) pstrText);
   }
   int GetText(int iLength, LPSTR pstrText)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrText);
      return (int) ::SendMessage(m_hWnd, SCI_GETTEXT, (WPARAM) iLength, (LPARAM) pstrText);
   }
   int GetTextLength() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETTEXTLENGTH, 0, 0L);
   }
   LPVOID GetDirectFunction() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (LPVOID) ::SendMessage(m_hWnd, SCI_GETDIRECTFUNCTION, 0, 0L);
   }
   LPVOID GetDirectPointer() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (LPVOID) ::SendMessage(m_hWnd, SCI_GETDIRECTPOINTER, 0, 0L);
   }
   void SetOvertype(BOOL bOvertype)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETOVERTYPE, (WPARAM) bOvertype, 0L);
   }
   BOOL GetOvertype() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_GETOVERTYPE, 0, 0L);
   }
   void SetCaretWidth(int iPixelWidth)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETCARETWIDTH, (WPARAM) iPixelWidth, 0L);
   }
   int GetCaretWidth() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETCARETWIDTH, 0, 0L);
   }
   void SetTargetStart(long lPos)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETTARGETSTART, (WPARAM) lPos, 0L);
   }
   long GetTargetStart() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (long) ::SendMessage(m_hWnd, SCI_GETTARGETSTART, 0, 0L);
   }
   void SetTargetEnd(long lPos)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETTARGETEND, (WPARAM) lPos, 0L);
   }
   long GetTargetEnd() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (long) ::SendMessage(m_hWnd, SCI_GETTARGETEND, 0, 0L);
   }
   int ReplaceTarget(int iLength, LPCSTR pstrText)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrText);
      return (int) ::SendMessage(m_hWnd, SCI_REPLACETARGET, (WPARAM) iLength, (LPARAM) pstrText);
   }
   int ReplaceTargetRE(int iLength, LPCSTR pstrText)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrText);
      return (int) ::SendMessage(m_hWnd, SCI_REPLACETARGETRE, (WPARAM) iLength, (LPARAM) pstrText);
   }
   int SearchInTarget(int iLength, LPCSTR pstrText)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrText);
      return (int) ::SendMessage(m_hWnd, SCI_SEARCHINTARGET, (WPARAM) iLength, (LPARAM) pstrText);
   }
   void SetSearchFlags(int iFlags)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETSEARCHFLAGS, (WPARAM) iFlags, 0L);
   }
   int GetSearchFlags() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETSEARCHFLAGS, 0, 0L);
   }
   void CallTipShow(long lPos, LPCSTR pstrDefinition)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrDefinition);
      ::SendMessage(m_hWnd, SCI_CALLTIPSHOW, (WPARAM) lPos, (LPARAM) pstrDefinition);
   }
   void CallTipCancel()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_CALLTIPCANCEL, 0, 0L);
   }
   BOOL CallTipActive()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_CALLTIPACTIVE, 0, 0L);
   }
   long CallTipPosStart()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (long) ::SendMessage(m_hWnd, SCI_CALLTIPPOSSTART, 0, 0L);
   }
   void CallTipSetHlt(int iStart, int iEnd)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_CALLTIPSETHLT, (WPARAM) iStart, (LPARAM) iEnd);
   }
   void CallTipSetBack(COLORREF clrBack)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_CALLTIPSETBACK, (WPARAM) clrBack, 0L);
   }
   void CallTipSetFore(COLORREF clrFore)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_CALLTIPSETFORE, (WPARAM) clrFore, 0L);
   }
   void CallTipSetForeHlt(COLORREF clrFore)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_CALLTIPSETFOREHLT, (WPARAM) clrFore, 0L);
   }
   void CallTipUseStyle(int iTabSize)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_CALLTIPUSESTYLE, (WPARAM) iTabSize, 0L);
   }
   int VisibleFromDocLine(int iLine)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_VISIBLEFROMDOCLINE, (WPARAM) iLine, 0L);
   }
   int DocLineFromVisible(int iLineDisplay)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_DOCLINEFROMVISIBLE, (WPARAM) iLineDisplay, 0L);
   }
   int WrapCount(int iLine)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_WRAPCOUNT, (WPARAM) iLine, 0L);
   }
   void SetFoldLevel(int iLine, int iLevel)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETFOLDLEVEL, (WPARAM) iLine, (LPARAM) iLevel);
   }
   int GetFoldLevel(int iLine) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETFOLDLEVEL, (WPARAM) iLine, 0L);
   }
   int GetLastChild(int iLine, int iLevel) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETLASTCHILD, (WPARAM) iLine, (LPARAM) iLevel);
   }
   int GetFoldParent(int iLine) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETFOLDPARENT, (WPARAM) iLine, 0L);
   }
   void ShowLines(int iLineStart, int iLineEnd)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SHOWLINES, (WPARAM) iLineStart, (LPARAM) iLineEnd);
   }
   void HideLines(int iLineStart, int iLineEnd)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_HIDELINES, (WPARAM) iLineStart, (LPARAM) iLineEnd);
   }
   BOOL GetLineVisible(int iLine) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_GETLINEVISIBLE, (WPARAM) iLine, 0L);
   }
   void SetFoldExpanded(int iLine, BOOL bExpanded)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETFOLDEXPANDED, (WPARAM) iLine, (LPARAM) bExpanded);
   }
   BOOL GetFoldExpanded(int iLine) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_GETFOLDEXPANDED, (WPARAM) iLine, 0L);
   }
   void ToggleFold(int iLine)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_TOGGLEFOLD, (WPARAM) iLine, 0L);
   }
   void EnsureVisible(int iLine)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_ENSUREVISIBLE, (WPARAM) iLine, 0L);
   }
   void SetFoldFlags(int iFlags)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETFOLDFLAGS, (WPARAM) iFlags, 0L);
   }
   void EnsureVisibleEnforcePolicy(int iLine)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_ENSUREVISIBLEENFORCEPOLICY, (WPARAM) iLine, 0L);
   }
   void SetTabIndents(BOOL bTabIndents)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETTABINDENTS, (WPARAM) bTabIndents, 0L);
   }
   BOOL GetTabIndents() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_GETTABINDENTS, 0, 0L);
   }
   void SetBackSpaceUnIndents(BOOL bBsUnIndents)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETBACKSPACEUNINDENTS, (WPARAM) bBsUnIndents, 0L);
   }
   BOOL GetBackSpaceUnIndents() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_GETBACKSPACEUNINDENTS, 0, 0L);
   }
   void SetMouseDwellTime(int iPeriodMilliseconds)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETMOUSEDWELLTIME, (WPARAM) iPeriodMilliseconds, 0L);
   }
   int GetMouseDwellTime() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETMOUSEDWELLTIME, 0, 0L);
   }
   int WordStartPosition(long lPos, BOOL bOnlyWordCharacters)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_WORDSTARTPOSITION, (WPARAM) lPos, (LPARAM) bOnlyWordCharacters);
   }
   int WordEndPosition(long lPos, BOOL bOnlyWordCharacters)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_WORDENDPOSITION, (WPARAM) lPos, (LPARAM) bOnlyWordCharacters);
   }
   void SetWrapMode(int iMode)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETWRAPMODE, (WPARAM) iMode, 0L);
   }
   int GetWrapMode() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETWRAPMODE, 0, 0L);
   }
   void SetWrapVisualFlags(int iWrapVisualFlags)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETWRAPVISUALFLAGS, (WPARAM) iWrapVisualFlags, 0L);
   }
   int GetWrapVisualFlags() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETWRAPVISUALFLAGS, 0, 0L);
   }
   void SetWrapVisualFlagsLocation(int iWrapVisualFlagsLocation)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETWRAPVISUALFLAGSLOCATION, (WPARAM) iWrapVisualFlagsLocation, 0L);
   }
   int GetWrapVisualFlagsLocation() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETWRAPVISUALFLAGSLOCATION, 0, 0L);
   }
   void SetWrapStartIndent(int iIndent)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETWRAPSTARTINDENT, (WPARAM) iIndent, 0L);
   }
   int GetWrapStartIndent() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETWRAPSTARTINDENT, 0, 0L);
   }
   void SetLayoutCache(int iMode)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETLAYOUTCACHE, (WPARAM) iMode, 0L);
   }
   int GetLayoutCache() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETLAYOUTCACHE, 0, 0L);
   }
   void SetScrollWidth(int iPixelWidth)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETSCROLLWIDTH, (WPARAM) iPixelWidth, 0L);
   }
   int GetScrollWidth() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETSCROLLWIDTH, 0, 0L);
   }
   int TextWidth(int iStyle, LPCSTR pstrText) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrText);
      return (int) ::SendMessage(m_hWnd, SCI_TEXTWIDTH, (WPARAM) iStyle, (LPARAM) pstrText);
   }
   void SetEndAtLastLine(BOOL bEndAtLastLine)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETENDATLASTLINE, (WPARAM) bEndAtLastLine, 0L);
   }
   BOOL GetEndAtLastLine() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_GETENDATLASTLINE, 0, 0L);
   }
   int TextHeight(int iLine) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_TEXTHEIGHT, (WPARAM) iLine, 0L);
   }
   void SetVScrollBar(BOOL bShow)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETVSCROLLBAR, (WPARAM) bShow, 0L);
   }
   BOOL GetVScrollBar() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_GETVSCROLLBAR, 0, 0L);
   }
   void AppendText(int iLength, LPCSTR pstrText)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrText);
      ::SendMessage(m_hWnd, SCI_APPENDTEXT, (WPARAM) iLength, (LPARAM) pstrText);
   }
   BOOL GetTwoPhaseDraw() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_GETTWOPHASEDRAW, 0, 0L);
   }
   void SetTwoPhaseDraw(BOOL bTwoPhase)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETTWOPHASEDRAW, (WPARAM) bTwoPhase, 0L);
   }
   void TargetFromSelection()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_TARGETFROMSELECTION, 0, 0L);
   }
   void LinesJoin()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_LINESJOIN, 0, 0L);
   }
   void LinesSplit(int iPixelWidth)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_LINESSPLIT, (WPARAM) iPixelWidth, 0L);
   }
   void SetFoldMarginColour(BOOL bUseSetting, COLORREF clrBack)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETFOLDMARGINCOLOUR, (WPARAM) bUseSetting, (LPARAM) clrBack);
   }
   void SetFoldMarginHiColour(BOOL bUseSetting, COLORREF clrFore)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETFOLDMARGINHICOLOUR, (WPARAM) bUseSetting, (LPARAM) clrFore);
   }
   void LineDown()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_LINEDOWN, 0, 0L);
   }
   void LineDownExtend()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_LINEDOWNEXTEND, 0, 0L);
   }
   void LineUp()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_LINEUP, 0, 0L);
   }
   void LineUpExtend()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_LINEUPEXTEND, 0, 0L);
   }
   void CharLeft()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_CHARLEFT, 0, 0L);
   }
   void CharLeftExtend()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_CHARLEFTEXTEND, 0, 0L);
   }
   void CharRight()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_CHARRIGHT, 0, 0L);
   }
   void CharRightExtend()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_CHARRIGHTEXTEND, 0, 0L);
   }
   void WordLeft()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_WORDLEFT, 0, 0L);
   }
   void WordLeftExtend()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_WORDLEFTEXTEND, 0, 0L);
   }
   void WordRight()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_WORDRIGHT, 0, 0L);
   }
   void WordRightExtend()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_WORDRIGHTEXTEND, 0, 0L);
   }
   void Home()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_HOME, 0, 0L);
   }
   void HomeExtend()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_HOMEEXTEND, 0, 0L);
   }
   void LineEnd()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_LINEEND, 0, 0L);
   }
   void LineEndExtend()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_LINEENDEXTEND, 0, 0L);
   }
   void DocumentStart()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_DOCUMENTSTART, 0, 0L);
   }
   void DocumentStartExtend()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_DOCUMENTSTARTEXTEND, 0, 0L);
   }
   void DocumentEnd()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_DOCUMENTEND, 0, 0L);
   }
   void DocumentEndExtend()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_DOCUMENTENDEXTEND, 0, 0L);
   }
   void PageUp()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_PAGEUP, 0, 0L);
   }
   void PageUpExtend()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_PAGEUPEXTEND, 0, 0L);
   }
   void PageDown()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_PAGEDOWN, 0, 0L);
   }
   void PageDownExtend()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_PAGEDOWNEXTEND, 0, 0L);
   }
   void EditToggleOvertype()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_EDITTOGGLEOVERTYPE, 0, 0L);
   }
   void Cancel() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_CANCEL, 0, 0L);
   }
   void DeleteBack()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_DELETEBACK, 0, 0L);
   }
   void Tab()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_TAB, 0, 0L);
   }
   void BackTab()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_BACKTAB, 0, 0L);
   }
   void NewLine()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_NEWLINE, 0, 0L);
   }
   void FormFeed()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_FORMFEED, 0, 0L);
   }
   void VCHome()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_VCHOME, 0, 0L);
   }
   void VCHomeExtend()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_VCHOMEEXTEND, 0, 0L);
   }
   void ZoomIn()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_ZOOMIN, 0, 0L);
   }
   void ZoomOut()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_ZOOMOUT, 0, 0L);
   }
   void DelWordLeft()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_DELWORDLEFT, 0, 0L);
   }
   void DelWordRight()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_DELWORDRIGHT, 0, 0L);
   }
   void LineCut()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_LINECUT, 0, 0L);
   }
   void LineDelete()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_LINEDELETE, 0, 0L);
   }
   void LineTranspose()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_LINETRANSPOSE, 0, 0L);
   }
   void LineDuplicate()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_LINEDUPLICATE, 0, 0L);
   }
   void LowerCase()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_LOWERCASE, 0, 0L);
   }
   void UpperCase()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_UPPERCASE, 0, 0L);
   }
   void LineScrollDown()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_LINESCROLLDOWN, 0, 0L);
   }
   void LineScrollUp()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_LINESCROLLUP, 0, 0L);
   }
   void DeleteBackNotLine()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_DELETEBACKNOTLINE, 0, 0L);
   }
   void HomeDisplay()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_HOMEDISPLAY, 0, 0L);
   }
   void HomeDisplayExtend()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_HOMEDISPLAYEXTEND, 0, 0L);
   }
   void LineEndDisplay()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_LINEENDDISPLAY, 0, 0L);
   }
   void LineEndDisplayExtend()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_LINEENDDISPLAYEXTEND, 0, 0L);
   }
   void HomeWrap()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_HOMEWRAP, 0, 0L);
   }
   void HomeWrapExtend()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_HOMEWRAPEXTEND, 0, 0L);
   }
   void LineEndWrap()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_LINEENDWRAP, 0, 0L);
   }
   void LineEndWrapExtend()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_LINEENDWRAPEXTEND, 0, 0L);
   }
   void VCHomeWrap()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_VCHOMEWRAP, 0, 0L);
   }
   void VCHomeWrapExtend()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_VCHOMEWRAPEXTEND, 0, 0L);
   }
   void LineCopy()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_LINECOPY, 0, 0L);
   }
   void MoveCaretInsideView()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_MOVECARETINSIDEVIEW, 0, 0L);
   }
   int LineLength(int iLine)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_LINELENGTH, (WPARAM) iLine, 0L);
   }
   void BraceHighlight(long lPos1, long lPos2)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_BRACEHIGHLIGHT, (WPARAM) lPos1, (LPARAM) lPos2);
   }
   void BraceBadLight(long lPos)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_BRACEBADLIGHT, (WPARAM) lPos, 0L);
   }
   long BraceMatch(long lPos)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (long) ::SendMessage(m_hWnd, SCI_BRACEMATCH, (WPARAM) lPos, 0L);
   }
   BOOL GetViewEOL() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_GETVIEWEOL, 0, 0L);
   }
   void SetViewEOL(BOOL bVisible)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETVIEWEOL, (WPARAM) bVisible, 0L);
   }
   int GetDocPointer() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETDOCPOINTER, 0, 0L);
   }
   void SetDocPointer(int iPointer)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETDOCPOINTER, 0, (LPARAM) iPointer);
   }
   void SetModEventMask(int iMask)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETMODEVENTMASK, (WPARAM) iMask, 0L);
   }
   int GetEdgeColumn() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETEDGECOLUMN, 0, 0L);
   }
   void SetEdgeColumn(int iColumn)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETEDGECOLUMN, (WPARAM) iColumn, 0L);
   }
   int GetEdgeMode() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETEDGEMODE, 0, 0L);
   }
   void SetEdgeMode(int iMode)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETEDGEMODE, (WPARAM) iMode, 0L);
   }
   COLORREF GetEdgeColour() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (COLORREF) ::SendMessage(m_hWnd, SCI_GETEDGECOLOUR, 0, 0L);
   }
   void SetEdgeColour(COLORREF clrEdgeColour)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETEDGECOLOUR, (WPARAM) clrEdgeColour, 0L);
   }
   void SearchAnchor()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SEARCHANCHOR, 0, 0L);
   }
   int SearchNext(int iFlags, LPCSTR pstrText)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrText);
      return (int) ::SendMessage(m_hWnd, SCI_SEARCHNEXT, (WPARAM) iFlags, (LPARAM) pstrText);
   }
   int SearchPrev(int iFlags, LPCSTR pstrText)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrText);
      return (int) ::SendMessage(m_hWnd, SCI_SEARCHPREV, (WPARAM) iFlags, (LPARAM) pstrText);
   }
   int LinesOnScreen() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_LINESONSCREEN, 0, 0L);
   }
   void UsePopUp(BOOL bAllowPopUp)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_USEPOPUP, (WPARAM) bAllowPopUp, 0L);
   }
   BOOL SelectionIsRectangle() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_SELECTIONISRECTANGLE, 0, 0L);
   }
   void SetZoom(int iZoom)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETZOOM, (WPARAM) iZoom, 0L);
   }
   int GetZoom() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETZOOM, 0, 0L);
   }
   int CreateDocument()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_CREATEDOCUMENT, 0, 0L);
   }
   void AddRefDocument(int iDoc)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_ADDREFDOCUMENT, 0, (LPARAM) iDoc);
   }
   void ReleaseDocument(int iDoc)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_RELEASEDOCUMENT, 0, (LPARAM) iDoc);
   }
   int GetModEventMask() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETMODEVENTMASK, 0, 0L);
   }
   void SetFocus(BOOL bFocus)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETFOCUS, (WPARAM) bFocus, 0L);
   }
   BOOL GetFocus() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_GETFOCUS, 0, 0L);
   }
   void SetStatus(int iStatusCode)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETSTATUS, (WPARAM) iStatusCode, 0L);
   }
   int GetStatus() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETSTATUS, 0, 0L);
   }
   void SetMouseDownCaptures(BOOL bCaptures)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETMOUSEDOWNCAPTURES, (WPARAM) bCaptures, 0L);
   }
   BOOL GetMouseDownCaptures() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_GETMOUSEDOWNCAPTURES, 0, 0L);
   }
   void SetCursor(int iCursorType)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETCURSOR, (WPARAM) iCursorType, 0L);
   }
   int GetCursor() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETCURSOR, 0, 0L);
   }
   void SetControlCharSymbol(int iSymbol)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETCONTROLCHARSYMBOL, (WPARAM) iSymbol, 0L);
   }
   int GetControlCharSymbol() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETCONTROLCHARSYMBOL, 0, 0L);
   }
   void WordPartLeft()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_WORDPARTLEFT, 0, 0L);
   }
   void WordPartLeftExtend()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_WORDPARTLEFTEXTEND, 0, 0L);
   }
   void WordPartRight()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_WORDPARTRIGHT, 0, 0L);
   }
   void WordPartRightExtend()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_WORDPARTRIGHTEXTEND, 0, 0L);
   }
   void SetVisiblePolicy(int iVisiblePolicy, int iVisibleSlop)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETVISIBLEPOLICY, (WPARAM) iVisiblePolicy, (LPARAM) iVisibleSlop);
   }
   void DelLineLeft()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_DELLINELEFT, 0, 0L);
   }
   void DelLineRight()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_DELLINERIGHT, 0, 0L);
   }
   void SetXOffset(int iNewOffset)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETXOFFSET, (WPARAM) iNewOffset, 0L);
   }
   int GetXOffset() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETXOFFSET, 0, 0L);
   }
   void ChooseCaretX()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_CHOOSECARETX, 0, 0L);
   }
   void GrabFocus()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_GRABFOCUS, 0, 0L);
   }
   void SetXCaretPolicy(int iCaretPolicy, int iCaretSlop)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETXCARETPOLICY, (WPARAM) iCaretPolicy, (LPARAM) iCaretSlop);
   }
   void SetYCaretPolicy(int iCaretPolicy, int iCaretSlop)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETYCARETPOLICY, (WPARAM) iCaretPolicy, (LPARAM) iCaretSlop);
   }
   void SetPrintWrapMode(int iMode)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETPRINTWRAPMODE, (WPARAM) iMode, 0L);
   }
   int GetPrintWrapMode() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETPRINTWRAPMODE, 0, 0L);
   }
   void SetHotspotActiveFore(BOOL bUseSetting, COLORREF clrFore)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETHOTSPOTACTIVEFORE, (WPARAM) bUseSetting, (LPARAM) clrFore);
   }
   COLORREF GetHotspotActiveFore() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (COLORREF) ::SendMessage(m_hWnd, SCI_GETHOTSPOTACTIVEFORE, 0, 0L);
   }
   void SetHotspotActiveBack(BOOL bUseSetting, COLORREF clrBack)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETHOTSPOTACTIVEBACK, (WPARAM) bUseSetting, (LPARAM) clrBack);
   }
   COLORREF GetHotspotActiveBack() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (COLORREF) ::SendMessage(m_hWnd, SCI_GETHOTSPOTACTIVEBACK, 0, 0L);
   }
   void SetHotspotActiveUnderline(BOOL bUnderline)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETHOTSPOTACTIVEUNDERLINE, (WPARAM) bUnderline, 0L);
   }
   BOOL GetHotspotActiveUnderline() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_GETHOTSPOTACTIVEUNDERLINE, 0, 0L);
   }
   void SetHotspotSingleLine(BOOL bSingleLine)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETHOTSPOTSINGLELINE, (WPARAM) bSingleLine, 0L);
   }
   BOOL GetHotspotSingleLine() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_GETHOTSPOTSINGLELINE, 0, 0L);
   }
   void ParaDown()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_PARADOWN, 0, 0L);
   }
   void ParaDownExtend()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_PARADOWNEXTEND, 0, 0L);
   }
   void ParaUp()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_PARAUP, 0, 0L);
   }
   void ParaUpExtend()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_PARAUPEXTEND, 0, 0L);
   }
   long PositionBefore(long lPos)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (long) ::SendMessage(m_hWnd, SCI_POSITIONBEFORE, (WPARAM) lPos, 0L);
   }
   long PositionAfter(long lPos)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (long) ::SendMessage(m_hWnd, SCI_POSITIONAFTER, (WPARAM) lPos, 0L);
   }
   void CopyRange(long lStart, long lEnd)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_COPYRANGE, (WPARAM) lStart, (LPARAM) lEnd);
   }
   void CopyText(int iLength, LPCSTR pstrText)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrText);
      ::SendMessage(m_hWnd, SCI_COPYTEXT, (WPARAM) iLength, (LPARAM) pstrText);
   }
   void SetSelectionMode(int iMode)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETSELECTIONMODE, (WPARAM) iMode, 0L);
   }
   int GetSelectionMode() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETSELECTIONMODE, 0, 0L);
   }
   long GetLineSelStartPosition(int iLine)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (long) ::SendMessage(m_hWnd, SCI_GETLINESELSTARTPOSITION, (WPARAM) iLine, 0L);
   }
   long GetLineSelEndPosition(int iLine)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (long) ::SendMessage(m_hWnd, SCI_GETLINESELENDPOSITION, (WPARAM) iLine, 0L);
   }
   void LineDownRectExtend()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_LINEDOWNRECTEXTEND, 0, 0L);
   }
   void LineUpRectExtend()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_LINEUPRECTEXTEND, 0, 0L);
   }
   void CharLeftRectExtend()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_CHARLEFTRECTEXTEND, 0, 0L);
   }
   void CharRightRectExtend()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_CHARRIGHTRECTEXTEND, 0, 0L);
   }
   void HomeRectExtend()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_HOMERECTEXTEND, 0, 0L);
   }
   void VCHomeRectExtend()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_VCHOMERECTEXTEND, 0, 0L);
   }
   void LineEndRectExtend()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_LINEENDRECTEXTEND, 0, 0L);
   }
   void PageUpRectExtend()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_PAGEUPRECTEXTEND, 0, 0L);
   }
   void PageDownRectExtend()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_PAGEDOWNRECTEXTEND, 0, 0L);
   }
   void StutteredPageUp()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_STUTTEREDPAGEUP, 0, 0L);
   }
   void StutteredPageUpExtend()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_STUTTEREDPAGEUPEXTEND, 0, 0L);
   }
   void StutteredPageDown()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_STUTTEREDPAGEDOWN, 0, 0L);
   }
   void StutteredPageDownExtend()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_STUTTEREDPAGEDOWNEXTEND, 0, 0L);
   }
   void WordLeftEnd()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_WORDLEFTEND, 0, 0L);
   }
   void WordLeftEndExtend()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_WORDLEFTENDEXTEND, 0, 0L);
   }
   void WordRightEnd()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_WORDRIGHTEND, 0, 0L);
   }
   void WordRightEndExtend()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_WORDRIGHTENDEXTEND, 0, 0L);
   }
   void SetWhitespaceChars(LPCSTR pstrCharacters)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrCharacters);
      ::SendMessage(m_hWnd, SCI_SETWHITESPACECHARS, 0, (LPARAM) pstrCharacters);
   }
   void SetCharsDefault()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETCHARSDEFAULT, 0, 0L);
   }
   int AutoCGetCurrent()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_AUTOCGETCURRENT, 0, 0L);
   }
   void Allocate(int iBytes)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_ALLOCATE, (WPARAM) iBytes, 0L);
   }
   int TargetAsUTF8(LPSTR pstrS)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrS);
      return (int) ::SendMessage(m_hWnd, SCI_TARGETASUTF8, 0, (LPARAM) pstrS);
   }
   void SetLengthForEncode(int iBytes)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETLENGTHFORENCODE, (WPARAM) iBytes, 0L);
   }
   int EncodedFromUTF8(LPCSTR pstrUtf8, LPSTR pstrEncoded)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrUtf8);
      ATLASSERT(pstrEncoded);
      return (int) ::SendMessage(m_hWnd, SCI_ENCODEDFROMUTF8, (WPARAM) pstrUtf8, (LPARAM) pstrEncoded);
   }
   int FindColumn(int iLine, int iColumn)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_FINDCOLUMN, (WPARAM) iLine, (LPARAM) iColumn);
   }
   BOOL GetCaretSticky() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_GETCARETSTICKY, 0, 0L);
   }
   void SetCaretSticky(BOOL bUseCaretStickyBehaviour)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETCARETSTICKY, (WPARAM) bUseCaretStickyBehaviour, 0L);
   }
   void ToggleCaretSticky()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_TOGGLECARETSTICKY, 0, 0L);
   }
   void SetPasteConvertEndings(BOOL bConvert)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETPASTECONVERTENDINGS, (WPARAM) bConvert, 0L);
   }
   BOOL GetPasteConvertEndings() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (BOOL) ::SendMessage(m_hWnd, SCI_GETPASTECONVERTENDINGS, 0, 0L);
   }
   void SelectionDuplicate()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SELECTIONDUPLICATE, 0, 0L);
   }
   void SetCaretLineBackAlpha(int iAlpha)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETCARETLINEBACKALPHA, (WPARAM) iAlpha, 0L);
   }
   int GetCaretLineBackAlpha() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETCARETLINEBACKALPHA, 0, 0L);
   }
   void SetCaretStyle(int iCaretStyle)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETCARETSTYLE, (WPARAM) iCaretStyle, 0L);
   }
   int GetCaretStyle() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETCARETSTYLE, 0, 0L);
   }
   void SetIndicatorCurrent(int iIndicator)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETINDICATORCURRENT, (WPARAM) iIndicator, 0L);
   }
   int GetIndicatorCurrent() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETINDICATORCURRENT, 0, 0L);
   }
   void SetIndicatorValue(int iValue)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETINDICATORVALUE, (WPARAM) iValue, 0L);
   }
   int GetIndicatorValue() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETINDICATORVALUE, 0, 0L);
   }
   void IndicatorFillRange(int iPosition, int iFillLength)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_INDICATORFILLRANGE, (WPARAM) iPosition, (LPARAM) iFillLength);
   }
   void IndicatorClearRange(int iPosition, int iClearLength)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_INDICATORCLEARRANGE, (WPARAM) iPosition, (LPARAM) iClearLength);
   }
   int IndicatorAllOnFor(int iPosition)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_INDICATORALLONFOR, (WPARAM) iPosition, 0L);
   }
   int IndicatorValueAt(int iIndicator, int iPosition)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_INDICATORVALUEAT, (WPARAM) iIndicator, (LPARAM) iPosition);
   }
   int IndicatorStart(int iIndicator, int iPosition)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_INDICATORSTART, (WPARAM) iIndicator, (LPARAM) iPosition);
   }
   int IndicatorEnd(int iIndicator, int iPosition)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_INDICATOREND, (WPARAM) iIndicator, (LPARAM) iPosition);
   }
   void SetPositionCache(int iSize)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETPOSITIONCACHE, (WPARAM) iSize, 0L);
   }
   int GetPositionCache() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETPOSITIONCACHE, 0, 0L);
   }
   void StartRecord()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_STARTRECORD, 0, 0L);
   }
   void StopRecord()
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_STOPRECORD, 0, 0L);
   }
   void SetLexer(int iLexer)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETLEXER, (WPARAM) iLexer, 0L);
   }
   int GetLexer() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETLEXER, 0, 0L);
   }
   void Colourise(long lStart, long lEnd)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_COLOURISE, (WPARAM) lStart, (LPARAM) lEnd);
   }
   void SetProperty(LPCSTR pstrKey, LPCSTR pstrValue)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrKey);
      ATLASSERT(pstrValue);
      ::SendMessage(m_hWnd, SCI_SETPROPERTY, (WPARAM) pstrKey, (LPARAM) pstrValue);
   }
   void SetKeyWords(int iKeywordSet, LPCSTR pstrKeyWords)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrKeyWords);
      ::SendMessage(m_hWnd, SCI_SETKEYWORDS, (WPARAM) iKeywordSet, (LPARAM) pstrKeyWords);
   }
   void SetLexerLanguage(LPCSTR pstrLanguage)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrLanguage);
      ::SendMessage(m_hWnd, SCI_SETLEXERLANGUAGE, 0, (LPARAM) pstrLanguage);
   }
   void LoadLexerLibrary(LPCSTR pstrPath)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrPath);
      ::SendMessage(m_hWnd, SCI_LOADLEXERLIBRARY, 0, (LPARAM) pstrPath);
   }
   int GetProperty(LPCSTR pstrKey, LPSTR pstrBuf)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrKey);
      ATLASSERT(pstrBuf);
      return (int) ::SendMessage(m_hWnd, SCI_GETPROPERTY, (WPARAM) pstrKey, (LPARAM) pstrBuf);
   }
   int GetPropertyExpanded(LPCSTR pstrKey, LPSTR pstrBuf)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrKey);
      ATLASSERT(pstrBuf);
      return (int) ::SendMessage(m_hWnd, SCI_GETPROPERTYEXPANDED, (WPARAM) pstrKey, (LPARAM) pstrBuf);
   }
   int GetPropertyInt(LPCSTR pstrKey) const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ATLASSERT(pstrKey);
      return (int) ::SendMessage(m_hWnd, SCI_GETPROPERTYINT, (WPARAM) pstrKey, 0L);
   }
   int GetStyleBitsNeeded() const
   {
      ATLASSERT(::IsWindow(m_hWnd));
      return (int) ::SendMessage(m_hWnd, SCI_GETSTYLEBITSNEEDED, 0, 0L);
   }
   void SetCaretPolicy(int iCaretPolicy, int iCaretSlop)
   {
      ATLASSERT(::IsWindow(m_hWnd));
      ::SendMessage(m_hWnd, SCI_SETCARETPOLICY, (WPARAM) iCaretPolicy, (LPARAM) iCaretSlop);
   }

   /**
    * AUTOGENERATED - END
    **/
};

typedef CScintillaCtrlT<CWindow> CScintillaCtrl;


/////////////////////////////////////////////////////////////////////////////
// CScintillaCommands - message handlers for standard EDIT commands

// Chain to CScintillaCommands message map. Your class must also derive 
// from CScintillaCtrl.
// Example:
// class CMyEdit : public CWindowImpl<CMyEdit, CScrintillaCtrl>,
//                 public CScintillaCommands<CMyEdit>
// {
// public:
//    BEGIN_MSG_MAP(CMyEdit)
//       // your handlers...
//       CHAIN_MSG_MAP_ALT(CScintillaCommands<CMyEdit>, 1)
//    END_MSG_MAP()
//    // other stuff...
// };

template< class T >
class CScintillaCommands
{
public:
   BEGIN_MSG_MAP(CScintillaCommands< T >)
   ALT_MSG_MAP(1)
      COMMAND_ID_HANDLER(ID_EDIT_CLEAR, OnEditClear)
      COMMAND_ID_HANDLER(ID_EDIT_CLEAR_ALL, OnEditClearAll)
      COMMAND_ID_HANDLER(ID_EDIT_COPY, OnEditCopy)
      COMMAND_ID_HANDLER(ID_EDIT_CUT, OnEditCut)
      COMMAND_ID_HANDLER(ID_EDIT_PASTE, OnEditPaste)
      COMMAND_ID_HANDLER(ID_EDIT_SELECT_ALL, OnEditSelectAll)
      COMMAND_ID_HANDLER(ID_EDIT_UNDO, OnEditUndo)
      COMMAND_ID_HANDLER(ID_EDIT_REDO, OnEditRedo)
   END_MSG_MAP()

   LRESULT OnEditClear(WORD /*wNotifyCode*/, WORD /*wID*/, HWND /*hWndCtl*/, BOOL& /*bHandled*/)
   {
      T* pT = static_cast<T*>(this); pT;
      pT->Clear();
      return 0;
   }
   LRESULT OnEditClearAll(WORD /*wNotifyCode*/, WORD /*wID*/, HWND /*hWndCtl*/, BOOL& /*bHandled*/)
   {
      T* pT = static_cast<T*>(this); pT;
      pT->SetSel(0, -1);
      pT->Clear();
      return 0;
   }
   LRESULT OnEditCopy(WORD /*wNotifyCode*/, WORD /*wID*/, HWND /*hWndCtl*/, BOOL& /*bHandled*/)
   {
      T* pT = static_cast<T*>(this); pT;
      pT->Copy();
      return 0;
   }
   LRESULT OnEditCut(WORD /*wNotifyCode*/, WORD /*wID*/, HWND /*hWndCtl*/, BOOL& /*bHandled*/)
   {
      T* pT = static_cast<T*>(this); pT;
      pT->Cut();
      return 0;
   }
   LRESULT OnEditPaste(WORD /*wNotifyCode*/, WORD /*wID*/, HWND /*hWndCtl*/, BOOL& /*bHandled*/)
   {
      T* pT = static_cast<T*>(this); pT;
      pT->Paste();
      return 0;
   }
   LRESULT OnEditSelectAll(WORD /*wNotifyCode*/, WORD /*wID*/, HWND /*hWndCtl*/, BOOL& /*bHandled*/)
   {
      T* pT = static_cast<T*>(this); pT;
      pT->SelectAll();
      return 0;
   }
   LRESULT OnEditUndo(WORD /*wNotifyCode*/, WORD /*wID*/, HWND /*hWndCtl*/, BOOL& /*bHandled*/)
   {
      T* pT = static_cast<T*>(this); pT;
      pT->Undo();
      return 0;
   }
   LRESULT OnEditRedo(WORD /*wNotifyCode*/, WORD /*wID*/, HWND /*hWndCtl*/, BOOL& /*bHandled*/)
   {
      T* pT = static_cast<T*>(this); pT;
      pT->Redo();
      return 0;
   }

   // State (update UI) helpers

   BOOL CanCut() const { return HasSelection() && !IsReadOnly(); }
   BOOL CanCopy() const { return HasSelection(); }
   BOOL CanClear() const { return HasSelection() && !IsReadOnly(); }
   BOOL CanSelectAll() const { return HasText(); }
   BOOL CanFind() const { return HasText(); }
   BOOL CanRepeat() const { return HasText(); }
   BOOL CanReplace() const { return HasText() && !IsReadOnly(); }
   BOOL CanClearAll() const { return HasText() && !IsReadOnly(); }

   // Implementation

   BOOL HasSelection() const
   {
      const T* pT = static_cast<const T*>(this); pT;
      long nMin = pT->GetSelectionStart();
      long nMax = pT->GetSelectionEnd();
      return (nMin != nMax);
   }
   BOOL HasText() const
   {
      const T* pT = static_cast<const T*>(this); pT;
      return (pT->GetTextLength() > 0);
   }
   BOOL IsReadOnly() const
   {
      const T* pT = static_cast<const T*>(this); pT;
      return pT->GetReadOnly();
   }
};


#endif // __ATLSCINTILLA_H__
