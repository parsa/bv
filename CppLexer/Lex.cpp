#define yy_create_buffer cpp_create_buffer
#define yy_delete_buffer cpp_delete_buffer
#define yy_scan_buffer cpp_scan_buffer
#define yy_scan_string cpp_scan_string
#define yy_scan_bytes cpp_scan_bytes
#define yy_flex_debug cpp_flex_debug
#define yy_init_buffer cpp_init_buffer
#define yy_flush_buffer cpp_flush_buffer
#define yy_load_buffer_state cpp_load_buffer_state
#define yy_switch_to_buffer cpp_switch_to_buffer
#define yyin cppin
#define yyleng cppleng
#define yylex cpplex
#define yyout cppout
#define yyrestart cpprestart
#define yytext cpptext
#define yywrap cppwrap

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

typedef int FILE; //#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplusx
#define __cplusplusx
#endif
#endif


#ifdef __cplusplus

//#include <stdlib.h>
//#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
//#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 148
#define YY_END_OF_BUFFER 149
static yyconst short int yy_acclist[964] =
    {   0,
       77,   77,   19,   19,   43,   43,  125,  125,  123,  123,
      121,  121,  149,  141,  148,  141,  148,  142,  148,  141,
      148,   77,  141,  148,   77,  141,  148,   78,  142,  148,
       77,  141,  148,   95,  141,  148,   95,  141,  148,   96,
      142,  148,   95,  141,  148,  101,  141,  148,  101,  141,
      148,  102,  142,  148,  101,  141,  148,  101,  141,  148,
      104,  141,  148,  104,  141,  148,  105,  142,  148,  104,
      141,  148,   88,  141,  148,   88,  141,  148,   87,  142,
      148,   88,  141,  148,   88,  141,  148,   88,  141,  148,
       85,  142,  148,   88,  141,  148,   28,  141,  148,   29,

      141,  148,   32,  142,  148,  141,  148,  141,  148,  141,
      148,   66,  141,  148,   67,  141,  148,   65,  141,  148,
       68,  141,  148,   74,  141,  148,   75,  141,  148,  141,
      148,   69,  141,  148,   70,  141,  148,  141,  148,  141,
      148,    2,  141,  148,    4,  141,  148,  141,  148,  142,
      148,  141,  148,   33,  141,  148,   52,  141,  148,   34,
      141,  148,   20,  141,  148,  141,  148,   39,  141,  148,
       35,  141,  148,   20,  141,  148,   20,  141,  148,   20,
      141,  148,   20,  141,  148,   20,  141,  148,   20,  141,
      148,   20,  141,  148,   20,  141,  148,  141,  148,   21,

      141,  148,   20,  141,  148,  141,  148,   60,  141,  148,
       61,  141,  148,  141,  148,  141,  148,   19,  141,  148,
       19,  141,  148,   19,  142,  148,   19,  141,  148,   38,
      141,  148,   38,  141,  148,   38,  141,  148,   37,   38,
      141,  148,   36,   38,  141,  148,   57,  141,  148,   57,
      141,  148,   56,   57,  141,  148,   56,  142,  148,   53,
       57,  141,  148,   54,   57,  141,  148,   55,   57,  141,
      148,   57,  141,  148,   43,   51,  141,  148,   43,   51,
      141,  148,   50,  142,  148,   51,  141,  148,   51,  141,
      148,   48,   51,  141,  148,   49,   51,  141,  148,   63,

      141,  148,   64,  141,  148,   62,  141,  148,   22,  141,
      148,   22,  141,  148,   25,  142,  148,   22,  141,  148,
       22,  141,  148,   42,  141,  148,   42,  141,  148,   42,
      141,  148,   41,   42,  141,  148,   40,   42,  141,  148,
       72,  141,  148,   72,  141,  148,   71,  142,  148,   72,
      141,  148,   72,  141,  148,  141,  148,  141,  148,  141,
      148,  141,  148,  141,  148,  142,  147,  148,  141,  148,
      108,  141,  148,  108,  141,  148,  108,  142,  148,  108,
      141,  148,  108,  141,  148,  106,  141,  148,  106,  141,
      148,  106,  142,  148,  107,  141,  148,  106,  141,  148,

      106,  141,  148,  129,  141,  148,  129,  141,  148,  136,
      142,  148,  129,  141,  148,  129,  141,  148,  125,  141,
      148,  125,  141,  148,  126,  142,  148,  125,  141,  148,
      125,  141,  148,  123,  141,  148,  123,  141,  148,  124,
      142,  148,  123,  141,  148,  123,  141,  148,  127,  141,
      148,  127,  141,  148,  134,  142,  148,  127,  141,  148,
      127,  141,  148,  121,  141,  148,  121,  141,  148,  122,
      142,  148,  121,  141,  148,  128,  141,  148,  128,  141,
      148,  135,  142,  148,  128,  141,  148,  128,  141,  148,
      130,  141,  148,  130,  141,  148,  137,  142,  148,  130,

      141,  148,  130,  141,  148,  132,  141,  148,  132,  141,
      148,  139,  142,  148,  132,  141,  148,  132,  141,  148,
      133,  141,  148,  133,  141,  148,  140,  142,  148,  133,
      141,  148,  133,  141,  148,  131,  141,  148,  131,  141,
      148,  138,  142,  148,  131,  141,  148,  131,  141,  148,
        1,  143,  146,   77,   77,    1,   77,   77,  143,   77,
      146,   93,  143,   94,  146,  103,   99,  143,  100,  146,
       87,   87,   91,   90,  143,   89,  146,   28,   30,   31,
       67,   68,   66,   67,   68,   74,   75,   69,    3,   33,
       20,  143,  146,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   21,   20,   19,   19,    1,   19,   19,  143,
       19,  146,   56,   55,   55,   43,   43,    1,   43,   45,
       46,  143,   44,  146,   23,  146,   24,    1,   73,  143,
      146,  145,  144,  146,  147,    1,  147,  143,  146,  110,
      143,  110,  146,  107,  109,  143,  109,  146,  136,  125,
      125,    1,  125,  125,  143,  125,  146,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  123,  123,    1,  123,
      123,  143,  123,  146,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  134,  121,  121,    1,  121,  121,  143,
      121,  146,  135,  137,  139,  140,  138,   87,   83,   82,

       79,16460,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   46,   47,   46,   44,   73,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,   82,   81,
       80, 8268, 8268,   79,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,  111,  125,  125,  125,  125,
      125,  125,  125,  111,  125,  125,  125,  123,  123,  123,
      123,  123,  123,  123,  111,  123,  123,  123,   97,   98,
     8268,   92,   20,   16,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   58,  120,  118,  117,  111,  119,  120,

      125,  125,  125,  118,  125,  117,  125,  125,  125,  111,
      125,  119,  125,  125,  120,  123,  123,  123,  118,  123,
      117,  123,  123,  123,  111,  123,  119,  123,  123,   14,
       20,   20,   20,   20,   20,   20,   20,   17,   26,   58,
       59,  120,  118,  117,  114,  119,  120,  125,  125,  125,
      118,  125,  117,  125,  114,  125,  125,  119,  125,  125,
      120,  123,  123,  123,  118,  123,  117,  123,  114,  123,
      123,  119,  123,  123,   20,   20,   20,   20,    5,   20,
       15,   20,  112,  114,  116,  112,  125,  125,  114,  125,
      116,  125,  125,  112,  123,  123,  114,  123,  116,  123,

      123,    5,   20,   20,    7,   20,   20,    5,   27,  112,
      116,  113,  112,  125,  125,  116,  125,  113,  125,  112,
      123,  123,  116,  123,  113,  123,    7,   20,   18,   18,
       20,    7,   20,  113,  125,  113,  125,  123,  113,  123,
       13,    6,   20,  115,  115,  125,  115,  123,    6,    6,
      115,  115,  125,  115,  123,   11,   86,    8,   12,    9,
       10,   84,   10
    } ;

static yyconst short int yy_accept[816] =
    {   0,
        1,    1,    1,    2,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    4,    5,    5,    5,    5,    5,    5,
        5,    6,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    8,    9,   10,   11,   11,   11,   12,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   14,   16,   18,   20,   22,   25,   28,   31,   34,
       37,   40,   43,   46,   49,   52,   55,   58,   61,   64,

       67,   70,   73,   76,   79,   82,   85,   88,   91,   94,
       97,  100,  103,  106,  108,  110,  112,  115,  118,  121,
      124,  127,  130,  132,  135,  138,  140,  142,  145,  148,
      150,  152,  154,  157,  160,  163,  166,  168,  171,  174,
      177,  180,  183,  186,  189,  192,  195,  198,  200,  203,
      206,  208,  211,  214,  216,  218,  221,  224,  227,  230,
      233,  236,  239,  243,  247,  250,  253,  257,  260,  264,
      268,  272,  275,  279,  283,  286,  289,  292,  296,  300,
      303,  306,  309,  312,  315,  318,  321,  324,  327,  330,
      333,  337,  341,  344,  347,  350,  353,  356,  358,  360,

      362,  364,  366,  369,  371,  374,  377,  380,  383,  386,
      389,  392,  395,  398,  401,  404,  407,  410,  413,  416,
      419,  422,  425,  428,  431,  434,  437,  440,  443,  446,
      449,  452,  455,  458,  461,  464,  467,  470,  473,  476,
      479,  482,  485,  488,  491,  494,  497,  500,  503,  506,
      509,  512,  515,  518,  521,  524,  527,  530,  533,  536,
      539,  542,  545,  548,  551,  551,  552,  553,  554,  555,
      556,  558,  560,  562,  564,  566,  567,  569,  571,  572,
      573,  574,  576,  578,  578,  578,  578,  578,  579,  579,
      580,  581,  581,  582,  583,  584,  585,  586,  587,  588,

      588,  589,  589,  589,  589,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  591,  592,  593,  594,
      595,  596,  597,  598,  599,  600,  601,  602,  603,  603,
      604,  604,  604,  604,  605,  605,  605,  605,  605,  605,
      606,  607,  609,  611,  613,  614,  615,  616,  617,  618,
      620,  620,  621,  623,  625,  627,  628,  628,  628,  628,
      629,  629,  630,  631,  632,  632,  632,  633,  635,  635,
      636,  636,  637,  638,  639,  640,  642,  644,  644,  644,
      644,  644,  644,  644,  644,  644,  644,  645,  647,  649,
      650,  651,  652,  654,  656,  658,  659,  660,  661,  662,

      663,  664,  665,  666,  667,  668,  669,  671,  673,  675,
      676,  677,  678,  679,  680,  681,  682,  683,  684,  685,
      686,  687,  689,  691,  693,  694,  695,  696,  697,  698,
      698,  698,  699,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  701,  701,  702,  703,
      703,  704,  705,  706,  707,  708,  709,  710,  711,  712,
      713,  713,  713,  714,  714,  714,  715,  716,  717,  718,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  720,  721,  722,  723,  724,  725,  726,  727,  728,
      729,  730,  731,  732,  733,  734,  735,  736,  737,  738,

      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  740,  741,  742,  742,
      743,  745,  745,  745,  746,  747,  748,  749,  750,  751,
      752,  753,  754,  755,  755,  755,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  757,  757,  757,  758,
      759,  760,  761,  762,  763,  764,  766,  767,  768,  769,
      770,  771,  772,  773,  774,  775,  777,  778,  779,  779,
      779,  779,  779,  779,  780,  780,  781,  781,  781,  781,
      781,  781,  781,  781,  781,  781,  781,  781,  781,  781,
      781,  782,  782,  783,  784,  785,  786,  787,  788,  789,

      790,  791,  792,  793,  793,  793,  794,  795,  795,  796,
      796,  796,  797,  798,  798,  798,  799,  800,  800,  802,
      803,  804,  806,  808,  809,  810,  812,  814,  815,  817,
      818,  819,  821,  823,  824,  825,  827,  829,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  831,
      832,  833,  834,  835,  836,  837,  838,  839,  839,  839,
      840,  841,  841,  842,  843,  843,  843,  844,  845,  846,
      846,  847,  847,  849,  850,  851,  853,  855,  857,  858,
      860,  861,  863,  864,  865,  867,  869,  871,  872,  874,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  876,

      877,  878,  879,  881,  882,  883,  883,  884,  884,  885,
      886,  886,  888,  889,  891,  893,  894,  896,  897,  899,
      901,  902,  902,  902,  902,  902,  902,  903,  903,  904,
      905,  907,  908,  909,  909,  910,  911,  911,  912,  913,
      915,  916,  918,  920,  922,  923,  925,  927,  927,  927,
      927,  928,  928,  929,  930,  932,  933,  934,  934,  934,
      934,  934,  934,  935,  936,  938,  939,  941,  941,  941,
      941,  941,  942,  944,  944,  944,  944,  944,  945,  947,
      949,  949,  949,  950,  951,  951,  951,  951,  951,  952,
      954,  956,  956,  956,  956,  956,  956,  956,  956,  956,

      956,  957,  957,  957,  957,  958,  959,  959,  960,  960,
      961,  962,  963,  964,  964
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    3,    4,
        1,    1,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    1,    6,    7,    1,    1,    8,    1,    9,
       10,   11,    1,   12,    1,   13,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,   17,   18,
       19,   20,    1,   21,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       22,   23,   24,    1,   15,    1,   25,   26,   27,   28,

       29,   30,   31,   32,   33,   15,   15,   34,   35,   36,
       37,   38,   15,   39,   40,   41,   42,   43,   44,   45,
       46,   15,   47,    1,   48,   49,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[50] =
    {   0,
        1,    1,    1,    2,    1,    3,    1,    4,    5,    1,
        6,    1,    7,    3,    8,    9,    1,   10,    1,   10,
        1,    4,    1,    4,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    3,    3,   11
    } ;

static yyconst short int yy_base[874] =
    {   0,
        0,    1,    4,    5,    8,    9,   22,   23,   26,   27,
       40,   41,   45,   46,   69,    0,  117,  120,  123,  128,
      151,    0,  200,    0,  249,    0,  297,  343,  390,  299,
      438,    0,  303,  306,  131,  134,  314,  328,  484,  497,
      317,  320,  323,  444,  457,  458,  349,  352,  449,  462,
      372,  506,  510,  523,  375,  514,  527,  528,  531,  534,
      548,  549,  552,  555,  563,  569,  570,  577,  578,  583,
      591,  592,  597,  598,  606,  612,  613,  620,  621,  626,
     2197, 2198, 2194, 2198,    6,    0,   63, 2198,   21, 2198,
     2193, 2198,   47, 2198, 2192, 2198, 2179,  130, 2198, 2190,

     2198,  136, 2198, 2189,   35, 2176,  329, 2163,  358, 2159,
        0, 2198, 2198, 2177, 2182,  615,    0, 2182, 2198, 2181,
        0,    4,  301,    0, 2198,  356, 2177, 2198, 2198,  660,
      470,  634,  370, 2198, 2198,    0,  371, 2198, 2198, 2148,
     2145, 2144, 2141,  345, 2137, 2131, 2140,  516,  330,   26,
      454, 2198, 2198, 2138, 2142,    0,  371,    0,  529, 2198,
     2171,  550, 2198, 2198, 2198, 2170,  639,  649, 2198, 2198,
      440,  564,    0,  664, 2198, 2165,  575, 2198, 2198, 2198,
     2198, 2198, 2198, 2168, 2198,  593, 2165, 2198, 2166,  618,
     2198, 2198, 2156,  466, 2198,  635,  644,  557, 2152,  645,

     2161,  665, 2198,  646, 2198, 2162, 2198,  661,  688, 2198,
     2161, 2198,  676,  662,    0, 2198, 2160,  679,  674,    0,
        0,  688, 2198,  680,  707,    0,  693, 2198,  685,  726,
     2198, 2159,  700,  695,    0,    0,  706, 2198,  704, 2198,
     2158,  716,  711,    0, 2198, 2157,  730,  726,    0, 2198,
     2156,  749,  727,    0, 2198, 2155,  753,  749,    0, 2198,
     2154,  767,  762,    0, 2153, 2198, 2198, 2198,    0,  712,
        0,    0,    0, 2133, 2132, 2198, 2198, 2198,  771,  772,
     2198, 2198, 2198, 2123,  774,  767, 2115,    0, 2140, 2198,
     2198,  776, 2146, 2145,    0, 2144, 2143,    0,  466,  683,

        0,  781, 2139, 2138, 2198,    0,  785,  780, 2109, 2106,
     2105,  754, 2099, 2093, 2102,  787,    0,  128,  793, 2112,
     2094, 2094, 2105,  302, 2107, 2093, 2093, 2097,    0,  487,
      764,  494, 2100, 2095,  798, 2090, 2094, 2089, 2085,    0,
      447,    0,    0,    0,  805,  808,  815,    0,  820,    0,
     2117, 2198,  824,    0, 2198, 2198, 2111,  791,  827, 2110,
      838, 2109,  792, 2108,  830, 2104, 2198, 2198, 2113, 2198,
      828, 2112, 2113, 2110, 2109, 2198, 2198,  804, 2067, 2082,
     2085, 2084, 2079, 2078, 2060, 2076,  850, 2198, 2198,  853,
        0,  843,    0,    0,    0,  809, 2059, 2074, 2077, 2076,

     2071, 2070, 2052, 2068,    0,  857,    0,    0,    0,  821,
     2051, 2066, 2069, 2068, 2063, 2062, 2044, 2060,  861,    0,
      867,    0,    0,    0,  869,  872,  875,  878,  881,  768,
      789, 2085, 2198, 2056, 2058, 2074,  735, 2059, 2041, 2041,
      854, 2055, 2041, 2041, 2045,  885, 2030, 2198,  886, 2029,
     2035, 2039, 2044, 2033, 2028, 2029, 2035, 2026, 2038, 2029,
     2032, 2034, 2027, 2022, 2024,  889, 2198,  891,    0,  899,
     2029, 2018, 2031, 2022, 2021, 2016, 2013, 2024, 2014, 2012,
     2019, 2008, 2021, 2012, 2011, 2006, 2003, 2014, 2004, 2002,
     2009, 1998, 2011, 2002, 2001, 1996, 1993, 2004, 1994, 1992,

     2019, 2018, 2024, 2023, 1993, 1978, 1984, 1988, 1993, 1978,
     1979, 1985, 1976, 1988, 1979, 2012,  893, 2198, 2003, 2010,
     2009,  894, 2007, 1970,  908, 1970, 1983, 1982, 1977, 1972,
     1977, 1975, 1966, 1965, 1967, 1968, 1957, 1953, 1956, 1963,
     1965, 1956, 1963, 1966, 1948,  911, 1960, 1948, 1947, 1954,
     1956, 1947, 1954, 1957, 1939,  914, 1951, 1939, 1938, 1945,
     1947, 1938, 1945, 1948, 1930,  917, 1942, 1930, 1958,  895,
     1957,  912, 1963, 2198, 1962, 2198, 1929, 1921, 1923,  924,
     1923, 1936, 1931, 1926, 1931, 1929, 1920,  919, 1944,  920,
     1951, 1949, 2198,  932,  935, 1922, 1910, 1909, 1922, 1921,

     1906, 1917,  938, 1914, 1908, 1940,  941,  944,  947, 1905,
     1903,  951, 1937, 1904, 1899,  954,  957, 1904,  960, 1899,
     1897,  963, 1931, 1898, 1893,  966,  969, 1898,  972, 1893,
     1891,  975, 1925, 1892, 1887,  978,  981, 1892, 1877, 1894,
      984, 1892, 1880, 1893, 1892, 1877, 1888,  987,  990, 1891,
     1792, 1778, 1744, 1747,  993, 1689,  996, 1705, 1658, 1683,
      999, 1002, 2198, 1005, 1628, 1620, 1009, 1645, 1012, 1609,
     1015, 1603, 1018, 1599, 1594, 1021, 1630, 1024, 1561, 1027,
     1260, 1030, 1257, 1254, 1033, 1291, 1036, 1257, 1039, 1254,
     1247, 1250, 1263, 1258, 1245, 1269, 1042, 1254, 1256, 1243,

     1265, 1251, 1045, 1048, 1051, 1276, 1054, 1245, 1057, 1060,
     1241, 1063, 1243, 1066, 1069, 1239, 1072, 1241, 1075, 1078,
     1237, 1243, 1245, 1243, 1253, 1239, 1081, 1084, 1238, 1089,
     1136, 1238, 1139, 1142, 1262, 1145, 1227, 1148, 1151, 1154,
     1226, 1157, 1160, 1163, 1146, 1169, 1172, 1142, 1145,  903,
     1175,  897, 1182, 2198,    0, 1185,  908,  871,  861,  848,
      834,  826, 1188,  814, 1191,  808, 1194,  795,  739, 1197,
      752, 1200, 1203,  734,  702,  668,  644, 1206, 1209, 1212,
      646,  612, 1215, 1218,  596,  586,  567,  566, 1221, 1224,
     1227,  547,  511,  499, 1230,  476,  414,  355,  281, 1233,

     1236,  272, 1239,   93, 2198, 1242, 1245, 1248,    5, 1251,
     1254, 2198, 1257, 2198, 1298, 1309, 1320, 1331, 1342, 1353,
     1364, 1375, 1386, 1397, 1408, 1419, 1430, 1441, 1452, 1463,
     1474, 1485, 1496, 1507, 1518, 1529, 1540, 1551, 1562, 1573,
     1584, 1595, 1606, 1611, 1620, 1628, 1633, 1636, 1646, 1651,
     1662, 1673, 1684, 1695, 1706, 1717, 1728, 1739, 1750, 1761,
     1772, 1783, 1794, 1805, 1816, 1827, 1838, 1849, 1860, 1871,
     1882, 1893, 1904
    } ;

static yyconst short int yy_def[874] =
    {   0,
      815,  815,  816,  816,  817,  817,  818,  818,  819,  819,
      820,  820,  820,  820,  814,   15,  815,  815,  815,  815,
      814,   21,  814,   23,  814,   25,  815,  815,  814,   29,
      815,   31,  821,  821,  815,  815,  822,  822,  823,  823,
      824,  824,  815,  815,  815,  815,  825,  825,  826,  826,
      827,  827,  815,  815,  828,  828,  829,  829,  830,  830,
      831,  831,  832,  832,  833,  833,  834,  834,  835,  835,
      836,  836,  837,  837,  838,  838,  839,  839,  840,  840,
      814,  814,  841,  814,  814,  842,  843,  814,  842,  814,
      841,  814,  814,  814,  841,  814,  814,  814,  814,  841,

      814,  814,  814,  841,  814,  814,  814,  814,  814,  814,
      844,  814,  814,  845,  814,  814,  846,  814,  814,  814,
      847,  814,  814,  848,  814,  814,  849,  814,  814,  814,
      814,  814,  814,  814,  814,  850,  814,  814,  814,  850,
      850,  850,  850,  850,  850,  850,  850,  130,  814,  850,
      814,  814,  814,  814,  814,  851,  852,  851,  851,  814,
      841,  814,  814,  814,  814,  841,  814,  814,  814,  814,
      814,  814,  853,  854,  814,  855,  814,  814,  814,  814,
      814,  814,  814,  841,  814,  814,  814,  814,  841,  814,
      814,  814,  856,  857,  814,  856,  856,  814,  814,  814,

      858,  859,  814,  858,  814,  841,  814,  814,  814,  814,
      841,  814,  814,  814,  209,  814,  841,  814,  814,  209,
      860,  861,  814,  860,  860,  862,  863,  814,  862,  862,
      814,  841,  814,  814,  209,  864,  865,  814,  864,  814,
      841,  814,  814,  209,  814,  841,  814,  814,  209,  814,
      841,  814,  814,  209,  814,  841,  814,  814,  209,  814,
      841,  814,  814,  209,  841,  814,  814,  814,  842,  843,
      842,  842,  842,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  844,  845,  814,
      814,  814,  814,  814,  846,  814,  814,  847,  814,  814,

      848,  814,  849,  849,  814,  130,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  850,  814,  814,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  148,  814,
      814,  814,  814,  850,  814,  814,  814,  814,  814,  851,
      852,  851,  851,  851,  814,  814,  814,  853,  854,  853,
      855,  814,  814,  866,  814,  814,  856,  856,  857,  856,
      857,  856,  856,  856,  814,  814,  814,  814,  858,  814,
      859,  858,  841,  858,  858,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      860,  861,  860,  860,  860,  860,  860,  860,  860,  860,

      860,  860,  860,  860,  862,  863,  862,  862,  862,  862,
      862,  862,  862,  862,  862,  862,  862,  862,  814,  864,
      865,  864,  864,  864,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  867,  814,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      814,  814,  850,  814,  814,  814,  814,  814,  866,  857,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
      862,  862,  862,  862,  862,  862,  862,  862,  862,  862,

      868,  869,  870,  871,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  872,  814,
      814,  814,  873,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  814,  814,  850,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  862,  862,
      862,  862,  862,  862,  862,  862,  862,  862,  868,  814,
      869,  814,  870,  814,  871,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  872,  814,
      814,  873,  814,  850,  814,  850,  850,  850,  850,  850,

      850,  850,  850,  814,  814,  850,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  862,  862,
      862,  862,  862,  862,  862,  862,  862,  862,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  850,
      850,  850,  850,  850,  850,  850,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  860,  860,  860,  860,  860,  860,  860,  860,
      860,  862,  862,  862,  862,  862,  862,  862,  862,  862,
      814,  814,  814,  814,  814,  814,  814,  814,  850,  850,

      850,  850,  850,  814,  850,  814,  814,  814,  814,  814,
      814,  860,  860,  860,  860,  860,  862,  862,  862,  862,
      862,  814,  814,  814,  814,  814,  814,  814,  850,  814,
      850,  850,  814,  814,  814,  814,  814,  814,  814,  860,
      860,  860,  860,  862,  862,  862,  862,  814,  814,  814,
      814,  814,  850,  814,  850,  814,  850,  814,  814,  814,
      814,  814,  814,  860,  860,  862,  862,  814,  814,  814,
      814,  814,  850,  814,  814,  814,  814,  814,  860,  862,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  860,
      862,  814,  814,  814,  814,  814,  814,  814,  814,  814,

      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,    0,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814
    } ;

static yyconst short int yy_nxt[2248] =
    {   0,
      814,   83,   83,   84,   84,   87,   87,   88,   88,   91,
       91,   92,   92,   85,   85,  299,  267,   89,   89,  268,
      299,   93,   93,   95,   95,   96,   96,  100,  100,  101,
      101,  272,   97,   97,  273,   98,   98,  279,  814,  102,
      102,  104,  104,  105,  105,  280,  104,  104,  109,  109,
      106,  106,  812,  107,  107,  106,  106,  274,  107,  107,
      275,  328,  108,  108,  271,  334,  265,  110,  110,   82,
       83,   82,   84,   82,   82,   82,   82,   82,   82,   82,
       82,  111,   85,  111,  111,   82,   82,   82,   82,   82,
       82,   82,   82,  111,  111,  111,  111,  111,  111,  111,

      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,   82,   82,   82,   83,  112,
      113,   83,  112,  113,   83,  114,  113,  809,  114,   83,
       85,  113,   83,   85,   84,   83,   85,   84,  446,  115,
      277,   85,  115,  278,   85,  115,  277,   85,  447,  278,
      115,   82,   83,  116,   84,   82,   82,   82,  117,   82,
       82,  117,   82,   82,   85,  117,  118,  119,   82,   82,
       82,   82,  117,   82,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  120,   82,   82,

       82,   83,   82,   84,   82,   82,   82,  121,   82,   82,
      121,  122,   82,   85,  121,   82,  122,   82,   82,   82,
       82,  121,   82,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,   82,   82,   82,   82,
       83,  123,   84,   82,   82,   82,   82,   82,   82,  124,
      125,  124,   85,  124,   82,  119,  124,   82,  124,   82,
       82,   82,   82,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  120,   82,   82,   83,  126,

       84,  148,  127,  300,  157,  149,  158,  157,  128,  158,
       85,   82,  807,  128,   82,  161,  159,   84,  174,  159,
      175,  174,  176,  175,   83,  176,   84,  162,  805,  161,
      177,   84,  332,  177,  455,  163,   85,  164,  456,  282,
      150,  162,  283,  129,   83,  126,   84,  294,  127,  163,
      184,  164,  185,  184,  128,  185,   85,  333,  302,  128,
      285,  303,  186,  178,  179,  186,  178,  179,  286,  180,
      181,  187,  342,  194,  187,  195,  202,  316,  203,  265,
      316,  318,  196,  324,  319,  197,  325,  804,  204,  129,
       82,   83,  130,  131,  132,   82,   82,  133,  134,   82,

      133,  135,  136,  137,  136,  136,  135,  138,  135,   82,
       82,  139,   82,   82,  136,  136,  140,  136,  141,  136,
      136,  136,  142,  136,  136,  136,  143,  144,  136,  145,
      146,  147,  136,  136,  136,  136,   82,   82,  136,   83,
      151,   84,  347,  347,  347,   83,  152,   84,  342,  803,
      189,   85,   84,  153,  153,  265,  335,   85,   83,   83,
       84,   84,  190,  189,  154,   84,  191,  360,  192,  265,
       85,   85,  307,  307,  307,  190,  361,  299,  155,  191,
      336,  192,  299,  308,  153,  166,  167,  168,  167,  332,
      180,  181,  169,  170,  337,  171,  332,  172,  166,  167,

      168,  167,  802,  182,  182,  169,  170,  194,  171,  195,
      172,   83,  198,   84,  333,  202,  196,  203,  329,  197,
      199,  333,  330,  200,   83,  198,   84,  204,  206,  206,
      207,  207,  211,  199,  212,  211,  200,  212,  800,  343,
      208,  208,  344,  213,  214,  799,  213,  214,  209,  217,
      217,  218,  218,  222,  215,  223,  222,  331,  223,  365,
      267,  219,  219,  268,  227,  224,  228,  366,  224,  220,
      227,  232,  228,  233,  267,  225,  229,  268,  232,  237,
      233,  238,  229,  234,  237,  353,  238,  798,  354,  230,
      234,  239,  241,  241,  242,  242,  239,  235,  246,  246,

      247,  247,  797,  267,  243,  243,  355,  251,  796,  252,
      248,  248,  244,  251,  256,  252,  257,  292,  249,  253,
      795,  256,  261,  257,  262,  253,  258,  261,  267,  262,
      293,  268,  254,  258,  263,  794,  307,  307,  307,  263,
      259,  345,  345,  345,  793,  358,  264,  308,  362,  370,
      346,  345,  345,  345,  363,  267,  374,  364,  368,  375,
      346,  294,  306,  307,  307,  350,  372,  265,  373,  265,
      792,  376,  388,  308,  377,  389,  788,  265,  387,  387,
      387,  390,  390,  390,  267,  300,  309,  268,  310,  393,
      394,  265,  311,  395,  407,  408,  265,  312,  409,  313,

      314,  315,  419,  419,  419,  267,  787,  422,  268,  265,
      265,  265,  378,  271,  423,  265,  379,  424,  425,  425,
      425,  267,  380,  381,  268,  382,  383,  384,  385,  294,
      386,  396,  426,  426,  426,  397,  267,  267,  448,  268,
      268,  398,  399,  786,  400,  401,  402,  403,  449,  404,
      410,  427,  427,  427,  411,  428,  428,  428,  785,  267,
      412,  413,  268,  414,  415,  416,  417,  783,  418,  429,
      429,  429,  267,  279,  432,  268,  285,  286,  292,  782,
      433,  280,  280,  302,  286,  433,  303,  307,  307,  307,
      436,  293,  441,  437,  316,  442,  448,  316,  308,  445,

      335,  358,  358,  461,  362,  362,  449,  345,  345,  345,
      347,  347,  347,  450,  501,  502,  346,  347,  347,  347,
      781,  350,  294,  265,  336,  265,  466,  467,  360,  372,
      265,  373,  365,  265,  468,  503,  504,  361,  337,  360,
      366,  265,  471,  780,  393,  472,  265,  481,  361,  779,
      482,  470,  387,  387,  387,  390,  390,  390,  407,  491,
      265,  778,  492,  419,  419,  419,  265,  265,  422,  777,
      265,  425,  425,  425,  426,  426,  426,  427,  427,  427,
      428,  428,  428,  429,  429,  429,  510,  516,  776,  521,
      511,  466,  467,  466,  467,  517,  775,  448,  518,  522,

      360,  468,  265,  588,  774,  570,  518,  522,  574,  361,
      595,  595,  595,  616,  616,  616,  626,  616,  626,  636,
      616,  636,  572,  773,  771,  576,  595,  595,  595,  588,
      590,  770,  518,  593,  649,  649,  649,  595,  595,  595,
      657,  657,  657,  661,  661,  661,  662,  662,  662,  664,
      664,  664,  663,  667,  667,  667,  616,  616,  616,  671,
      671,  671,  673,  664,  673,  676,  667,  676,  626,  616,
      626,  680,  671,  680,  682,  664,  682,  685,  667,  685,
      636,  616,  636,  689,  671,  689,  649,  649,  649,  657,
      657,  657,  649,  649,  649,  704,  704,  704,  657,  657,

      657,  661,  661,  661,  662,  662,  662,  664,  664,  664,
      663,  667,  667,  667,  709,  709,  709,  671,  671,  671,
      673,  664,  673,  676,  667,  676,  714,  709,  714,  680,
      671,  680,  682,  664,  682,  685,  667,  685,  719,  709,
      719,  689,  671,  689,  704,  704,  704,  733,  733,  733,
      704,  704,  704,  734,  734,  734,  736,  736,  736,  709,
      709,  709,  738,  738,  738,  740,  736,  740,  714,  709,
      714,  742,  738,  742,  744,  736,  744,  719,  709,  719,
      746,  738,  746,  733,  733,  733,  734,  734,  734,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,

      754,  755,  754,  317,  755,  754,  754,  754,  754,  754,
      754,  754,  754,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  754,  754,  755,  756,  756,
      756,  733,  733,  733,  734,  734,  734,  736,  736,  736,
      738,  738,  738,  763,  763,  763,  740,  736,  740,  742,
      738,  742,  765,  763,  765,  744,  736,  744,  758,  769,
      759,  746,  738,  746,  767,  763,  767,  756,  756,  756,
      768,  760,  766,  761,  772,  772,  772,  756,  756,  756,
      763,  763,  763,  765,  763,  765,  767,  763,  767,  772,

      772,  772,  772,  772,  772,  784,  784,  784,  789,  789,
      789,  790,  789,  790,  791,  789,  791,  784,  784,  784,
      784,  784,  784,  789,  789,  789,  790,  789,  790,  791,
      789,  791,  801,  801,  801,  806,  806,  806,  801,  801,
      801,  808,  808,  808,  806,  806,  806,  810,  810,  810,
      808,  808,  808,  810,  810,  810,  813,  813,  813,  813,
      813,  813,  764,  762,  735,  757,  753,  752,  751,  750,
      749,  748,  747,  745,  743,  741,  739,  737,  735,  732,
      731,  730,  729,  728,  727,  726,  725,  724,  723,  722,
      721,  811,  720,  686,  718,  717,  716,  811,   82,   82,

       82,   82,   82,   82,   82,   82,   82,   82,   82,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  173,  173,  173,

      173,  173,  173,  173,  173,  173,  173,  173,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  226,  226,  226,  226,

      226,  226,  226,  226,  226,  226,  226,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  269,  715,  269,  269,  269,

      269,  269,  269,  269,  269,  269,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  288,  288,  288,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  295,  677,  295,  713,  295,  298,  712,  298,  711,
      298,  301,  301,  301,  710,  301,  304,  668,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  317,  317,  317,
      708,  317,  340,  340,  340,  340,  707,  340,  340,  340,
      340,  340,  340,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  348,  660,  706,  348,  348,  348,
      348,  348,  348,  348,  348,  349,  349,  349,  349,  349,

      349,  349,  349,  349,  349,  349,  351,  660,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  357,  705,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  391,  703,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  405,  702,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  406,  406,  406,  406,  406,  406,

      406,  406,  406,  406,  406,  420,  701,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  469,  700,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  589,  589,  589,  589,  589,  589,  589,

      589,  589,  589,  589,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  699,  698,  697,  696,  695,
      694,  693,  692,  691,  690,  688,  687,  686,  684,  683,
      681,  679,  678,  677,  675,  674,  672,  670,  669,  668,
      666,  665,  660,  659,  658,  656,  655,  654,  653,  652,
      651,  650,  593,  591,  590,  648,  647,  646,  645,  644,
      643,  642,  641,  640,  639,  576,  574,  572,  570,  638,
      637,  635,  634,  633,  632,  631,  630,  629,  628,  627,
      625,  624,  623,  622,  621,  620,  619,  618,  617,  615,
      614,  613,  612,  611,  610,  609,  608,  607,  606,  605,

      604,  603,  602,  601,  600,  599,  598,  597,  596,  594,
      593,  591,  591,  590,  516,  587,  586,  585,  584,  583,
      582,  581,  580,  579,  578,  577,  576,  574,  572,  570,
      568,  567,  566,  565,  564,  563,  562,  561,  560,  559,
      558,  557,  556,  555,  554,  553,  552,  551,  550,  549,
      548,  547,  546,  545,  544,  543,  542,  541,  540,  539,
      538,  537,  536,  535,  534,  533,  532,  531,  530,  529,
      528,  527,  526,  525,  524,  523,  519,  515,  514,  513,
      512,  509,  508,  507,  446,  506,  505,  432,  500,  499,
      498,  497,  496,  495,  494,  493,  490,  489,  488,  487,

      486,  485,  484,  483,  480,  479,  478,  477,  476,  475,
      474,  473,  370,  370,  266,  370,  370,  367,  358,  358,
      358,  358,  352,  465,  464,  339,  338,  463,  462,  460,
      459,  458,  457,  454,  453,  452,  451,  445,  444,  443,
      440,  439,  438,  305,  305,  297,  296,  297,  296,  290,
      435,  434,  431,  430,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  370,  367,  358,  266,  356,  266,
      352,  266,  266,  339,  338,  328,  327,  326,  323,  322,
      321,  320,  305,  297,  296,  291,  290,  287,  284,  281,
      266,  266,  276,  266,  266,  266,  814,   81,  814,  814,

      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814
    } ;

static yyconst short int yy_chk[2248] =
    {   0,
        0,    1,    2,    1,    2,    3,    4,    3,    4,    5,
        6,    5,    6,    1,    2,  122,   85,    3,    4,   85,
      122,    5,    6,    7,    8,    7,    8,    9,   10,    9,
       10,   89,    7,    8,   89,    7,    8,  105,    0,    9,
       10,   11,   12,   11,   12,  105,   13,   14,   13,   14,
       11,   12,  809,   11,   12,   13,   14,   93,   13,   14,
       93,  150,   11,   12,   87,  150,   87,   13,   14,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   17,   17,
       17,   18,   18,   18,   19,   17,   19,  804,   18,   20,
       17,   20,   35,   18,   35,   36,   19,   36,  318,   17,
       98,   20,   18,   98,   35,   19,  102,   36,  318,  102,
       20,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   27,   27,

       27,   30,   27,  123,   33,   30,   33,   34,   27,   34,
       27,   33,  802,   27,   34,   37,   33,   37,   41,   34,
       41,   42,   41,   42,   43,   42,   43,   37,  799,   38,
       41,   38,  149,   42,  324,   37,   43,   37,  324,  107,
       30,   38,  107,   27,   28,   28,   28,  123,   28,   38,
       47,   38,   47,   48,   28,   48,   28,  149,  126,   28,
      109,  126,   47,   41,   41,   48,   42,   42,  109,   43,
       43,   47,  157,   51,   48,   51,   55,  133,   55,  157,
      133,  137,   51,  144,  137,   51,  144,  798,   55,   28,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   31,
       31,   31,  171,  171,  171,   44,   31,   44,  341,  797,
       49,   31,   49,   31,   31,  341,  151,   44,   45,   46,
       45,   46,   49,   50,   31,   50,   49,  194,   49,  194,
       45,   46,  131,  131,  131,   50,  194,  299,   31,   50,
      151,   50,  299,  131,   31,   39,   39,   39,   39,  330,
       44,   44,   39,   39,  151,   39,  332,   39,   40,   40,

       40,   40,  796,   45,   46,   40,   40,   52,   40,   52,
       40,   53,   53,   53,  330,   56,   52,   56,  148,   52,
       53,  332,  148,   53,   54,   54,   54,   56,   57,   58,
       57,   58,   59,   54,   59,   60,   54,   60,  794,  159,
       57,   58,  159,   59,   59,  793,   60,   60,   58,   61,
       62,   61,   62,   63,   60,   63,   64,  148,   64,  198,
      162,   61,   62,  162,   65,   63,   65,  198,   64,   62,
       66,   67,   66,   67,  172,   64,   65,  172,   68,   69,
       68,   69,   66,   67,   70,  177,   70,  792,  177,   66,
       68,   69,   71,   72,   71,   72,   70,   68,   73,   74,

       73,   74,  788,  186,   71,   72,  186,   75,  787,   75,
       73,   74,   72,   76,   77,   76,   77,  116,   74,   75,
      786,   78,   79,   78,   79,   76,   77,   80,  190,   80,
      116,  190,   76,   78,   79,  785,  132,  132,  132,   80,
       78,  167,  167,  167,  782,  196,   80,  132,  196,  204,
      167,  168,  168,  168,  197,  200,  204,  197,  200,  204,
      168,  116,  130,  130,  130,  174,  202,  174,  202,  174,
      781,  208,  214,  130,  208,  214,  777,  174,  213,  213,
      213,  218,  218,  218,  219,  300,  130,  219,  130,  222,
      224,  222,  130,  224,  227,  229,  227,  130,  229,  130,

      130,  130,  233,  233,  233,  234,  776,  237,  234,  237,
      174,  174,  209,  270,  239,  270,  209,  239,  242,  242,
      242,  243,  209,  209,  243,  209,  209,  209,  209,  300,
      209,  225,  247,  247,  247,  225,  248,  253,  437,  248,
      253,  225,  225,  775,  225,  225,  225,  225,  437,  225,
      230,  252,  252,  252,  230,  257,  257,  257,  774,  258,
      230,  230,  258,  230,  230,  230,  230,  771,  230,  262,
      262,  262,  263,  279,  280,  263,  285,  286,  292,  769,
      286,  279,  280,  302,  285,  280,  302,  307,  307,  307,
      308,  292,  312,  308,  316,  312,  319,  316,  307,  331,

      335,  358,  363,  331,  358,  363,  319,  345,  345,  345,
      346,  346,  346,  319,  430,  430,  345,  347,  347,  347,
      768,  349,  292,  349,  335,  349,  353,  353,  359,  371,
      359,  371,  365,  349,  353,  431,  431,  359,  335,  361,
      365,  361,  378,  766,  392,  378,  392,  396,  361,  764,
      396,  361,  387,  387,  387,  390,  390,  390,  406,  410,
      406,  762,  410,  419,  419,  419,  349,  349,  421,  761,
      421,  425,  425,  425,  426,  426,  426,  427,  427,  427,
      428,  428,  428,  429,  429,  429,  441,  446,  760,  449,
      441,  466,  466,  468,  468,  446,  759,  522,  446,  449,

      470,  468,  470,  517,  758,  570,  517,  522,  570,  470,
      525,  525,  525,  546,  546,  546,  556,  556,  556,  566,
      566,  566,  572,  757,  752,  572,  580,  580,  580,  588,
      590,  750,  588,  590,  594,  594,  594,  595,  595,  595,
      603,  603,  603,  607,  607,  607,  608,  608,  608,  609,
      609,  609,  608,  612,  612,  612,  616,  616,  616,  617,
      617,  617,  619,  619,  619,  622,  622,  622,  626,  626,
      626,  627,  627,  627,  629,  629,  629,  632,  632,  632,
      636,  636,  636,  637,  637,  637,  641,  641,  641,  648,
      648,  648,  649,  649,  649,  655,  655,  655,  657,  657,

      657,  661,  661,  661,  662,  662,  662,  664,  664,  664,
      662,  667,  667,  667,  669,  669,  669,  671,  671,  671,
      673,  673,  673,  676,  676,  676,  678,  678,  678,  680,
      680,  680,  682,  682,  682,  685,  685,  685,  687,  687,
      687,  689,  689,  689,  697,  697,  697,  703,  703,  703,
      704,  704,  704,  705,  705,  705,  707,  707,  707,  709,
      709,  709,  710,  710,  710,  712,  712,  712,  714,  714,
      714,  715,  715,  715,  717,  717,  717,  719,  719,  719,
      720,  720,  720,  727,  727,  727,  728,  728,  728,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,

      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  731,  731,
      731,  733,  733,  733,  734,  734,  734,  736,  736,  736,
      738,  738,  738,  739,  739,  739,  740,  740,  740,  742,
      742,  742,  743,  743,  743,  744,  744,  744,  734,  749,
      734,  746,  746,  746,  747,  747,  747,  751,  751,  751,
      748,  734,  745,  734,  753,  753,  753,  756,  756,  756,
      763,  763,  763,  765,  765,  765,  767,  767,  767,  770,

      770,  770,  772,  772,  772,  773,  773,  773,  778,  778,
      778,  779,  779,  779,  780,  780,  780,  783,  783,  783,
      784,  784,  784,  789,  789,  789,  790,  790,  790,  791,
      791,  791,  795,  795,  795,  800,  800,  800,  801,  801,
      801,  803,  803,  803,  806,  806,  806,  807,  807,  807,
      808,  808,  808,  810,  810,  810,  811,  811,  811,  813,
      813,  813,  741,  737,  735,  732,  729,  726,  725,  724,
      723,  722,  721,  718,  716,  713,  711,  708,  706,  702,
      701,  700,  699,  698,  696,  695,  694,  693,  692,  691,
      690,  807,  688,  686,  684,  683,  681,  810,  815,  815,

      815,  815,  815,  815,  815,  815,  815,  815,  815,  816,
      816,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  824,  824,  824,

      824,  824,  824,  824,  824,  824,  824,  824,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  833,  833,  833,  833,

      833,  833,  833,  833,  833,  833,  833,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  835,  835,
      835,  835,  835,  835,  835,  835,  835,  835,  835,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  842,  679,  842,  842,  842,

      842,  842,  842,  842,  842,  842,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  844,  844,  844,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  846,  677,  846,  675,  846,  847,  674,  847,  672,
      847,  848,  848,  848,  670,  848,  849,  668,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  850,  850,  850,
      666,  850,  851,  851,  851,  851,  665,  851,  851,  851,
      851,  851,  851,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  853,  660,  659,  853,  853,  853,
      853,  853,  853,  853,  853,  854,  854,  854,  854,  854,

      854,  854,  854,  854,  854,  854,  855,  658,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  856,  656,  856,
      856,  856,  856,  856,  856,  856,  856,  856,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  858,
      858,  858,  858,  858,  858,  858,  858,  858,  858,  858,
      859,  859,  859,  859,  859,  859,  859,  859,  859,  859,
      859,  860,  654,  860,  860,  860,  860,  860,  860,  860,
      860,  860,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  862,  653,  862,  862,  862,  862,  862,
      862,  862,  862,  862,  863,  863,  863,  863,  863,  863,

      863,  863,  863,  863,  863,  864,  652,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  865,  865,  865,  865,
      865,  865,  865,  865,  865,  865,  865,  866,  651,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  867,  867,
      867,  867,  867,  867,  867,  867,  867,  867,  867,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  872,  872,  872,  872,  872,  872,  872,

      872,  872,  872,  872,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  873,  873,  650,  647,  646,  645,  644,
      643,  642,  640,  639,  638,  635,  634,  633,  631,  630,
      628,  625,  624,  623,  621,  620,  618,  615,  614,  613,
      611,  610,  606,  605,  604,  602,  601,  600,  599,  598,
      597,  596,  592,  591,  589,  587,  586,  585,  584,  583,
      582,  581,  579,  578,  577,  575,  573,  571,  569,  568,
      567,  565,  564,  563,  562,  561,  560,  559,  558,  557,
      555,  554,  553,  552,  551,  550,  549,  548,  547,  545,
      544,  543,  542,  541,  540,  539,  538,  537,  536,  535,

      534,  533,  532,  531,  530,  529,  528,  527,  526,  524,
      523,  521,  520,  519,  516,  515,  514,  513,  512,  511,
      510,  509,  508,  507,  506,  505,  504,  503,  502,  501,
      500,  499,  498,  497,  496,  495,  494,  493,  492,  491,
      490,  489,  488,  487,  486,  485,  484,  483,  482,  481,
      480,  479,  478,  477,  476,  475,  474,  473,  472,  471,
      465,  464,  463,  462,  461,  460,  459,  458,  457,  456,
      455,  454,  453,  452,  451,  450,  447,  445,  444,  443,
      442,  440,  439,  438,  436,  435,  434,  432,  418,  417,
      416,  415,  414,  413,  412,  411,  404,  403,  402,  401,

      400,  399,  398,  397,  386,  385,  384,  383,  382,  381,
      380,  379,  375,  374,  373,  372,  369,  366,  364,  362,
      360,  357,  351,  339,  338,  337,  336,  334,  333,  328,
      327,  326,  325,  323,  322,  321,  320,  315,  314,  313,
      311,  310,  309,  304,  303,  297,  296,  294,  293,  289,
      287,  284,  275,  274,  265,  261,  256,  251,  246,  241,
      232,  217,  211,  206,  201,  199,  193,  189,  187,  184,
      176,  166,  161,  155,  154,  147,  146,  145,  143,  142,
      141,  140,  127,  120,  118,  115,  114,  110,  108,  106,
      104,  100,   97,   95,   91,   83,   81,  814,  814,  814,

      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
yy_lp = yy_full_lp; /* restore orig. accepting pos. */ \
yy_state_ptr = yy_full_state; /* restore orig. state */ \
yy_current_state = *yy_state_ptr; /* restore curr. state */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "cpp.l"
#define INITIAL 0
/*************************************************************************

    CPP lexer

    This file is derived from the DOC++ source by Roland Wunderling
    and Malte Zoeckler.

    Better handling of typedefs, linenumbers, formatting, comments
    and various other improvements was made. Still a lot to be done
    to handle all modern C++ constructs. <bjarke@viksoe.dk>

 *************************************************************************/
#line 16 "cpp.l"

#pragma code_seg( "MISC" )

/*
 *	Includes
 */

#include "CppTypes.h"


/* -----------------------------------------------------------------
 *
 *	statics
 */
static const char*	inputString ;
static int		inputPosition ;
static int		lastContext ;
static int		lastCContext ;
static int		lastTContext;
static int		protection   = GLOB ;
static int		bracketCount = 0 ;
static int		sharpCount   = 0 ;
static Entry*		current_root = 0 ;
static Entry*		global_root  = 0 ;
static Entry*		current      = 0 ;

static int		yyLineNr = 1 ;
static char		yyFileName[264] ;
static McString*	currentString ;

static void msg( const char* str, const char* str2=NULL )
{
#ifdef _DEBUG
	if( verb )
	{
		printf( "%s(%d):\t%s", yyFileName, yyLineNr, str ) ;
		if( str2 ) printf( "%s", str2 ) ;
		printf( "\n" ) ;
	}
#endif
}

static void lineCount()
{
	for( const char* c = yytext ; *c ; ++c )
		yyLineNr += (*c == '\n') ;
}


static void addType( Entry* current )
{
   if( !current->name.empty() ) {
      if( !current->type.empty() ) current->type += ' ' ;
      current->type += current->name ;
      current->name.clear() ;
   }
   if( !current->args.empty() ) {
      if( !current->type.empty() ) current->type += ' ' ;
      current->type += current->args ;
      current->args.clear() ;
   }
}

/* -----------------------------------------------------------------
 */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result = yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
	int c = 0;
	while( c < max_size && inputString[inputPosition] )
	{
		*buf = inputString[inputPosition++] ;
		c++; buf++;
	}
	return c;
}

#define Cxx_Memo 1

#define SubDoc 2

#define SubDocComment 3

#define SubDocCppComment 4

#define Doc 5

#define VerbDoc 6

#define Define 7

#define DefineEnd 8

#define DefineEnded 9

#define ClassName 10

#define TypedefName 11

#define Bases 12

#define NextSemi 13

#define FindMembers 14

#define Function 15

#define Operator 16

#define Throws 17

#define Array 18

#define Round 19

#define Curly 20

#define SkipCurly 21

#define SkipInits 22

#define SkipCPP 23

#define Sharp 24

#define Comment 25

#define SkipComment 26

#define SkipCxxComment 27

#define CppDoc 28

#define CppMemo 29

#define See 30

#define Args 31

#define Type 32

#define Author 33

#define Name 34

#define Version 35

#define Param 36

#define Memo 37

#define Return 38

#define Exception 39

#line 1449 "lex.cpp.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplusx
//#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 142 "cpp.l"


#line 1606 "lex.cpp.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 815 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 814 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yy_looking_for_trail_begin )
					{
					if ( yy_act == yy_looking_for_trail_begin )
						{
						yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					yy_full_match = yy_cp;
					yy_full_state = yy_state_ptr;
					yy_full_lp = yy_lp;
					break;
					}
				++yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 144 "cpp.l"
{ 
					  yyLineNr = 1 ; 
					  int i;
					  for( i = 0 ; yytext[i+1] != 6 ; i++ )
						yyFileName[i] = yytext[i+1] ;
					  yyFileName[i] = 0 ;
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 152 "cpp.l"
{ BEGIN( FindMembers ) ; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 153 "cpp.l"

	YY_BREAK
case 4:
YY_RULE_SETUP
#line 154 "cpp.l"
{ BEGIN( SkipCurly ) ; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 156 "cpp.l"
{ 
					  current->protection = protection = PUBL ;
					  lineCount() ;
					}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 160 "cpp.l"
{ 
					  current->protection = protection = PROT ;
					  lineCount() ;
					}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 164 "cpp.l"
{ 
					  current->protection = protection = PRIV ;
					  lineCount() ;
					}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 169 "cpp.l"
{
					  msg( "found class    ", current->name ) ;
					  current->section = TYPEDEF_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef class" ;
					  current->name.clear() ;
					  lineCount() ;
					}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 178 "cpp.l"
{
					  msg( "found struct   ", current->name ) ;
					  current->section = STRUCT_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef struct" ;
					  current->name.clear() ;
					  lastTContext = 1;
					  lineCount() ;
				  	  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 188 "cpp.l"
{
					  msg( "found struct   ", current->name ) ;
					  current->section = STRUCT_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef struct" ;
					  current->name.clear() ;
					  lineCount() ;
					  current->file = yyFileName ;
					  current->startLine = yyLineNr ;
					  lastTContext = 1;
				  	  BEGIN( Curly ) ;
					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 201 "cpp.l"
{
					  msg( "found enum     ", current->name ) ;
					  current->section = ENUM_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef enum" ;
					  current->name.clear() ;
					  lineCount() ;
				  	  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 211 "cpp.l"
{
					  msg( "found union    ", current->name ) ;
					  current->section = UNION_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef union" ;
					  current->name.clear() ;
					  lineCount() ;
				  	  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 221 "cpp.l"
{ 
					  current->section = CLASS_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "interface" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 230 "cpp.l"
{ 
					  current->section = CLASS_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "class" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 239 "cpp.l"
{ 
					  current->section = STRUCT_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "struct" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 248 "cpp.l"
{ 
					  current->section = ENUM_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "enum" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 257 "cpp.l"
{ 
					  current->section = UNION_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "union" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 18:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 267 "cpp.l"
{ 
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  current->name  = yytext ;
					  BEGIN( Operator ) ;
					}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 273 "cpp.l"
{ 
					  current->name += yytext ;
					  current->lineNo = yyLineNr;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 279 "cpp.l"
{ 
					  addType( current ) ;
				          current->lineNo = yyLineNr;
					  current->name  = yytext ;
					}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 285 "cpp.l"
{ BEGIN( SkipCPP ) ; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 286 "cpp.l"

	YY_BREAK
case 23:
YY_RULE_SETUP
#line 287 "cpp.l"

	YY_BREAK
case 24:
YY_RULE_SETUP
#line 288 "cpp.l"
{ yyLineNr++ ; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 289 "cpp.l"
{ 
					  yyLineNr++ ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 294 "cpp.l"
{ 
					  current->type = "using " ;
					  BEGIN( Define ) ;
					}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 298 "cpp.l"
{ 
					  current->type = "#define" ;
					  BEGIN( Define ) ;
					}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 302 "cpp.l"
{ 
					  current->name = yytext ;
					  current->lineNo = yyLineNr;
					  BEGIN( DefineEnd ) ;
					}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 307 "cpp.l"
{ BEGIN( DefineEnd ) ; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 308 "cpp.l"
{ 
					  current->args = yytext ;
					  BEGIN( DefineEnded ) ;
					}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 312 "cpp.l"
{ yyLineNr++ ; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 313 "cpp.l"
{ 
					  if( current->done == onlyDocs )
					  {
					    current->section = MACRO_SEC ;
					    current->lineNo = yyLineNr;
					    msg( "found macro    ", current->name ) ;
					    current_root->addSubEntry( current ) ;
					    current = new Entry ;
					    current->protection = protection ;
					  }
					  else
					  {
					    current->name.clear() ;
					    current->type.clear() ;
					  }
					  yyLineNr++ ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 332 "cpp.l"
{ 
					  current->name += yytext ; 
					  current->lineNo = yyLineNr;
					}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 337 "cpp.l"
{ 
					  BEGIN( FindMembers ) ;
					  if( current->lineNo == 0 ) current->lineNo = yyLineNr + 1;
					  msg( "found variable ", current->name ) ;
					  if( current->done == onlyDocs )
					  {
					    if( current->section != TYPEDEF_SEC )
						    current->section = VARIABLE_SEC ;
					    current_root->addSubEntry( current ) ;
					    current = new Entry ;
					    current->protection = protection ;
					  }
					  else
					  {
					    current->section = EMPTY_SEC ;
					    current->name.clear() ;
					    current->type.clear() ;
					    current->args.clear() ;
					  }
					  if( *yytext == '=' )
					    BEGIN( NextSemi ) ;
					}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 360 "cpp.l"
{ 
					  current->args += yytext ;
					  sharpCount=1;
					  BEGIN( Array ) ;
					}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 365 "cpp.l"
{ 
					  current->args += *yytext ;
					  if( --sharpCount<=0 )
						BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 370 "cpp.l"
{ 
					  current->args += *yytext ;
					  sharpCount++;	
					}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 374 "cpp.l"
{ current->args += *yytext ; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 376 "cpp.l"
{ 
					  addType( current ) ;
					  current->type += *yytext ;
					  sharpCount=1;
					  BEGIN( Sharp ) ;
					}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 382 "cpp.l"
{ 
					  current->type += *yytext ;
					  if (--sharpCount<=0)
	                                     BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 387 "cpp.l"
{ 
					  current->type += *yytext ;
					  sharpCount++;	
					}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 391 "cpp.l"
{ current->type += *yytext ; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 393 "cpp.l"
{ current->program += yytext ; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 394 "cpp.l"
{ current->program += yytext ; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 395 "cpp.l"
{ current->program += yytext ; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 396 "cpp.l"
{ 
					  current->program += yytext ;
					  lastContext = Curly ;
					  BEGIN( Comment ) ;
					}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 401 "cpp.l"
{ 
					  current->program += yytext ;
					  ++yyLineNr ;
					  lastContext = Curly ;
					  BEGIN( Comment ) ;
					}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 407 "cpp.l"
{ 
					  current->program += yytext ;
					  ++bracketCount ;
					}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 411 "cpp.l"
{ 
					  if( bracketCount > 0 )
					  {
						current->program += yytext ;
						--bracketCount ;
					  }
					  else
					  {
					    current->args += " {...}";

					    if( lastTContext ) 
					    {
					      BEGIN( TypedefName ) ;
					    }
					    else if( current->done == onlyDocs )
					    {
					      int section = current->section;
					      current_root->addSubEntry( current ) ;
					      current = new Entry ;
					      current->protection = protection ;
					      if( section == CLASS_SEC ) current->protection = GLOB ;
					      BEGIN( NextSemi ) ;
					    }
					    else
					    {
					      current->name.clear() ;
					      current->type.clear() ;
					      current->args.clear() ;
					      current->section = EMPTY_SEC ;
					      BEGIN( NextSemi ) ;
					    }
					  }
					}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 444 "cpp.l"
{ 
					  current->program += yytext ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 448 "cpp.l"
{ current->program += yytext ; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 450 "cpp.l"
{ 
					  current->args = yytext ;
					  BEGIN( Round ) ;
					}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 454 "cpp.l"
{ 
					  current->args += *yytext ;
					  ++bracketCount ;
					}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 458 "cpp.l"
{ 
					  current->args += *yytext ;
					  if( bracketCount > 0 )
					    --bracketCount ;
					  else
					    BEGIN( Function ) ;
					}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 465 "cpp.l"
{ lineCount() ; current->args += ", " ; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 466 "cpp.l"
{ lineCount() ; current->args += " " ; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 467 "cpp.l"
{ current->args += *yytext ; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 469 "cpp.l"
{ lineCount() ; current->args += " const " ; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 471 "cpp.l"
{ 
					  current->args += " throw(" ;
					  lineCount() ;
				  	  BEGIN( Round ) ;
					}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 476 "cpp.l"
{ 
					  current->type += current->name ;
					  current->name  = current->args ;
					  current->args  = yytext ;
					  current->lineNo = yyLineNr;
					  BEGIN( Round ) ;
					}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 483 "cpp.l"
{ 
					  msg( "found method   ", current->name ) ;
					  if( current->done == onlyDocs )
					  {
					    current->section = FUNCTION_SEC ;
					    current_root->addSubEntry(current);
					    current = new Entry ;
					    current->protection = protection ;
					  }
					  else
					  {
					    current->name.clear() ;
					    current->type.clear() ;
					    current->args.clear() ;
					  }
					  if( *yytext == '{' )
					      BEGIN( SkipCurly ) ;
					  else if( *yytext == ':' )
					      BEGIN( SkipInits ) ;
					  else
					      BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 506 "cpp.l"
{ BEGIN( SkipCurly ) ; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 507 "cpp.l"
{ ++bracketCount ; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 508 "cpp.l"
{ 
					  if( bracketCount > 0 )
					    --bracketCount ;
					  else
					    BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 515 "cpp.l"
{ 
					  if( current->done == onlyDocs )
					  {
					    current->section = VARIABLE_SEC ;
					    current_root->addSubEntry(current);
					    current = new Entry ;
					    current->protection = protection ;
					  }
					  else
					  {
					    current->section = EMPTY_SEC ;
					    current->type.clear() ;
					    current->name.clear() ;
					    current->args.clear() ;
					  }
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 532 "cpp.l"
{ 
					  if( !current->type.empty() && !current->name.empty() ) current->type += " " ;
					  current->type += current->name ;
				  	  current->name = yytext ;
					  current->lineNo = yyLineNr;
					}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 538 "cpp.l"
{ 
					  current->args = " :" ;
					  BEGIN( Bases ) ;
					}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 542 "cpp.l"
{ 
					  current->file = yyFileName ;
				  	  if( current->lineNo == 0 ) current->lineNo = yyLineNr;
					  current->startLine = yyLineNr ;
				  	  msg( "found class    ", current->name ) ;
				  	  BEGIN( Curly ) ;
					}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 549 "cpp.l"
{ 
					  current->extends.append( new McString(yytext) ) ;
					  if( !current->args.empty() ) current->args += " " ;
					  current->args += yytext ;
					}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 554 "cpp.l"
{ current->args += ',' ; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 556 "cpp.l"
{ 
					  current->program += yytext ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 560 "cpp.l"
{ current->program += yytext ; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 561 "cpp.l"
{ 
					  current->program += yytext ;
					  BEGIN( Curly ) ;
					}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 566 "cpp.l"
{ 
					  if( !current->type.empty() && !current->name.empty() ) current->type += " " ;
					  current->type += current->name ;
				  	  current->name = yytext ;
					  current->lineNo = yyLineNr;
		
				          lastTContext = 0;
					  msg( "found typedef  ", current->name ) ;

				          int section = current->section;
					  current_root->addSubEntry( current ) ;
					  current = new Entry ;
					  current->protection = protection ;
					  if( section == CLASS_SEC ) current->protection = GLOB ;

					  BEGIN( NextSemi ) ;
					}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 584 "cpp.l"
{
				          lastTContext = 0;
					  msg( "found typedef  ", current->name ) ;

					  int section = current->section;
					  current_root->addSubEntry( current ) ;
					  current = new Entry ;
					  current->protection = protection ;
					  if( section == CLASS_SEC ) current->protection = GLOB ;

				          if( *yytext == ',' )
					    BEGIN( NextSemi ) ;
					  else
					    BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 601 "cpp.l"
{ 
					  lineCount() ;
					  if( current->doc.length() > 0
						  ||  current->memo.length() > 0 )
					  {
						msg( "found explicit entry" ) ;
						current->lineNo = yyLineNr;
						current_root->addSubEntry( current ) ;
						current = new Entry ;
					  }
					  current->done = onlyDocs ;
					  BEGIN( Cxx_Memo ) ;
					}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 614 "cpp.l"
{ current->memo += yytext ; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 615 "cpp.l"
{ 
					  yyLineNr++ ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 620 "cpp.l"
{ lineCount() ; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 621 "cpp.l"
{ lineCount() ; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 622 "cpp.l"
{ 
					  lastCContext = YY_START ;
					  BEGIN( SkipComment ) ;
					}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 626 "cpp.l"
{ 
					  lineCount() ;
					  if( current->doc.length() > 0
					      ||  current->memo.length() > 0 )
					  {
					     msg( "found explicit entry" ) ;
					     current->lineNo = yyLineNr;
					     current_root->addSubEntry( current ) ;
					     current = new Entry ;
					  }
					  current->done = onlyDocs ;
					  BEGIN( Doc ) ;
					}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 639 "cpp.l"
{ yyLineNr++; BEGIN( FindMembers ) ; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 640 "cpp.l"
{ 
					  current->doc += yytext ;
					  BEGIN( VerbDoc ) ;
					}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 644 "cpp.l"
{ 
					  current->doc += '\n' ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 648 "cpp.l"
{ 
					  current->doc += yytext ;
					  BEGIN( Doc ) ;
					}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 652 "cpp.l"
{ 
					  current->doc += '\n' ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 656 "cpp.l"
{ current->doc += *yytext ; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 657 "cpp.l"
{ current->doc += yytext ; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 658 "cpp.l"
{ current->doc += yytext ; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 659 "cpp.l"
{ BEGIN( FindMembers ) ; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 661 "cpp.l"
{ 
					  lineCount() ;
					  current->file = yyFileName ;
					  if( current->lineNo == 0 ) current->lineNo = yyLineNr;
					  current->startLine = yyLineNr ;
					  BEGIN( SubDoc ) ;
					}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 668 "cpp.l"
{ 
					  current->program += yytext ;
					  BEGIN( SubDocComment ) ;
					}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 672 "cpp.l"
{ 
					  current->program += yytext ;
					  BEGIN( SubDocCppComment ) ;
					}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 676 "cpp.l"
{ current->program += *yytext ; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 677 "cpp.l"
{ 
					  current->program += *yytext ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 681 "cpp.l"
{ 
					  lineCount() ;
					  current->program += yytext ;
					  ++bracketCount ;
					}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 686 "cpp.l"
{ 
					  lineCount() ;
					  if( bracketCount > 0 )
					  {
					    current->program += yytext ;
					    --bracketCount ;
					  }
					  else
					  {
					    msg( "found explicit subentry" ) ;
					              current->lineNo = yyLineNr;
					    current_root->addSubEntry( current ) ;
					    current = new Entry ;
					    current->protection = protection ;
					    BEGIN( FindMembers ) ;
					  }
					}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 704 "cpp.l"
{ current->program += yytext ; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 705 "cpp.l"
{ current->program += yytext ; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 706 "cpp.l"
{ current->program += yytext ; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 707 "cpp.l"
{ 
					  current->program += yytext ;
					  ++yyLineNr ;
					}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 711 "cpp.l"
{ 
					  current->program += yytext ;
					  BEGIN( SubDoc ) ;
					}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 716 "cpp.l"
{ current->program += yytext ; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 717 "cpp.l"
{ 
					  current->program += yytext ;
					  ++yyLineNr ;
					  BEGIN( SubDoc ) ;
					}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 723 "cpp.l"
{ 
					  current->memo += yytext ;
					  current->doc  += yytext ; 
					}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 727 "cpp.l"
{ 
					  BEGIN( CppDoc ) ;
                      			  lineCount();
					  current->doc  += yytext ; 
					}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 732 "cpp.l"
{ 
					  current->doc  += *yytext ; 
	                  		  lineCount();
					}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 736 "cpp.l"
{ current->memo += yytext ; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 737 "cpp.l"
{ current->doc  += yytext ; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 739 "cpp.l"
{
					  current->see.append( new McString ) ;
					  BEGIN( See ) ;
					}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 743 "cpp.l"
{
					  BEGIN( Author ) ; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 745 "cpp.l"
{
					  BEGIN( Version ) ; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 747 "cpp.l"
{
					  current->param.append( new McString  ) ;
					  BEGIN( Param ) ;
					}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 751 "cpp.l"
{
					  current->exception.append( new McString ) ;
					  BEGIN( Exception ) ;
					}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 755 "cpp.l"
{
					  BEGIN( Return ) ; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 757 "cpp.l"
{
					  current->name.clear() ;
					  current->section = MANUAL_SEC ;
					  BEGIN( Name ) ;
					}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 762 "cpp.l"
{
					  current->memo.clear() ;
					  BEGIN( Memo ) ;
					}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 767 "cpp.l"
{
					  current->type.clear() ;
					  BEGIN( Type ) ;
					}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 771 "cpp.l"
{
					  current->args.clear() ;
					  BEGIN( Args ) ;
					}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 776 "cpp.l"
{ current->name = yytext ; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 777 "cpp.l"
{ BEGIN( CppDoc ) ; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 779 "cpp.l"
{ current->type = yytext ; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 780 "cpp.l"
{ BEGIN( CppDoc ) ; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 782 "cpp.l"
{ current->args = yytext ; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 783 "cpp.l"
{ BEGIN( CppDoc ) ; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 785 "cpp.l"
{ current->author += *yytext ; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 786 "cpp.l"
{ current->version += *yytext ; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 787 "cpp.l"
{ *(current->see.last()) += *yytext ; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 788 "cpp.l"
{ *(current->param.last()) += *yytext ; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 789 "cpp.l"
{ *(current->exception.last()) += *yytext ; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 790 "cpp.l"
{ current->memo += *yytext ; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 791 "cpp.l"
{ current->retrn += *yytext ; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 793 "cpp.l"
{ current->author  += '\n' ; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 794 "cpp.l"
{ current->version += '\n' ; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 795 "cpp.l"
{ *(current->see.last()) += '\n' ; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 796 "cpp.l"
{ *(current->param.last()) += '\n' ; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 797 "cpp.l"
{ *(current->exception.last()) += '\n' ; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 798 "cpp.l"
{ current->memo += *yytext ; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 799 "cpp.l"
{ current->retrn += *yytext ; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 801 "cpp.l"

	YY_BREAK
case 142:
YY_RULE_SETUP
#line 802 "cpp.l"
{ yyLineNr++ ; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 803 "cpp.l"
{ 
					  lastCContext = YY_START ;
					  BEGIN( SkipComment ) ;
					}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 807 "cpp.l"

	YY_BREAK
case 145:
YY_RULE_SETUP
#line 808 "cpp.l"
{ BEGIN( lastCContext ) ; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 809 "cpp.l"
{ 
					  lastCContext = YY_START ;
					  BEGIN( SkipCxxComment ) ;
					}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 813 "cpp.l"
{ 
					  yyLineNr++ ;
					  BEGIN( lastCContext ) ;
					}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 817 "cpp.l"
ECHO;
	YY_BREAK
#line 2941 "lex.cpp.c"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Cxx_Memo):
			case YY_STATE_EOF(SubDoc):
			case YY_STATE_EOF(SubDocComment):
			case YY_STATE_EOF(SubDocCppComment):
			case YY_STATE_EOF(Doc):
			case YY_STATE_EOF(VerbDoc):
			case YY_STATE_EOF(Define):
			case YY_STATE_EOF(DefineEnd):
			case YY_STATE_EOF(DefineEnded):
			case YY_STATE_EOF(ClassName):
			case YY_STATE_EOF(TypedefName):
			case YY_STATE_EOF(Bases):
			case YY_STATE_EOF(NextSemi):
			case YY_STATE_EOF(FindMembers):
			case YY_STATE_EOF(Function):
			case YY_STATE_EOF(Operator):
			case YY_STATE_EOF(Throws):
			case YY_STATE_EOF(Array):
			case YY_STATE_EOF(Round):
			case YY_STATE_EOF(Curly):
			case YY_STATE_EOF(SkipCurly):
			case YY_STATE_EOF(SkipInits):
			case YY_STATE_EOF(SkipCPP):
			case YY_STATE_EOF(Sharp):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(SkipComment):
			case YY_STATE_EOF(SkipCxxComment):
			case YY_STATE_EOF(CppDoc):
			case YY_STATE_EOF(CppMemo):
			case YY_STATE_EOF(See):
			case YY_STATE_EOF(Args):
			case YY_STATE_EOF(Type):
			case YY_STATE_EOF(Author):
			case YY_STATE_EOF(Name):
			case YY_STATE_EOF(Version):
			case YY_STATE_EOF(Param):
			case YY_STATE_EOF(Memo):
			case YY_STATE_EOF(Return):
			case YY_STATE_EOF(Exception):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 815 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 815 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 814);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 817 "cpp.l"



/*@ ----------------------------------------------------------------------------
 */
void parseDoc(Entry* rt)
{
	if( rt->doc.length() )
	{
		Entry* _current = current ;
		rt->program = rt->doc ;
		rt->doc.clear() ;
		inputString   = rt->program ;
		inputPosition = 0 ;
		current = rt ;
		cpprestart( cppin ) ;
		if( rt->memo.length() > 0 )
			BEGIN( CppDoc ) ;
		else
			BEGIN( CppMemo ) ;
		cpplex() ;
		rt->program.clear() ;
		if( rt->memo.length()+2 >= rt->doc.length() )
			rt->doc.clear() ;
		current = _current ;
	}
}

void callcpplex()
{
	cpplex() ;
	if( (current->name.length()  ||  current->program.length()  ||
		current->memo.length()  ||  current->doc.length() )
		&&  current->done == onlyDocs )
	{
		if( current->section == EMPTY_SEC )
			current->section = VARIABLE_SEC ;
		current_root->addSubEntry( current ) ;
		current = new Entry ;
		current->protection = protection ;
	}
}

void parseCppClasses(Entry* rt)
{
    if( rt == 0 ) return ;
    for( Entry *cr = rt->sub ; cr ; cr = cr->next )
    {
		if( cr->program.length() > 0 )
		{
#ifdef _DEBUG
			if (verb)
				printf("Scanning substuff of (%s) %s\n",
				   (const char *)cr->type,
				   (const char *)cr->name);
#endif
			inputString   = cr->program ;
			inputPosition = 0 ;
			cpprestart( cppin ) ;
			BEGIN( FindMembers ) ;
			current_root = cr ;
			strcpy( yyFileName, cr->file ) ;
			yyLineNr = cr->startLine ;
			current->type.clear() ;
			current->name.clear() ;
			current->args.clear() ;
			current->section = EMPTY_SEC ;
			if( cr->section == CLASS_SEC )
				current->protection = protection = PRIV ;
			else if( cr->section == STRUCT_SEC )
				current->protection = protection = PUBL ;
			else if( cr->section == UNION_SEC )
				current->protection = protection = PUBL ;
			else
				current->protection = protection = GLOB ;
			callcpplex() ;
			cr->program.clear() ;
		}
		parseCppClasses( cr ) ;
    }
    parseDoc( rt ) ;
}

void parseCpp(Entry* rt)
{
	current_root  = rt ;
	global_root   = rt ;
	protection    = GLOB ;
	current       = new Entry ;
	yyLineNr      = 1 ;
	yyFileName[0] = '\0' ;
	bracketCount  = 0 ;
	sharpCount    = 0 ;
	lastTContext  = 0 ;

	inputString   = rt->program ;
	inputPosition = 0 ;
	cpprestart( cppin ) ;
	BEGIN( FindMembers ) ;
	callcpplex() ;
	rt->program.clear() ;
	parseCppClasses( rt ) ;

	delete current;
}

extern "C" {
	int	cppwrap()	{ return 1 ; }
};
