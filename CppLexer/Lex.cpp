#define yy_create_buffer cpp_create_buffer
#define yy_delete_buffer cpp_delete_buffer
#define yy_scan_buffer cpp_scan_buffer
#define yy_scan_string cpp_scan_string
#define yy_scan_bytes cpp_scan_bytes
#define yy_flex_debug cpp_flex_debug
#define yy_init_buffer cpp_init_buffer
#define yy_flush_buffer cpp_flush_buffer
#define yy_load_buffer_state cpp_load_buffer_state
#define yy_switch_to_buffer cpp_switch_to_buffer
#define yyin cppin
#define yyleng cppleng
#define yylex cpplex
#define yyout cppout
#define yyrestart cpprestart
#define yytext cpptext
#define yywrap cppwrap

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

typedef int FILE; //#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplusx
#define __cplusplusx
#endif
#endif


#ifdef __cplusplus

//#include <stdlib.h>
//#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
//#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 144
#define YY_END_OF_BUFFER 145
static yyconst short int yy_acclist[936] =
    {   0,
       73,   73,   16,   16,   39,   39,  121,  121,  119,  119,
      117,  117,  145,  137,  144,  137,  144,  138,  144,  137,
      144,   73,  137,  144,   73,  137,  144,   74,  138,  144,
       73,  137,  144,   91,  137,  144,   91,  137,  144,   92,
      138,  144,   91,  137,  144,   97,  137,  144,   97,  137,
      144,   98,  138,  144,   97,  137,  144,   97,  137,  144,
      100,  137,  144,  100,  137,  144,  101,  138,  144,  100,
      137,  144,   84,  137,  144,   84,  137,  144,   83,  138,
      144,   84,  137,  144,   84,  137,  144,   84,  137,  144,
       81,  138,  144,   84,  137,  144,   24,  137,  144,   25,

      137,  144,   28,  138,  144,  137,  144,  137,  144,  137,
      144,   62,  137,  144,   63,  137,  144,   61,  137,  144,
       64,  137,  144,   70,  137,  144,   71,  137,  144,  137,
      144,   65,  137,  144,   66,  137,  144,    2,  137,  144,
      137,  144,  138,  144,  137,  144,   29,  137,  144,   48,
      137,  144,   30,  137,  144,   17,  137,  144,  137,  144,
       35,  137,  144,   31,  137,  144,   17,  137,  144,   17,
      137,  144,   17,  137,  144,   17,  137,  144,   17,  137,
      144,   17,  137,  144,   17,  137,  144,  137,  144,   18,
      137,  144,  137,  144,   56,  137,  144,   57,  137,  144,

      137,  144,  137,  144,   16,  137,  144,   16,  137,  144,
       16,  138,  144,   16,  137,  144,   34,  137,  144,   34,
      137,  144,   34,  137,  144,   33,   34,  137,  144,   32,
       34,  137,  144,   53,  137,  144,   53,  137,  144,   52,
       53,  137,  144,   52,  138,  144,   49,   53,  137,  144,
       50,   53,  137,  144,   51,   53,  137,  144,   53,  137,
      144,   39,   47,  137,  144,   39,   47,  137,  144,   46,
      138,  144,   47,  137,  144,   47,  137,  144,   44,   47,
      137,  144,   45,   47,  137,  144,   59,  137,  144,   60,
      137,  144,   58,  137,  144,   19,  137,  144,   19,  137,

      144,   22,  138,  144,   19,  137,  144,   19,  137,  144,
       38,  137,  144,   38,  137,  144,   38,  137,  144,   37,
       38,  137,  144,   36,   38,  137,  144,   68,  137,  144,
       68,  137,  144,   67,  138,  144,   68,  137,  144,   68,
      137,  144,  137,  144,  137,  144,  137,  144,  137,  144,
      137,  144,  138,  143,  144,  137,  144,  104,  137,  144,
      104,  137,  144,  104,  138,  144,  104,  137,  144,  104,
      137,  144,  102,  137,  144,  102,  137,  144,  102,  138,
      144,  103,  137,  144,  102,  137,  144,  102,  137,  144,
      125,  137,  144,  125,  137,  144,  132,  138,  144,  125,

      137,  144,  125,  137,  144,  121,  137,  144,  121,  137,
      144,  122,  138,  144,  121,  137,  144,  121,  137,  144,
      119,  137,  144,  119,  137,  144,  120,  138,  144,  119,
      137,  144,  119,  137,  144,  123,  137,  144,  123,  137,
      144,  130,  138,  144,  123,  137,  144,  123,  137,  144,
      117,  137,  144,  117,  137,  144,  118,  138,  144,  117,
      137,  144,  124,  137,  144,  124,  137,  144,  131,  138,
      144,  124,  137,  144,  124,  137,  144,  126,  137,  144,
      126,  137,  144,  133,  138,  144,  126,  137,  144,  126,
      137,  144,  128,  137,  144,  128,  137,  144,  135,  138,

      144,  128,  137,  144,  128,  137,  144,  129,  137,  144,
      129,  137,  144,  136,  138,  144,  129,  137,  144,  129,
      137,  144,  127,  137,  144,  127,  137,  144,  134,  138,
      144,  127,  137,  144,  127,  137,  144,    1,  139,  142,
       73,   73,    1,   73,   73,  139,   73,  142,   89,  139,
       90,  142,   99,   95,  139,   96,  142,   83,   83,   87,
       86,  139,   85,  142,   24,   26,   27,   63,   64,   62,
       63,   64,   70,   71,   65,   29,   17,  139,  142,   17,
       17,   17,   17,   17,   17,   17,   17,   18,   16,   16,
        1,   16,   16,  139,   16,  142,   52,   51,   51,   39,

       39,    1,   39,   42,  139,   40,  142,   20,  142,   21,
        1,   69,  139,  142,  141,  140,  142,  143,    1,  143,
      139,  142,  106,  139,  106,  142,  103,  105,  139,  105,
      142,  132,  121,  121,    1,  121,  121,  139,  121,  142,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  119,
      119,    1,  119,  119,  139,  119,  142,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  130,  117,  117,    1,
      117,  117,  139,  117,  142,  131,  133,  135,  136,  134,
       83,   79,   78,   75,16456,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   41,   42,   43,   42,   40,   69,

      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
       78,   77,   76, 8264, 8264,   75,   17,   17,   17,   17,
       17,   17,   17,   17,   17,  107,  121,  121,  121,  121,
      121,  121,  121,  107,  121,  121,  121,  119,  119,  119,
      119,  119,  119,  119,  107,  119,  119,  119,   93,   94,
     8264,   88,   17,   13,   17,   17,   17,   17,   17,   17,
       17,   54,  116,  114,  113,  107,  115,  116,  121,  121,
      121,  114,  121,  113,  121,  121,  121,  107,  121,  115,
      121,  121,  116,  119,  119,  119,  114,  119,  113,  119,

      119,  119,  107,  119,  115,  119,  119,   11,   17,   17,
       17,   17,   17,   17,   14,   54,   55,  116,  114,  113,
      110,  115,  116,  121,  121,  121,  114,  121,  113,  121,
      110,  121,  121,  115,  121,  121,  116,  119,  119,  119,
      114,  119,  113,  119,  110,  119,  119,  115,  119,  119,
       17,   17,   17,    3,   17,   12,   17,  108,  110,  112,
      108,  121,  121,  110,  121,  112,  121,  121,  108,  119,
      119,  110,  119,  112,  119,  119,    3,   17,    5,   17,
       17,    3,   23,  108,  112,  109,  108,  121,  121,  112,
      121,  109,  121,  108,  119,  119,  112,  119,  109,  119,

        5,   15,   15,   17,    5,   17,  109,  121,  109,  121,
      119,  109,  119,    4,   17,  111,  111,  121,  111,  119,
        4,    4,  111,  111,  121,  111,  119,    9,   82,    6,
       10,    7,    8,   80,    8
    } ;

static yyconst short int yy_accept[780] =
    {   0,
        1,    1,    1,    2,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    4,    5,    5,    5,    5,    5,    5,
        5,    6,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    8,    9,   10,   11,   11,   11,   12,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   14,   16,   18,   20,   22,   25,   28,   31,   34,
       37,   40,   43,   46,   49,   52,   55,   58,   61,   64,

       67,   70,   73,   76,   79,   82,   85,   88,   91,   94,
       97,  100,  103,  106,  108,  110,  112,  115,  118,  121,
      124,  127,  130,  132,  135,  138,  141,  143,  145,  147,
      150,  153,  156,  159,  161,  164,  167,  170,  173,  176,
      179,  182,  185,  188,  190,  193,  195,  198,  201,  203,
      205,  208,  211,  214,  217,  220,  223,  226,  230,  234,
      237,  240,  244,  247,  251,  255,  259,  262,  266,  270,
      273,  276,  279,  283,  287,  290,  293,  296,  299,  302,
      305,  308,  311,  314,  317,  320,  324,  328,  331,  334,
      337,  340,  343,  345,  347,  349,  351,  353,  356,  358,

      361,  364,  367,  370,  373,  376,  379,  382,  385,  388,
      391,  394,  397,  400,  403,  406,  409,  412,  415,  418,
      421,  424,  427,  430,  433,  436,  439,  442,  445,  448,
      451,  454,  457,  460,  463,  466,  469,  472,  475,  478,
      481,  484,  487,  490,  493,  496,  499,  502,  505,  508,
      511,  514,  517,  520,  523,  526,  529,  532,  535,  538,
      538,  539,  540,  541,  542,  543,  545,  547,  549,  551,
      553,  554,  556,  558,  559,  560,  561,  563,  565,  565,
      565,  565,  565,  566,  566,  567,  568,  568,  569,  570,
      571,  572,  573,  574,  575,  575,  576,  576,  576,  576,

      576,  576,  576,  576,  576,  576,  577,  578,  579,  580,
      581,  582,  583,  584,  585,  586,  587,  588,  588,  589,
      589,  589,  589,  589,  589,  589,  589,  590,  591,  593,
      595,  597,  598,  599,  600,  601,  602,  604,  604,  604,
      606,  608,  610,  611,  611,  611,  611,  612,  612,  613,
      614,  615,  615,  615,  616,  618,  618,  619,  619,  620,
      621,  622,  623,  625,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  628,  630,  632,  633,  634,  635,
      637,  639,  641,  642,  643,  644,  645,  646,  647,  648,
      649,  650,  651,  652,  654,  656,  658,  659,  660,  661,

      662,  663,  664,  665,  666,  667,  668,  669,  670,  672,
      674,  676,  677,  678,  679,  680,  681,  681,  681,  682,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  684,  684,  685,  686,  686,  687,  688,  689,
      690,  691,  692,  693,  694,  695,  695,  695,  695,  696,
      697,  698,  699,  700,  701,  701,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  702,  703,  704,  705,  706,
      707,  708,  709,  710,  711,  712,  713,  714,  715,  716,
      717,  718,  719,  720,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  722,

      723,  724,  724,  725,  727,  727,  727,  728,  729,  730,
      731,  732,  733,  734,  735,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  737,  737,  737,  738,
      739,  740,  741,  742,  743,  744,  746,  747,  748,  749,
      750,  751,  752,  753,  754,  755,  757,  758,  759,  759,
      759,  759,  759,  759,  760,  760,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      762,  762,  763,  764,  765,  766,  767,  768,  769,  770,
      771,  772,  772,  773,  773,  774,  774,  774,  775,  776,
      776,  776,  777,  778,  778,  780,  781,  782,  784,  786,

      787,  788,  790,  792,  793,  795,  796,  797,  799,  801,
      802,  803,  805,  807,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  809,  810,  811,  812,  813,  814,
      815,  816,  816,  817,  817,  818,  819,  819,  819,  820,
      821,  822,  822,  823,  823,  825,  826,  827,  829,  831,
      833,  834,  836,  837,  839,  840,  841,  843,  845,  847,
      848,  850,  851,  851,  851,  851,  851,  851,  851,  851,
      852,  853,  854,  856,  857,  858,  858,  859,  859,  860,
      861,  861,  863,  864,  866,  868,  869,  871,  872,  874,
      876,  877,  877,  877,  877,  877,  878,  878,  879,  881,

      882,  883,  883,  884,  885,  885,  886,  887,  889,  890,
      892,  894,  896,  897,  899,  901,  901,  901,  902,  902,
      903,  905,  906,  907,  907,  907,  907,  907,  907,  908,
      909,  911,  912,  914,  914,  914,  914,  916,  916,  916,
      916,  916,  917,  919,  921,  921,  921,  922,  923,  923,
      923,  923,  923,  924,  926,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  929,  929,  929,  929,  930,
      931,  931,  932,  932,  933,  934,  935,  936,  936
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    3,    4,
        1,    1,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    1,    6,    7,    1,    1,    8,    1,    9,
       10,   11,    1,   12,    1,   13,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,   17,   18,
       19,   20,    1,   21,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       22,   23,   24,    1,   15,    1,   25,   26,   27,   28,

       29,   30,   31,   32,   33,   15,   15,   34,   35,   36,
       37,   38,   15,   39,   40,   41,   42,   43,   44,   45,
       46,   15,   47,    1,   48,   49,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[50] =
    {   0,
        1,    1,    1,    2,    1,    3,    1,    4,    5,    1,
        6,    1,    7,    8,    9,   10,    1,   11,    1,   11,
        1,    4,    1,    4,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    8,    8,   12
    } ;

static yyconst short int yy_base[837] =
    {   0,
        0,    1,    4,    5,    8,    9,   22,   23,   26,   27,
       40,   41,   45,   46,   69,    0,  117,  120,  123,  128,
      151,    0,  200,    0,  249,    0,  297,  298,  315,   13,
      363,    0,  367,  380,  131,  134,  371,  384,  409,  422,
      395,  401,  426,  431,  437,  442,  448,  453,  468,  473,
      481,  492,  496,  509,  500,  513,  514,  517,  520,  528,
      533,  541,  542,  546,  549,  550,  555,  564,  568,  572,
      573,  577,  586,  590,  591,  595,  599,  604,  608,  613,
     2188, 2189, 2185, 2189,   21,    0,   63, 2189,   47, 2189,
     2184, 2189,  130, 2189, 2183, 2189, 2170,  136, 2189, 2181,

     2189,  292, 2189, 2180,   35, 2167,  293, 2154,  302, 2150,
        0, 2189, 2189, 2168, 2173,  375,    0, 2173, 2189, 2172,
        0,  375,  413,    0, 2189, 2189,  632,  616,  628,  409,
     2189, 2189,    0,  447, 2189, 2189, 2140, 2137, 2134,  424,
     2130, 2124, 2133,   14,  426,  498, 2189, 2189, 2131, 2135,
        0,  488,    0,  454, 2189, 2164,  494, 2189, 2189, 2189,
     2163,  635,  640, 2189, 2189,  645,  515,    0,  649, 2189,
     2140,  547, 2189, 2189, 2189, 2189, 2189, 2189, 2161, 2189,
      569, 2158, 2189, 2159,  612, 2189, 2189, 2149,  654, 2189,
      643,  653,  562, 2145,  655, 2154,  366, 2189,  664, 2189,

     2155, 2189,  665,  673, 2189, 2154, 2189,  677,  672,    0,
     2189, 2153,  684,  679,    0,    0,  398, 2189,  680,  692,
        0,  658, 2189,  681,  711, 2189, 2152,  696,  692,    0,
        0,  703, 2189,  704, 2189, 2151,  719,  715,    0, 2189,
     2150,  734,  730,    0, 2189, 2149,  752,  731,    0, 2189,
     2148,  755,  750,    0, 2189, 2147,  762,  757,    0, 2146,
     2189, 2189, 2189,    0,  768,    0,    0,    0, 2126, 2125,
     2189, 2189, 2189,  674,  766, 2189, 2189, 2189, 2116,  770,
      764, 2108,    0, 2133, 2189, 2189,  760, 2139, 2138,    0,
     2137, 2136,    0,  447,  434,    0,    0,  779,  774, 2104,

     2101,  747, 2095, 2089, 2098,  779,    0,  128,  787, 2108,
     2090, 2102,   29, 2104, 2090, 2090, 2094,  533,  586,  771,
     2097,  707, 2088, 2092, 2087, 2083,    0,  793,    0,    0,
        0,  793,  806,  809,    0,  813,    0, 2097,  578,  817,
        0, 2189, 2189, 2109,  789,  814, 2108,  820, 2107,  812,
     2106,  826, 2102, 2189, 2189, 2111, 2189,  790, 2110, 2111,
     2108, 2107, 2189, 2189,  791, 2065, 2080, 2083, 2082, 2077,
     2076, 2058, 2074,  835, 2189, 2189,  838,    0,  802,    0,
        0,    0,  793, 2057, 2072, 2075, 2074, 2069, 2068, 2050,
     2066,    0,  842,    0,    0,    0,  806, 2049, 2064, 2067,

     2066, 2061, 2060, 2042, 2058,  846,    0,  850,    0,    0,
        0,  852,  859,  862,  865,  868,  581,  672, 2083, 2189,
     2054, 2056, 2072,  739, 2057, 2039,  841, 2054, 2040, 2040,
     2044,  872, 2029, 2189,  873, 2028, 2034, 2038, 2033, 2028,
     2029, 2035, 2026, 2038, 2029, 2035, 2024, 2026, 2189,  855,
     2189,  877,    0,  880, 2031, 2020, 2033, 2024, 2023, 2018,
     2015, 2026, 2016, 2014, 2021, 2010, 2023, 2014, 2013, 2008,
     2005, 2016, 2006, 2004, 2011, 2000, 2013, 2004, 2003, 1998,
     1995, 2006, 1996, 1994, 2021, 2020, 2026, 2025, 1995, 1980,
     1986, 1990, 1981, 1982, 1988, 1979, 1991, 1982, 2015,  865,

     2189, 2006, 2013, 2012,  881, 2010, 1973,  889, 1987, 1986,
     1981, 1976, 1981, 1979, 1970, 1972, 1963, 1959, 1962, 1969,
     1971, 1962, 1969, 1972, 1954,  893, 1966, 1954, 1953, 1960,
     1962, 1953, 1960, 1963, 1945,  896, 1957, 1945, 1944, 1951,
     1953, 1944, 1951, 1954, 1936,  899, 1948, 1936, 1964,  894,
     1963,  895, 1969, 2189, 1968, 2189, 1935, 1927, 1929,  907,
     1943, 1938, 1933, 1938, 1936, 1927,  902, 1951,  903, 1958,
     1956, 2189,  915,  918, 1918, 1917, 1930, 1929, 1914, 1925,
      921, 1917,  924,  927,  930, 1915, 1913,  934, 1947, 1914,
     1909,  937,  940, 1914,  943, 1909, 1907,  946, 1941, 1908,

     1903,  949,  952, 1908,  955, 1903, 1901,  958, 1935, 1902,
     1803,  961,  964, 1785, 1747, 1741,  967, 1681, 1684, 1683,
     1651, 1658,  970,  973, 1649, 1636, 1618, 1640,  976, 1623,
      979, 1622,  982,  985, 2189,  988, 1608, 1605,  992, 1641,
      995, 1605,  998, 1603, 1001, 1599, 1581, 1004, 1595, 1007,
     1235, 1010, 1233, 1013, 1230, 1227, 1016, 1264, 1019, 1229,
     1022, 1227, 1220, 1223, 1232, 1219, 1243, 1025, 1228, 1218,
     1240, 1226, 1028, 1031, 1034, 1251, 1037, 1220, 1040, 1043,
     1216, 1046, 1218, 1049, 1052, 1214, 1055, 1216, 1058, 1061,
     1212, 1218, 1220, 1229, 1215, 1064, 1067, 1072, 1119, 1215,

     1122, 1125, 1239, 1128, 1204, 1131, 1134, 1137, 1203, 1140,
     1143, 1146, 1202, 1152, 1155, 1199, 1212, 1158, 1138, 2189,
        0, 1165, 1148, 1119,  879,  866,  854,  853, 1168,  817,
     1171,  811, 1174,  810,  738,  746, 1177,  700,  662,  645,
      638, 1180, 1183, 1186,  616,  591, 1189, 1192,  567,  561,
      467,  443, 1195, 1198, 1201,  428,  418,  407, 1204,  411,
      360,  350,  326, 1207, 1210,  267, 1213,   93, 2189, 1216,
     1219, 1222,    5, 1225, 1228, 2189, 1231, 2189, 1272, 1284,
     1296, 1308, 1320, 1332, 1344, 1356, 1368, 1380, 1392, 1404,
     1416, 1428, 1440, 1452, 1464, 1476, 1488, 1500, 1512, 1524,

     1536, 1548, 1560, 1572, 1584, 1596, 1608, 1614, 1624, 1633,
     1639, 1643, 1648, 1660, 1672, 1684, 1696, 1708, 1720, 1732,
     1744, 1756, 1768, 1780, 1792, 1804, 1816, 1828, 1840, 1852,
     1864, 1876, 1888, 1900, 1912, 1924
    } ;

static yyconst short int yy_def[837] =
    {   0,
      779,  779,  780,  780,  781,  781,  782,  782,  783,  783,
      784,  784,  784,  784,  778,   15,  779,  779,  779,  779,
      778,   21,  778,   23,  778,   25,  779,  779,  778,   29,
      779,   31,  785,  785,  779,  779,  786,  786,  787,  787,
      788,  788,  779,  779,  779,  779,  789,  789,  790,  790,
      791,  791,  779,  779,  792,  792,  793,  793,  794,  794,
      795,  795,  796,  796,  797,  797,  798,  798,  799,  799,
      800,  800,  801,  801,  802,  802,  803,  803,  804,  804,
      778,  778,  805,  778,  778,  806,  807,  778,  806,  778,
      805,  778,  778,  778,  805,  778,  778,  778,  778,  805,

      778,  778,  778,  805,  778,  778,  778,  778,  778,  778,
      808,  778,  778,  809,  778,  778,  810,  778,  778,  778,
      811,  778,  778,  812,  778,  778,  778,  778,  778,  778,
      778,  778,  813,  778,  778,  778,  813,  813,  813,  813,
      813,  813,  813,  127,  778,  778,  778,  778,  778,  778,
      814,  815,  814,  814,  778,  805,  778,  778,  778,  778,
      805,  778,  778,  778,  778,  778,  778,  816,  817,  778,
      818,  778,  778,  778,  778,  778,  778,  778,  805,  778,
      778,  778,  778,  805,  778,  778,  778,  819,  820,  778,
      819,  819,  778,  778,  778,  821,  822,  778,  821,  778,

      805,  778,  778,  778,  778,  805,  778,  778,  778,  204,
      778,  805,  778,  778,  204,  823,  824,  778,  823,  823,
      825,  826,  778,  825,  825,  778,  805,  778,  778,  204,
      827,  828,  778,  827,  778,  805,  778,  778,  204,  778,
      805,  778,  778,  204,  778,  805,  778,  778,  204,  778,
      805,  778,  778,  204,  778,  805,  778,  778,  204,  805,
      778,  778,  778,  806,  807,  806,  806,  806,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  808,  809,  778,  778,  778,  778,  778,  810,
      778,  778,  811,  778,  778,  812,  127,  778,  778,  778,

      778,  778,  778,  778,  778,  778,  813,  778,  778,  813,
      813,  813,  813,  813,  813,  813,  813,  127,  778,  778,
      778,  778,  778,  778,  778,  778,  814,  815,  814,  814,
      814,  778,  778,  778,  816,  817,  816,  818,  818,  778,
      829,  778,  778,  819,  819,  820,  819,  820,  819,  819,
      819,  778,  778,  778,  778,  821,  778,  822,  821,  805,
      821,  821,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  823,  824,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  825,  826,  825,  825,  825,  825,  825,  825,  825,

      825,  825,  825,  825,  825,  778,  827,  828,  827,  827,
      827,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  830,  778,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  778,  778,  778,  778,  778,
      778,  778,  829,  820,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  831,  832,  833,  834,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,

      778,  835,  778,  778,  778,  836,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  831,  778,
      832,  778,  833,  778,  834,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  835,  778,  778,
      836,  778,  813,  778,  813,  813,  813,  813,  813,  813,
      813,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  823,  823,  823,  823,  823,  823,

      823,  823,  823,  823,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  813,  813,  813,  813,  813,  813,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  778,  778,  778,  778,  778,  778,  778,  813,
      813,  813,  813,  778,  813,  778,  778,  778,  778,  778,
      778,  823,  823,  823,  823,  823,  825,  825,  825,  825,
      825,  778,  778,  778,  778,  778,  778,  778,  813,  813,

      778,  778,  778,  778,  778,  778,  778,  823,  823,  823,
      823,  825,  825,  825,  825,  778,  778,  778,  778,  778,
      813,  778,  813,  778,  778,  778,  778,  778,  778,  823,
      823,  825,  825,  778,  778,  778,  813,  778,  778,  778,
      778,  778,  823,  825,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  823,  825,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,    0,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,

      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778
    } ;

static yyconst short int yy_nxt[2239] =
    {   0,
      778,   83,   83,   84,   84,   87,   87,   88,   88,   91,
       91,   92,   92,   85,   85,  144,  318,   89,   89,  145,
      319,   93,   93,   95,   95,   96,   96,  100,  100,  101,
      101,  262,   97,   97,  263,   98,   98,  274,  778,  102,
      102,  104,  104,  105,  105,  275,  104,  104,  109,  109,
      106,  106,  776,  107,  107,  106,  106,  267,  107,  107,
      268,  440,  108,  108,  266,  441,  260,  110,  110,   82,
       83,   82,   84,   82,   82,   82,   82,   82,   82,   82,
       82,  111,   85,  111,  111,   82,   82,   82,   82,   82,
       82,   82,   82,  111,  111,  111,  111,  111,  111,  111,

      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,   82,   82,   82,   83,  112,
      113,   83,  112,  113,   83,  114,  113,  773,  114,   83,
       85,  113,   83,   85,   84,   83,   85,   84,  432,  115,
      269,   85,  115,  270,   85,  115,  272,   85,  433,  273,
      115,   82,   83,  116,   84,   82,   82,   82,  117,   82,
       82,  117,   82,   82,   85,  117,  118,  119,   82,   82,
       82,   82,  117,   82,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  120,   82,   82,

       82,   83,   82,   84,   82,   82,   82,  121,   82,   82,
      121,  122,   82,   85,  121,   82,  122,   82,   82,   82,
       82,  121,   82,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,   82,   82,   82,   82,
       83,  123,   84,   82,   82,   82,   82,   82,   82,  124,
      125,  124,   85,  124,   82,  119,  124,   82,  124,   82,
       82,   82,   82,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  120,   82,   82,   83,   83,

       84,   84,  272,  277,  280,  273,  278,  771,  126,  126,
       85,   85,  281,  126,  126,   82,   83,  127,  128,  129,
       82,   82,  130,  131,   82,  130,  132,  133,  134,  133,
      133,  132,  135,  132,   82,   82,  136,   82,   82,  133,
      133,  137,  133,  138,  133,  133,  133,  133,  133,  133,
      133,  139,  140,  133,  141,  142,  143,  133,  133,  133,
      133,   82,   82,  133,   83,  146,   84,  359,  152,  360,
      153,  147,  156,  769,   84,   82,   85,  287,  148,  148,
      154,  152,  768,  153,  157,  156,  294,   84,   82,  149,
      288,  294,  158,  154,  159,  767,  169,  157,  170,  380,

      171,  260,  169,  150,  170,  158,  171,  159,  172,  148,
      161,  162,  163,  162,  172,  295,  306,  164,  165,  306,
      166,  289,  167,  161,  162,  163,  162,   83,  320,   84,
      164,  165,   83,  166,   84,  167,  295,  766,   83,   85,
       84,  173,  174,   83,   85,   84,  764,  173,  174,  179,
       85,  180,  763,  321,  179,   85,  180,  308,  294,  289,
      309,  181,  313,  294,  330,  314,  181,  331,  762,  184,
      182,   84,  175,  176,  184,  182,   84,  175,  176,  761,
      289,  185,  189,  177,  190,  186,  185,  187,  177,  329,
      186,  191,  187,  189,  192,  190,  260,   83,  193,   84,

      322,  197,  191,  198,  262,  192,  194,  263,  760,  195,
       83,  193,   84,  199,  197,  201,  198,  202,  201,  194,
      202,  206,  195,  207,  323,  262,  199,  203,  263,  206,
      203,  207,  208,  209,  212,  318,  213,  204,  324,  319,
      208,  209,  212,  217,  213,  218,  214,  217,  210,  218,
      222,  222,  223,  223,  214,  219,  227,  340,  228,  219,
      341,  215,  224,  224,  352,  227,  220,  228,  229,  232,
      225,  233,  353,  232,  236,  233,  237,  229,  236,  262,
      237,  234,  342,  449,  230,  234,  238,  241,  320,  242,
      238,  241,  246,  242,  247,  759,  246,  239,  247,  243,

      251,  339,  252,  243,  248,  251,  758,  252,  248,  256,
      244,  257,  253,  321,  256,  249,  257,  253,  298,  298,
      298,  258,  262,  757,  254,  263,  258,  485,  486,  299,
      298,  298,  298,  259,  297,  298,  298,  332,  332,  332,
      756,  299,  332,  332,  332,  299,  333,  334,  334,  334,
      337,  333,  260,  345,  260,  347,  349,  260,  300,  394,
      301,  260,  260,  350,  348,  262,  351,  357,  355,  302,
      752,  303,  304,  305,  361,  363,  274,  362,  364,  374,
      374,  374,  375,  751,  275,  376,  377,  377,  377,  262,
      381,  395,  263,  382,  396,  260,  260,  365,  406,  406,

      406,  366,  262,  750,  409,  263,  260,  367,  368,  322,
      369,  370,  371,  372,  410,  373,  383,  411,  487,  488,
      384,  412,  412,  412,  749,  262,  385,  386,  263,  387,
      388,  389,  390,  323,  391,  397,  413,  413,  413,  398,
      262,  262,  434,  263,  263,  399,  400,  324,  401,  402,
      403,  404,  435,  405,  414,  414,  414,  415,  415,  415,
      262,  747,  287,  263,  416,  416,  416,  262,  419,  266,
      263,  260,  280,  320,  281,  288,  275,  420,  746,  420,
      281,  298,  298,  298,  423,  427,  306,  424,  428,  306,
      434,  359,  299,  360,  329,  332,  332,  332,  321,  345,

      435,  260,  349,  380,  333,  260,  289,  436,  334,  334,
      334,  334,  334,  334,  337,  347,  260,  260,  260,  450,
      451,  347,  345,  260,  348,  349,  260,  452,  352,  455,
      348,  465,  456,  454,  466,  745,  353,  374,  374,  374,
      377,  377,  377,  394,  475,  260,  744,  476,  406,  406,
      406,  409,  743,  260,  412,  412,  412,  450,  451,  260,
      260,  413,  413,  413,  414,  414,  414,  415,  415,  415,
      416,  416,  416,  493,  499,  567,  504,  494,  501,  450,
      451,  347,  500,  260,  434,  501,  505,  452,  742,  741,
      348,  574,  574,  574,  505,  592,  592,  592,  602,  592,

      602,  612,  592,  612,  550,  552,  740,  554,  556,  574,
      574,  574,  567,  569,  739,  501,  572,  624,  624,  624,
      574,  574,  574,  631,  631,  631,  633,  633,  633,  634,
      634,  634,  636,  636,  636,  635,  639,  639,  639,  592,
      592,  592,  643,  643,  643,  645,  636,  645,  648,  639,
      648,  602,  592,  602,  652,  643,  652,  654,  636,  654,
      657,  639,  657,  612,  592,  612,  661,  643,  661,  624,
      624,  624,  631,  631,  631,  624,  624,  624,  674,  674,
      674,  631,  631,  631,  633,  633,  633,  634,  634,  634,
      636,  636,  636,  635,  639,  639,  639,  679,  679,  679,

      643,  643,  643,  645,  636,  645,  648,  639,  648,  684,
      679,  684,  652,  643,  652,  654,  636,  654,  657,  639,
      657,  689,  679,  689,  661,  643,  661,  674,  674,  674,
      701,  701,  701,  674,  674,  674,  702,  702,  702,  704,
      704,  704,  679,  679,  679,  706,  706,  706,  708,  704,
      708,  684,  679,  684,  710,  706,  710,  712,  704,  712,
      689,  679,  689,  714,  706,  714,  701,  701,  701,  702,
      702,  702,  720,  720,  720,  720,  720,  720,  720,  720,
      720,  720,  720,  720,  721,  720,  307,  721,  720,  720,
      720,  720,  720,  720,  720,  720,  307,  307,  307,  307,

      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  720,  720,
      721,  722,  722,  722,  701,  701,  701,  702,  702,  702,
      704,  704,  704,  706,  706,  706,  729,  729,  729,  708,
      704,  708,  710,  706,  710,  731,  729,  731,  712,  704,
      712,  724,  738,  725,  714,  706,  714,  733,  729,  733,
      722,  722,  722,  737,  726,  736,  727,  722,  722,  722,
      729,  729,  729,  731,  729,  731,  733,  729,  733,  748,
      748,  748,  753,  753,  753,  754,  753,  754,  755,  753,
      755,  748,  748,  748,  748,  748,  748,  753,  753,  753,

      754,  753,  754,  755,  753,  755,  765,  765,  765,  770,
      770,  770,  765,  765,  765,  772,  772,  772,  770,  770,
      770,  774,  774,  774,  772,  772,  772,  774,  774,  774,
      777,  777,  777,  777,  777,  777,  735,  734,  732,  730,
      728,  703,  723,  719,  718,  717,  716,  715,  713,  711,
      709,  707,  705,  703,  700,  699,  698,  697,  696,  695,
      694,  693,  692,  691,  690,  775,  658,  688,  687,  686,
      685,  775,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   90,   90,   90,   90,

       90,   90,   90,   90,   90,   90,   90,   90,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  178,  178,  178,  178,  178,  178,  178,  178,

      178,  178,  178,  178,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,

      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  264,  649,  264,  264,

      264,  264,  264,  264,  264,  264,  264,  264,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      283,  683,  283,  283,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  290,  682,  290,  681,
      680,  290,  293,  640,  293,  678,  677,  293,  296,  296,
      676,  296,  675,  296,  307,  673,  307,  307,  672,  307,
      327,  327,  327,  327,  671,  327,  327,  327,  327,  327,
      327,  327,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  335,  670,  669,  335,  335,  335,
      335,  668,  335,  335,  335,  335,  336,  336,  336,  336,

      336,  336,  336,  336,  336,  336,  336,  336,  338,  667,
      666,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      344,  665,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  378,  664,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  392,  663,  392,  392,  392,  392,  392,  392,

      392,  392,  392,  392,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  407,  662,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      453,  660,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,

      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  659,  658,  656,  655,
      653,  651,  650,  649,  647,  646,  644,  642,  641,  640,
      638,  637,  632,  630,  629,  628,  627,  626,  625,  572,
      570,  569,  623,  622,  621,  620,  619,  618,  617,  616,
      615,  556,  554,  552,  550,  614,  613,  611,  610,  609,
      608,  607,  606,  605,  604,  603,  601,  600,  599,  598,
      597,  596,  595,  594,  593,  591,  590,  589,  588,  587,

      586,  585,  584,  583,  582,  581,  580,  579,  578,  577,
      576,  575,  573,  572,  570,  570,  569,  499,  566,  565,
      564,  563,  562,  561,  560,  559,  558,  557,  556,  554,
      552,  550,  548,  547,  546,  545,  544,  543,  542,  541,
      540,  539,  538,  537,  536,  535,  534,  533,  532,  531,
      530,  529,  528,  527,  526,  525,  524,  523,  522,  521,
      520,  519,  518,  517,  516,  515,  514,  513,  512,  511,
      510,  509,  508,  507,  506,  502,  498,  497,  496,  495,
      492,  491,  432,  490,  489,  419,  484,  483,  482,  481,
      480,  479,  478,  477,  474,  473,  472,  471,  470,  469,

      468,  467,  464,  463,  462,  461,  460,  459,  458,  457,
      357,  357,  261,  357,  357,  354,  345,  345,  345,  345,
      339,  448,  447,  326,  325,  446,  445,  444,  443,  442,
      439,  438,  437,  431,  430,  429,  426,  425,  292,  291,
      292,  291,  285,  422,  421,  418,  417,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  357,  354,  345,
      261,  343,  261,  339,  261,  261,  326,  325,  317,  316,
      315,  312,  311,  310,  292,  291,  286,  285,  282,  279,
      276,  261,  261,  271,  261,  261,  261,  778,   81,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,

      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778
    } ;

static yyconst short int yy_chk[2239] =
    {   0,
        0,    1,    2,    1,    2,    3,    4,    3,    4,    5,
        6,    5,    6,    1,    2,   30,  144,    3,    4,   30,
      144,    5,    6,    7,    8,    7,    8,    9,   10,    9,
       10,   85,    7,    8,   85,    7,    8,  105,    0,    9,
       10,   11,   12,   11,   12,  105,   13,   14,   13,   14,
       11,   12,  773,   11,   12,   13,   14,   89,   13,   14,
       89,  313,   11,   12,   87,  313,   87,   13,   14,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   17,   17,
       17,   18,   18,   18,   19,   17,   19,  768,   18,   20,
       17,   20,   35,   18,   35,   36,   19,   36,  308,   17,
       93,   20,   18,   93,   35,   19,   98,   36,  308,   98,
       20,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   27,   28,

       27,   28,  102,  107,  109,  102,  107,  766,   27,   28,
       27,   28,  109,   27,   28,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   31,   31,   31,  197,   33,  197,
       33,   31,   37,  763,   37,   33,   31,  116,   31,   31,
       33,   34,  762,   34,   37,   38,  122,   38,   34,   31,
      116,  122,   37,   34,   37,  761,   41,   38,   41,  217,

       41,  217,   42,   31,   42,   38,   42,   38,   41,   31,
       39,   39,   39,   39,   42,  123,  130,   39,   39,  130,
       39,  116,   39,   40,   40,   40,   40,   43,  145,   43,
       40,   40,   44,   40,   44,   40,  295,  760,   45,   43,
       45,   41,   41,   46,   44,   46,  758,   42,   42,   47,
       45,   47,  757,  145,   48,   46,   48,  134,  294,  123,
      134,   47,  140,  294,  154,  140,   48,  154,  756,   49,
       47,   49,   43,   43,   50,   48,   50,   44,   44,  752,
      295,   49,   51,   45,   51,   49,   50,   49,   46,  152,
       50,   51,   50,   52,   51,   52,  152,   53,   53,   53,

      146,   55,   52,   55,  157,   52,   53,  157,  751,   53,
       54,   54,   54,   55,   56,   57,   56,   57,   58,   54,
       58,   59,   54,   59,  146,  167,   56,   57,  167,   60,
       58,   60,   59,   59,   61,  318,   61,   58,  146,  318,
       60,   60,   62,   63,   62,   63,   61,   64,   60,   64,
       65,   66,   65,   66,   62,   63,   67,  172,   67,   64,
      172,   62,   65,   66,  193,   68,   64,   68,   67,   69,
       66,   69,  193,   70,   71,   70,   71,   68,   72,  181,
       72,   69,  181,  339,   68,   70,   71,   73,  319,   73,
       72,   74,   75,   74,   75,  750,   76,   72,   76,   73,

       77,  339,   77,   74,   75,   78,  749,   78,   76,   79,
       74,   79,   77,  319,   80,   76,   80,   78,  128,  128,
      128,   79,  185,  746,   78,  185,   80,  417,  417,  128,
      129,  129,  129,   80,  127,  127,  127,  162,  162,  162,
      745,  129,  163,  163,  163,  127,  162,  166,  166,  166,
      169,  163,  169,  191,  169,  189,  191,  189,  127,  222,
      127,  222,  169,  192,  189,  195,  192,  199,  195,  127,
      741,  127,  127,  127,  199,  203,  274,  199,  203,  208,
      208,  208,  209,  740,  274,  209,  213,  213,  213,  214,
      219,  224,  214,  219,  224,  169,  169,  204,  228,  228,

      228,  204,  229,  739,  232,  229,  232,  204,  204,  322,
      204,  204,  204,  204,  234,  204,  220,  234,  418,  418,
      220,  237,  237,  237,  738,  238,  220,  220,  238,  220,
      220,  220,  220,  322,  220,  225,  242,  242,  242,  225,
      243,  248,  424,  243,  248,  225,  225,  322,  225,  225,
      225,  225,  424,  225,  247,  247,  247,  252,  252,  252,
      253,  736,  287,  253,  257,  257,  257,  258,  275,  265,
      258,  265,  280,  320,  281,  287,  275,  281,  735,  275,
      280,  298,  298,  298,  299,  302,  306,  299,  302,  306,
      309,  358,  298,  358,  328,  332,  332,  332,  320,  345,

      309,  328,  345,  379,  332,  379,  287,  309,  333,  333,
      333,  334,  334,  334,  336,  346,  336,  346,  336,  340,
      340,  348,  350,  348,  346,  350,  336,  340,  352,  365,
      348,  383,  365,  348,  383,  734,  352,  374,  374,  374,
      377,  377,  377,  393,  397,  393,  732,  397,  406,  406,
      406,  408,  730,  408,  412,  412,  412,  450,  450,  336,
      336,  413,  413,  413,  414,  414,  414,  415,  415,  415,
      416,  416,  416,  427,  432,  500,  435,  427,  500,  452,
      452,  454,  432,  454,  505,  432,  435,  452,  728,  727,
      454,  508,  508,  508,  505,  526,  526,  526,  536,  536,

      536,  546,  546,  546,  550,  552,  726,  550,  552,  560,
      560,  560,  567,  569,  725,  567,  569,  573,  573,  573,
      574,  574,  574,  581,  581,  581,  583,  583,  583,  584,
      584,  584,  585,  585,  585,  584,  588,  588,  588,  592,
      592,  592,  593,  593,  593,  595,  595,  595,  598,  598,
      598,  602,  602,  602,  603,  603,  603,  605,  605,  605,
      608,  608,  608,  612,  612,  612,  613,  613,  613,  617,
      617,  617,  623,  623,  623,  624,  624,  624,  629,  629,
      629,  631,  631,  631,  633,  633,  633,  634,  634,  634,
      636,  636,  636,  634,  639,  639,  639,  641,  641,  641,

      643,  643,  643,  645,  645,  645,  648,  648,  648,  650,
      650,  650,  652,  652,  652,  654,  654,  654,  657,  657,
      657,  659,  659,  659,  661,  661,  661,  668,  668,  668,
      673,  673,  673,  674,  674,  674,  675,  675,  675,  677,
      677,  677,  679,  679,  679,  680,  680,  680,  682,  682,
      682,  684,  684,  684,  685,  685,  685,  687,  687,  687,
      689,  689,  689,  690,  690,  690,  696,  696,  696,  697,
      697,  697,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,

      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  699,  699,  699,  701,  701,  701,  702,  702,  702,
      704,  704,  704,  706,  706,  706,  707,  707,  707,  708,
      708,  708,  710,  710,  710,  711,  711,  711,  712,  712,
      712,  702,  724,  702,  714,  714,  714,  715,  715,  715,
      718,  718,  718,  723,  702,  719,  702,  722,  722,  722,
      729,  729,  729,  731,  731,  731,  733,  733,  733,  737,
      737,  737,  742,  742,  742,  743,  743,  743,  744,  744,
      744,  747,  747,  747,  748,  748,  748,  753,  753,  753,

      754,  754,  754,  755,  755,  755,  759,  759,  759,  764,
      764,  764,  765,  765,  765,  767,  767,  767,  770,  770,
      770,  771,  771,  771,  772,  772,  772,  774,  774,  774,
      775,  775,  775,  777,  777,  777,  717,  716,  713,  709,
      705,  703,  700,  695,  694,  693,  692,  691,  688,  686,
      683,  681,  678,  676,  672,  671,  670,  669,  667,  666,
      665,  664,  663,  662,  660,  771,  658,  656,  655,  653,
      651,  774,  779,  779,  779,  779,  779,  779,  779,  779,
      779,  779,  779,  779,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  781,  781,  781,  781,

      781,  781,  781,  781,  781,  781,  781,  781,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  789,  789,  789,  789,  789,  789,  789,  789,

      789,  789,  789,  789,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,

      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  801,  801,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  801,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  805,  805,  805,  805,  805,  805,
      805,  805,  805,  805,  805,  805,  806,  649,  806,  806,

      806,  806,  806,  806,  806,  806,  806,  806,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      808,  647,  808,  808,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  810,  646,  810,  644,
      642,  810,  811,  640,  811,  638,  637,  811,  812,  812,
      632,  812,  630,  812,  813,  628,  813,  813,  627,  813,
      814,  814,  814,  814,  626,  814,  814,  814,  814,  814,
      814,  814,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  816,  625,  622,  816,  816,  816,
      816,  621,  816,  816,  816,  816,  817,  817,  817,  817,

      817,  817,  817,  817,  817,  817,  817,  817,  818,  620,
      619,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      819,  618,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  823,  616,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  825,  615,  825,  825,  825,  825,  825,  825,

      825,  825,  825,  825,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  827,  614,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      829,  611,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,

      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  835,  835,  835,  835,  835,  835,  835,  835,
      835,  835,  835,  835,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  610,  609,  607,  606,
      604,  601,  600,  599,  597,  596,  594,  591,  590,  589,
      587,  586,  582,  580,  579,  578,  577,  576,  575,  571,
      570,  568,  566,  565,  564,  563,  562,  561,  559,  558,
      557,  555,  553,  551,  549,  548,  547,  545,  544,  543,
      542,  541,  540,  539,  538,  537,  535,  534,  533,  532,
      531,  530,  529,  528,  527,  525,  524,  523,  522,  521,

      520,  519,  518,  517,  516,  515,  514,  513,  512,  511,
      510,  509,  507,  506,  504,  503,  502,  499,  498,  497,
      496,  495,  494,  493,  492,  491,  490,  489,  488,  487,
      486,  485,  484,  483,  482,  481,  480,  479,  478,  477,
      476,  475,  474,  473,  472,  471,  470,  469,  468,  467,
      466,  465,  464,  463,  462,  461,  460,  459,  458,  457,
      456,  455,  448,  447,  446,  445,  444,  443,  442,  441,
      440,  439,  438,  437,  436,  433,  431,  430,  429,  428,
      426,  425,  423,  422,  421,  419,  405,  404,  403,  402,
      401,  400,  399,  398,  391,  390,  389,  388,  387,  386,

      385,  384,  373,  372,  371,  370,  369,  368,  367,  366,
      362,  361,  360,  359,  356,  353,  351,  349,  347,  344,
      338,  326,  325,  324,  323,  321,  317,  316,  315,  314,
      312,  311,  310,  305,  304,  303,  301,  300,  292,  291,
      289,  288,  284,  282,  279,  270,  269,  260,  256,  251,
      246,  241,  236,  227,  212,  206,  201,  196,  194,  188,
      184,  182,  179,  171,  161,  156,  150,  149,  143,  142,
      141,  139,  138,  137,  120,  118,  115,  114,  110,  108,
      106,  104,  100,   97,   95,   91,   83,   81,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,

      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
yy_lp = yy_full_lp; /* restore orig. accepting pos. */ \
yy_state_ptr = yy_full_state; /* restore orig. state */ \
yy_current_state = *yy_state_ptr; /* restore curr. state */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "cpp.l"
#define INITIAL 0
/*************************************************************************

    CPP lexer

    The file is derived from the DOC++ source by Roland Wunderling
    and Malte Zoeckler.

    Better handling of typedefs, linenumbers, formatting, comments
    and various other improvements was made. Still a lot to be done
    to handle all modern C++ constructs. <bjarke@viksoe.dk>

 *************************************************************************/
#line 16 "cpp.l"

#pragma code_seg( "MISC" )

/*
 *	Includes
 */

#include "CppTypes.h"


/* -----------------------------------------------------------------
 *
 *	statics
 */
static const char*	inputString ;
static int		inputPosition ;
static int		lastContext ;
static int		lastCContext ;
static int		lastTContext;
static int		protection   = GLOB ;
static int		bracketCount = 0 ;
static int		sharpCount   = 0 ;
static Entry*		current_root = 0 ;
static Entry*		global_root  = 0 ;
static Entry*		current      = 0 ;

static int		yyLineNr = 1 ;
static char		yyFileName[264] ;
static McString*	currentString ;

static void msg( const char* str, const char* str2=NULL )
{
#ifdef _DEBUG
	if( verb )
	{
		printf( "%s(%d):\t%s", yyFileName, yyLineNr, str ) ;
		if( str2 ) printf( "%s", str2 ) ;
		printf( "\n" ) ;
	}
#endif
}

static void lineCount()
{
	for( const char* c = yytext ; *c ; ++c )
		yyLineNr += (*c == '\n') ;
}


static void addType( Entry* current )
{
   if( !current->name.empty() ) {
      if( !current->type.empty() ) current->type += ' ' ;
      current->type += current->name ;
      current->name.clear() ;
   }
   if( !current->args.empty() ) {
      if( !current->type.empty() ) current->type += ' ' ;
      current->type += current->args ;
      current->args.clear() ;
   }
}

/* -----------------------------------------------------------------
 */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result = yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
	int c = 0;
	while( c < max_size && inputString[inputPosition] )
	{
		*buf = inputString[inputPosition++] ;
		c++; buf++;
	}
	return c;
}

#define Cxx_Memo 1

#define SubDoc 2

#define SubDocComment 3

#define SubDocCppComment 4

#define Doc 5

#define VerbDoc 6

#define Define 7

#define DefineEnd 8

#define DefineEnded 9

#define ClassName 10

#define TypedefName 11

#define Bases 12

#define NextSemi 13

#define FindMembers 14

#define Function 15

#define Operator 16

#define Throws 17

#define Array 18

#define Round 19

#define Curly 20

#define SkipCurly 21

#define SkipInits 22

#define SkipCPP 23

#define Sharp 24

#define Comment 25

#define SkipComment 26

#define SkipCxxComment 27

#define CppDoc 28

#define CppMemo 29

#define See 30

#define Args 31

#define Type 32

#define Author 33

#define Name 34

#define Version 35

#define Param 36

#define Memo 37

#define Return 38

#define Exception 39

#line 1431 "lex.cpp.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplusx
//#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 142 "cpp.l"


#line 1588 "lex.cpp.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 779 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 778 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yy_looking_for_trail_begin )
					{
					if ( yy_act == yy_looking_for_trail_begin )
						{
						yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					yy_full_match = yy_cp;
					yy_full_state = yy_state_ptr;
					yy_full_lp = yy_lp;
					break;
					}
				++yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 144 "cpp.l"
{ 
					  yyLineNr = 1 ; 
					  int i;
					  for( i = 0 ; yytext[i+1] != 6 ; i++ )
						yyFileName[i] = yytext[i+1] ;
					  yyFileName[i] = 0 ;
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 152 "cpp.l"
{ BEGIN( FindMembers ) ; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 154 "cpp.l"
{ 
					  current->protection = protection = PUBL ;
					  lineCount() ;
					}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 158 "cpp.l"
{ 
					  current->protection = protection = PROT ;
					  lineCount() ;
					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 162 "cpp.l"
{ 
					  current->protection = protection = PRIV ;
					  lineCount() ;
					}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 167 "cpp.l"
{
					  msg( "found class    ", current->name ) ;
					  current->section = TYPEDEF_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef class" ;
					  current->name.clear() ;
					  lineCount() ;
					}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 176 "cpp.l"
{
					  msg( "found struct   ", current->name ) ;
					  current->section = STRUCT_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef struct" ;
					  current->name.clear() ;
					  lastTContext = 1;
					  lineCount() ;
				  	  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 186 "cpp.l"
{
					  msg( "found struct   ", current->name ) ;
					  current->section = STRUCT_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef struct" ;
					  current->name.clear() ;
					  lineCount() ;
					  current->file = yyFileName ;
					  current->startLine = yyLineNr ;
					  lastTContext = 1;
				  	  BEGIN( Curly ) ;
					}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 199 "cpp.l"
{
					  msg( "found enum     ", current->name ) ;
					  current->section = ENUM_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef enum" ;
					  current->name.clear() ;
					  lineCount() ;
				  	  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 209 "cpp.l"
{
					  msg( "found union    ", current->name ) ;
					  current->section = UNION_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef union" ;
					  current->name.clear() ;
					  lineCount() ;
				  	  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 219 "cpp.l"
{ 
					  current->section = CLASS_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "class" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 228 "cpp.l"
{ 
					  current->section = STRUCT_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "struct" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 237 "cpp.l"
{ 
					  current->section = ENUM_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "enum" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 246 "cpp.l"
{ 
					  current->section = UNION_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "union" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 15:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 256 "cpp.l"
{ 
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  current->name  = yytext ;
					  BEGIN( Operator ) ;
					}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 262 "cpp.l"
{ 
					  current->name += yytext ;
					  current->lineNo = yyLineNr;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 268 "cpp.l"
{ 
					  addType( current ) ;
				          current->lineNo = yyLineNr;
					  current->name  = yytext ;
					}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 274 "cpp.l"
{ BEGIN( SkipCPP ) ; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 275 "cpp.l"

	YY_BREAK
case 20:
YY_RULE_SETUP
#line 276 "cpp.l"

	YY_BREAK
case 21:
YY_RULE_SETUP
#line 277 "cpp.l"
{ yyLineNr++ ; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 278 "cpp.l"
{ 
					  yyLineNr++ ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 283 "cpp.l"
{ 
					  current->type = "#define" ;
					  BEGIN( Define ) ;
					}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 287 "cpp.l"
{ 
					  current->name = yytext ;
					  current->lineNo = yyLineNr;
					  BEGIN( DefineEnd ) ;
					}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 292 "cpp.l"
{ BEGIN( DefineEnd ) ; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 293 "cpp.l"
{ 
					  current->args = yytext ;
					  BEGIN( DefineEnded ) ;
					}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 297 "cpp.l"
{ yyLineNr++ ; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 298 "cpp.l"
{ 
					  if( current->done == onlyDocs )
					  {
					    current->section = MACRO_SEC ;
					    current->lineNo = yyLineNr;
					    msg( "found macro    ", current->name ) ;
					    current_root->addSubEntry( current ) ;
					    current = new Entry ;
					    current->protection = protection ;
					  }
					  else
					  {
					    current->name.clear() ;
					    current->type.clear() ;
					  }
					  yyLineNr++ ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 317 "cpp.l"
{ 
					  current->name += yytext ; 
					  current->lineNo = yyLineNr;
					}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 322 "cpp.l"
{ 
					  BEGIN( FindMembers ) ;
					  if( current->lineNo == 0 ) current->lineNo = yyLineNr + 1;
					  msg( "found variable ", current->name ) ;
					  if( current->done == onlyDocs )
					  {
					    if( current->section != TYPEDEF_SEC )
						    current->section = VARIABLE_SEC ;
					    current_root->addSubEntry( current ) ;
					    current = new Entry ;
					    current->protection = protection ;
					  }
					  else
					  {
					    current->section = EMPTY_SEC ;
					    current->name.clear() ;
					    current->type.clear() ;
					    current->args.clear() ;
					  }
					  if( *yytext == '=' )
					    BEGIN( NextSemi ) ;
					}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 345 "cpp.l"
{ 
					  current->args += yytext ;
					  sharpCount=1;
					  BEGIN( Array ) ;
					}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 350 "cpp.l"
{ 
					  current->args += *yytext ;
					  if (--sharpCount<=0)
						BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 355 "cpp.l"
{ 
					  current->args += *yytext ;
					  sharpCount++;	
					}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 359 "cpp.l"
{ current->args += *yytext ; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 361 "cpp.l"
{ 
					  addType( current ) ;
					  current->type += yytext ;
					  sharpCount=1;
					  BEGIN( Sharp ) ;
					}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 367 "cpp.l"
{ 
					  current->type += *yytext ;
					  if (--sharpCount<=0)
	                                     BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 372 "cpp.l"
{ 
					  current->type += *yytext ;
					  sharpCount++;	
					}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 376 "cpp.l"
{ current->type += *yytext ; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 378 "cpp.l"
{ current->program += yytext ; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 379 "cpp.l"
{ current->program += yytext ; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 380 "cpp.l"
{ current->program += yytext ; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 381 "cpp.l"
{ 
					  current->program += yytext ;
					  lastContext = Curly ;
					  BEGIN( Comment ) ;
					}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 386 "cpp.l"
{ 
					  current->program += yytext ;
					  ++yyLineNr ;
					  lastContext = Curly ;
					  BEGIN( Comment ) ;
					}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 392 "cpp.l"
{ 
					  current->program += yytext ;
					  ++bracketCount ;
					}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 396 "cpp.l"
{ 
					  if( bracketCount > 0 )
					  {
						current->program += yytext ;
						--bracketCount ;
					  }
					  else
					  {
					    current->args += " {...}";

					    if( lastTContext ) 
					    {
					      BEGIN( TypedefName ) ;
					    }
					    else if( current->done == onlyDocs )
					    {
					      int section = current->section;
					      current_root->addSubEntry( current ) ;
					      current = new Entry ;
					      current->protection = protection ;
					      if( section == CLASS_SEC ) current->protection = GLOB ;
					      BEGIN( NextSemi ) ;
					    }
					    else
					    {
					      current->name.clear() ;
					      current->type.clear() ;
					      current->args.clear() ;
					      current->section = EMPTY_SEC ;
					      BEGIN( NextSemi ) ;
					    }
					  }
					}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 429 "cpp.l"
{ 
					  current->program += yytext ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 433 "cpp.l"
{ current->program += yytext ; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 435 "cpp.l"
{ 
					  current->args = yytext ;
					  BEGIN( Round ) ;
					}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 439 "cpp.l"
{ 
					  current->args += *yytext ;
					  ++bracketCount ;
					}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 443 "cpp.l"
{ 
					  current->args += *yytext ;
					  if( bracketCount > 0 )
					    --bracketCount ;
					  else
					    BEGIN( Function ) ;
					}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 450 "cpp.l"
{ lineCount() ; current->args += ", " ; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 451 "cpp.l"
{ lineCount() ; current->args += " " ; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 452 "cpp.l"
{ current->args += *yytext ; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 454 "cpp.l"
{ lineCount() ; current->args += " const " ; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 456 "cpp.l"
{ 
					  current->args += " throw(" ;
					  lineCount() ;
				  	  BEGIN( Round ) ;
					}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 461 "cpp.l"
{ 
					  current->type += current->name ;
					  current->name  = current->args ;
					  current->args  = yytext ;
					  current->lineNo = yyLineNr;
					  BEGIN( Round ) ;
					}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 468 "cpp.l"
{ 
					  msg( "found method   ", current->name ) ;
					  if( current->done == onlyDocs )
					  {
					    current->section = FUNCTION_SEC ;
					    current_root->addSubEntry(current);
					    current = new Entry ;
					    current->protection = protection ;
					  }
					  else
					  {
					    current->name.clear() ;
					    current->type.clear() ;
					    current->args.clear() ;
					  }
					  if( *yytext == '{' )
					      BEGIN( SkipCurly ) ;
					  else if( *yytext == ':' )
					      BEGIN( SkipInits ) ;
					  else
					      BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 491 "cpp.l"
{ BEGIN( SkipCurly ) ; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 492 "cpp.l"
{ ++bracketCount ; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 493 "cpp.l"
{ 
					  if( bracketCount > 0 )
					    --bracketCount ;
					  else
					    BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 500 "cpp.l"
{ 
					  if( current->done == onlyDocs )
					  {
					    current->section = VARIABLE_SEC ;
					    current_root->addSubEntry(current);
					    current = new Entry ;
					    current->protection = protection ;
					  }
					  else
					  {
					    current->section = EMPTY_SEC ;
					    current->type.clear() ;
					    current->name.clear() ;
					    current->args.clear() ;
					  }
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 517 "cpp.l"
{ 
					  if( !current->type.empty() && !current->name.empty() ) current->type += " " ;
					  current->type += current->name ;
				  	  current->name = yytext ;
					  current->lineNo = yyLineNr;
					}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 523 "cpp.l"
{ 
					  current->args = " :" ;
					  BEGIN( Bases ) ;
					}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 527 "cpp.l"
{ 
					  current->file = yyFileName ;
				  	  if( current->lineNo == 0 ) current->lineNo = yyLineNr;
					  current->startLine = yyLineNr ;
				  	  msg( "found class    ", current->name ) ;
				  	  BEGIN( Curly ) ;
					}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 534 "cpp.l"
{ 
					  current->extends.append( new McString(yytext) ) ;
					  if( !current->args.empty() ) current->args += " " ;
					  current->args += yytext ;
					}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 539 "cpp.l"
{ current->args += ',' ; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 541 "cpp.l"
{ 
					  current->program += yytext ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 545 "cpp.l"
{ current->program += yytext ; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 546 "cpp.l"
{ 
					  current->program += yytext ;
					  BEGIN( Curly ) ;
					}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 551 "cpp.l"
{ 
					  if( !current->type.empty() && !current->name.empty() ) current->type += " " ;
					  current->type += current->name ;
				  	  current->name = yytext ;
					  current->lineNo = yyLineNr;
		
				          lastTContext = 0;
					  msg( "found typedef  ", current->name ) ;

				          int section = current->section;
					  current_root->addSubEntry( current ) ;
					  current = new Entry ;
					  current->protection = protection ;
					  if( section == CLASS_SEC ) current->protection = GLOB ;

					  BEGIN( NextSemi ) ;
					}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 569 "cpp.l"
{
				          lastTContext = 0;
					  msg( "found typedef  ", current->name ) ;

					  int section = current->section;
					  current_root->addSubEntry( current ) ;
					  current = new Entry ;
					  current->protection = protection ;
					  if( section == CLASS_SEC ) current->protection = GLOB ;

				          if( *yytext == ',' )
					    BEGIN( NextSemi ) ;
					  else
					    BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 586 "cpp.l"
{ 
					  lineCount() ;
					  if( current->doc.length() > 0
						  ||  current->memo.length() > 0 )
					  {
						msg( "found explicit entry" ) ;
						current->lineNo = yyLineNr;
						current_root->addSubEntry( current ) ;
						current = new Entry ;
					  }
					  current->done = onlyDocs ;
					  BEGIN( Cxx_Memo ) ;
					}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 599 "cpp.l"
{ current->memo += yytext ; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 600 "cpp.l"
{ 
					  yyLineNr++ ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 605 "cpp.l"
{ lineCount() ; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 606 "cpp.l"
{ lineCount() ; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 607 "cpp.l"
{ 
					  lastCContext = YY_START ;
					  BEGIN( SkipComment ) ;
					}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 611 "cpp.l"
{ 
					  lineCount() ;
					  if( current->doc.length() > 0
					      ||  current->memo.length() > 0 )
					  {
					     msg( "found explicit entry" ) ;
					     current->lineNo = yyLineNr;
					     current_root->addSubEntry( current ) ;
					     current = new Entry ;
					  }
					  current->done = onlyDocs ;
					  BEGIN( Doc ) ;
					}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 624 "cpp.l"
{ yyLineNr++; BEGIN( FindMembers ) ; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 625 "cpp.l"
{ 
					  current->doc += yytext ;
					  BEGIN( VerbDoc ) ;
					}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 629 "cpp.l"
{ 
					  current->doc += '\n' ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 633 "cpp.l"
{ 
					  current->doc += yytext ;
					  BEGIN( Doc ) ;
					}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 637 "cpp.l"
{ 
					  current->doc += '\n' ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 641 "cpp.l"
{ current->doc += *yytext ; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 642 "cpp.l"
{ current->doc += yytext ; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 643 "cpp.l"
{ current->doc += yytext ; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 644 "cpp.l"
{ BEGIN( FindMembers ) ; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 646 "cpp.l"
{ 
					  lineCount() ;
					  current->file = yyFileName ;
					  if( current->lineNo == 0 ) current->lineNo = yyLineNr;
					  current->startLine = yyLineNr ;
					  BEGIN( SubDoc ) ;
					}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 653 "cpp.l"
{ 
					  current->program += yytext ;
					  BEGIN( SubDocComment ) ;
					}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 657 "cpp.l"
{ 
					  current->program += yytext ;
					  BEGIN( SubDocCppComment ) ;
					}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 661 "cpp.l"
{ current->program += *yytext ; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 662 "cpp.l"
{ 
					  current->program += *yytext ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 666 "cpp.l"
{ 
					  lineCount() ;
					  current->program += yytext ;
					  ++bracketCount ;
					}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 671 "cpp.l"
{ 
					  lineCount() ;
					  if( bracketCount > 0 )
					  {
					    current->program += yytext ;
					    --bracketCount ;
					  }
					  else
					  {
					    msg( "found explicit subentry" ) ;
					              current->lineNo = yyLineNr;
					    current_root->addSubEntry( current ) ;
					    current = new Entry ;
					    current->protection = protection ;
					    BEGIN( FindMembers ) ;
					  }
					}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 689 "cpp.l"
{ current->program += yytext ; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 690 "cpp.l"
{ current->program += yytext ; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 691 "cpp.l"
{ current->program += yytext ; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 692 "cpp.l"
{ 
					  current->program += yytext ;
					  ++yyLineNr ;
					}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 696 "cpp.l"
{ 
					  current->program += yytext ;
					  BEGIN( SubDoc ) ;
					}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 701 "cpp.l"
{ current->program += yytext ; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 702 "cpp.l"
{ 
					  current->program += yytext ;
					  ++yyLineNr ;
					  BEGIN( SubDoc ) ;
					}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 708 "cpp.l"
{ 
					  current->memo += yytext ;
					  current->doc  += yytext ; 
					}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 712 "cpp.l"
{ 
					  BEGIN( CppDoc ) ;
                      			  lineCount();
					  current->doc  += yytext ; 
					}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 717 "cpp.l"
{ 
					  current->doc  += *yytext ; 
	                  		  lineCount();
					}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 721 "cpp.l"
{ current->memo += yytext ; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 722 "cpp.l"
{ current->doc  += yytext ; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 724 "cpp.l"
{
					  current->see.append( new McString ) ;
					  BEGIN( See ) ;
					}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 728 "cpp.l"
{
					  BEGIN( Author ) ; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 730 "cpp.l"
{
					  BEGIN( Version ) ; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 732 "cpp.l"
{
					  current->param.append( new McString  ) ;
					  BEGIN( Param ) ;
					}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 736 "cpp.l"
{
					  current->exception.append( new McString ) ;
					  BEGIN( Exception ) ;
					}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 740 "cpp.l"
{
					  BEGIN( Return ) ; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 742 "cpp.l"
{
					  current->name.clear() ;
					  current->section = MANUAL_SEC ;
					  BEGIN( Name ) ;
					}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 747 "cpp.l"
{
					  current->memo.clear() ;
					  BEGIN( Memo ) ;
					}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 752 "cpp.l"
{
					  current->type.clear() ;
					  BEGIN( Type ) ;
					}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 756 "cpp.l"
{
					  current->args.clear() ;
					  BEGIN( Args ) ;
					}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 761 "cpp.l"
{ current->name = yytext ; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 762 "cpp.l"
{ BEGIN( CppDoc ) ; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 764 "cpp.l"
{ current->type = yytext ; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 765 "cpp.l"
{ BEGIN( CppDoc ) ; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 767 "cpp.l"
{ current->args = yytext ; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 768 "cpp.l"
{ BEGIN( CppDoc ) ; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 770 "cpp.l"
{ current->author += *yytext ; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 771 "cpp.l"
{ current->version += *yytext ; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 772 "cpp.l"
{ *(current->see.last()) += *yytext ; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 773 "cpp.l"
{ *(current->param.last()) += *yytext ; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 774 "cpp.l"
{ *(current->exception.last()) += *yytext ; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 775 "cpp.l"
{ current->memo += *yytext ; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 776 "cpp.l"
{ current->retrn += *yytext ; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 778 "cpp.l"
{ current->author  += '\n' ; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 779 "cpp.l"
{ current->version += '\n' ; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 780 "cpp.l"
{ *(current->see.last()) += '\n' ; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 781 "cpp.l"
{ *(current->param.last()) += '\n' ; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 782 "cpp.l"
{ *(current->exception.last()) += '\n' ; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 783 "cpp.l"
{ current->memo += *yytext ; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 784 "cpp.l"
{ current->retrn += *yytext ; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 786 "cpp.l"

	YY_BREAK
case 138:
YY_RULE_SETUP
#line 787 "cpp.l"
{ yyLineNr++ ; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 788 "cpp.l"
{ 
					  lastCContext = YY_START ;
					  BEGIN( SkipComment ) ;
					}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 792 "cpp.l"

	YY_BREAK
case 141:
YY_RULE_SETUP
#line 793 "cpp.l"
{ BEGIN( lastCContext ) ; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 794 "cpp.l"
{ 
					  lastCContext = YY_START ;
					  BEGIN( SkipCxxComment ) ;
					}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 798 "cpp.l"
{ 
					  yyLineNr++ ;
					  BEGIN( lastCContext ) ;
					}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 802 "cpp.l"
ECHO;
	YY_BREAK
#line 2892 "lex.cpp.c"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Cxx_Memo):
			case YY_STATE_EOF(SubDoc):
			case YY_STATE_EOF(SubDocComment):
			case YY_STATE_EOF(SubDocCppComment):
			case YY_STATE_EOF(Doc):
			case YY_STATE_EOF(VerbDoc):
			case YY_STATE_EOF(Define):
			case YY_STATE_EOF(DefineEnd):
			case YY_STATE_EOF(DefineEnded):
			case YY_STATE_EOF(ClassName):
			case YY_STATE_EOF(TypedefName):
			case YY_STATE_EOF(Bases):
			case YY_STATE_EOF(NextSemi):
			case YY_STATE_EOF(FindMembers):
			case YY_STATE_EOF(Function):
			case YY_STATE_EOF(Operator):
			case YY_STATE_EOF(Throws):
			case YY_STATE_EOF(Array):
			case YY_STATE_EOF(Round):
			case YY_STATE_EOF(Curly):
			case YY_STATE_EOF(SkipCurly):
			case YY_STATE_EOF(SkipInits):
			case YY_STATE_EOF(SkipCPP):
			case YY_STATE_EOF(Sharp):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(SkipComment):
			case YY_STATE_EOF(SkipCxxComment):
			case YY_STATE_EOF(CppDoc):
			case YY_STATE_EOF(CppMemo):
			case YY_STATE_EOF(See):
			case YY_STATE_EOF(Args):
			case YY_STATE_EOF(Type):
			case YY_STATE_EOF(Author):
			case YY_STATE_EOF(Name):
			case YY_STATE_EOF(Version):
			case YY_STATE_EOF(Param):
			case YY_STATE_EOF(Memo):
			case YY_STATE_EOF(Return):
			case YY_STATE_EOF(Exception):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 779 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 779 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 778);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 802 "cpp.l"



/*@ ----------------------------------------------------------------------------
 */
void parseDoc(Entry* rt)
{
	if( rt->doc.length() )
	{
		Entry* _current = current ;
		rt->program = rt->doc ;
		rt->doc.clear() ;
		inputString   = rt->program ;
		inputPosition = 0 ;
		current = rt ;
		cpprestart( cppin ) ;
		if( rt->memo.length() > 0 )
			BEGIN( CppDoc ) ;
		else
			BEGIN( CppMemo ) ;
		cpplex() ;
		rt->program.clear() ;
		if( rt->memo.length()+2 >= rt->doc.length() )
			rt->doc.clear() ;
		current = _current ;
	}
}

void callcpplex()
{
	cpplex() ;
	if( (current->name.length()  ||  current->program.length()  ||
		current->memo.length()  ||  current->doc.length() )
		&&  current->done == onlyDocs )
	{
		if( current->section == EMPTY_SEC )
			current->section = VARIABLE_SEC ;
		current_root->addSubEntry( current ) ;
		current = new Entry ;
		current->protection = protection ;
	}
}

void parseCppClasses(Entry* rt)
{
    if( rt == 0 ) return ;
    for( Entry *cr = rt->sub ; cr ; cr = cr->next )
    {
		if( cr->program.length() > 0 )
		{
#ifdef _DEBUG
			if (verb)
				printf("Scanning substuff of (%s) %s\n",
				   (const char *)cr->type,
				   (const char *)cr->name);
#endif
			inputString   = cr->program ;
			inputPosition = 0 ;
			cpprestart( cppin ) ;
			BEGIN( FindMembers ) ;
			current_root = cr ;
			strcpy( yyFileName, cr->file ) ;
			yyLineNr = cr->startLine ;
			current->type.clear() ;
			current->name.clear() ;
			current->args.clear() ;
			current->section = EMPTY_SEC ;
			if( cr->section == CLASS_SEC )
				current->protection = protection = PRIV ;
			else if( cr->section == STRUCT_SEC )
				current->protection = protection = PUBL ;
			else if( cr->section == UNION_SEC )
				current->protection = protection = PUBL ;
			else
				current->protection = protection = GLOB ;
			callcpplex() ;
			cr->program.clear() ;
		}
		parseCppClasses( cr ) ;
    }
    parseDoc( rt ) ;
}

void parseCpp(Entry* rt)
{
	current_root  = rt ;
	global_root   = rt ;
	protection    = GLOB ;
	current       = new Entry ;
	yyLineNr      = 1 ;
	yyFileName[0] = '\0' ;
	bracketCount  = 0 ;
	sharpCount    = 0 ;
	lastTContext  = 0 ;

	inputString   = rt->program ;
	inputPosition = 0 ;
	cpprestart( cppin ) ;
	BEGIN( FindMembers ) ;
	callcpplex() ;
	rt->program.clear() ;
	parseCppClasses( rt ) ;

	delete current;
}

extern "C" {
	int	cppwrap()	{ return 1 ; }
};
