#define yy_create_buffer cpp_create_buffer
#define yy_delete_buffer cpp_delete_buffer
#define yy_scan_buffer cpp_scan_buffer
#define yy_scan_string cpp_scan_string
#define yy_scan_bytes cpp_scan_bytes
#define yy_flex_debug cpp_flex_debug
#define yy_init_buffer cpp_init_buffer
#define yy_flush_buffer cpp_flush_buffer
#define yy_load_buffer_state cpp_load_buffer_state
#define yy_switch_to_buffer cpp_switch_to_buffer
#define yyin cppin
#define yyleng cppleng
#define yylex cpplex
#define yyout cppout
#define yyrestart cpprestart
#define yytext cpptext
#define yywrap cppwrap

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

typedef int FILE; //#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplusx
#define __cplusplusx
#endif
#endif


#ifdef __cplusplus

//#include <stdlib.h>
//#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
//#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 154
#define YY_END_OF_BUFFER 155
static yyconst short int yy_acclist[990] =
    {   0,
       82,   82,   19,   19,   45,   45,  131,  131,  129,  129,
      127,  127,  155,  147,  154,  147,  154,  148,  154,  147,
      154,   82,  147,  154,   82,  147,  154,   83,  148,  154,
       82,  147,  154,  101,  147,  154,  101,  147,  154,  102,
      148,  154,  101,  147,  154,  107,  147,  154,  107,  147,
      154,  108,  148,  154,  107,  147,  154,  107,  147,  154,
      110,  147,  154,  110,  147,  154,  111,  148,  154,  110,
      147,  154,   94,  147,  154,   94,  147,  154,   93,  148,
      154,   92,   94,  147,  154,   94,  147,  154,   94,  147,
      154,   94,  147,  154,   90,  148,  154,   94,  147,  154,

       29,  147,  154,   30,  147,  154,   34,  148,  154,  147,
      154,  147,  154,  147,  154,   71,  147,  154,   72,  147,
      154,   70,  147,  154,   73,  147,  154,   79,  147,  154,
       80,  147,  154,  147,  154,   74,  147,  154,   75,  147,
      154,  147,  154,  147,  154,    2,  147,  154,    4,  147,
      154,  147,  154,  148,  154,  147,  154,   35,  147,  154,
       55,  147,  154,   36,  147,  154,   21,  147,  154,  147,
      154,   41,  147,  154,   37,  147,  154,   21,  147,  154,
       21,  147,  154,   21,  147,  154,   21,  147,  154,   21,
      147,  154,   21,  147,  154,   21,  147,  154,   21,  147,

      154,  147,  154,   22,  147,  154,   21,  147,  154,  147,
      154,   63,  147,  154,   64,  147,  154,  147,  154,  147,
      154,   19,  147,  154,   19,  147,  154,   19,  148,  154,
       19,  147,  154,   40,  147,  154,   40,  147,  154,   40,
      147,  154,   39,   40,  147,  154,   38,   40,  147,  154,
       60,  147,  154,   60,  147,  154,   59,   60,  147,  154,
       59,  148,  154,   56,   60,  147,  154,   57,   60,  147,
      154,   58,   60,  147,  154,   60,  147,  154,   45,   54,
      147,  154,   45,   54,  147,  154,   53,  148,  154,   54,
      147,  154,   54,  147,  154,   51,   54,  147,  154,   52,

       54,  147,  154,  147,  154,  148,  154,  147,  154,  147,
      154,   68,  147,  154,   69,  147,  154,   65,  147,  154,
       23,  147,  154,   23,  147,  154,   26,  148,  154,   23,
      147,  154,   23,  147,  154,   44,  147,  154,   44,  147,
      154,   44,  147,  154,   43,   44,  147,  154,   42,   44,
      147,  154,   77,  147,  154,   77,  147,  154,   76,  148,
      154,   77,  147,  154,   77,  147,  154,  147,  154,  147,
      154,  147,  154,  147,  154,  147,  154,  148,  153,  154,
      147,  154,  114,  147,  154,  114,  147,  154,  114,  148,
      154,  114,  147,  154,  114,  147,  154,  112,  147,  154,

      112,  147,  154,  112,  148,  154,  113,  147,  154,  112,
      147,  154,  112,  147,  154,  135,  147,  154,  135,  147,
      154,  142,  148,  154,  135,  147,  154,  135,  147,  154,
      131,  147,  154,  131,  147,  154,  132,  148,  154,  131,
      147,  154,  131,  147,  154,  129,  147,  154,  129,  147,
      154,  130,  148,  154,  129,  147,  154,  129,  147,  154,
      133,  147,  154,  133,  147,  154,  140,  148,  154,  133,
      147,  154,  133,  147,  154,  127,  147,  154,  127,  147,
      154,  128,  148,  154,  127,  147,  154,  134,  147,  154,
      134,  147,  154,  141,  148,  154,  134,  147,  154,  134,

      147,  154,  136,  147,  154,  136,  147,  154,  143,  148,
      154,  136,  147,  154,  136,  147,  154,  138,  147,  154,
      138,  147,  154,  145,  148,  154,  138,  147,  154,  138,
      147,  154,  139,  147,  154,  139,  147,  154,  146,  148,
      154,  139,  147,  154,  139,  147,  154,  137,  147,  154,
      137,  147,  154,  144,  148,  154,  137,  147,  154,  137,
      147,  154,    1,  149,  152,   82,   82,    1,   82,   82,
      149,   82,  152,   99,  149,  100,  152,  109,  105,  149,
      106,  152,   93,   93,   97,   96,  149,   95,  152,   29,
       31,   32,   72,   73,   71,   72,   73,   79,   80,   74,

        3,   35,   21,  149,  152,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   22,   21,   19,   19,    1,
       19,   19,  149,   19,  152,   59,   58,   58,   45,   45,
        1,   45,   48,   49,  149,  152,   67,  152,   24,  152,
       25,    1,   78,  149,  152,  151,  150,  152,  153,    1,
      153,  149,  152,  116,  149,  116,  152,  113,  115,  149,
      115,  152,  142,  131,  131,    1,  131,  131,  149,  131,
      152,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      129,  129,    1,  129,  129,  149,  129,  152,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  140,  127,  127,

        1,  127,  127,  149,  127,  152,  141,  143,  145,  146,
      144,   93,   88,   33,   87,   84,16465,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   49,
       50,   49,   46,   47,   66,   78,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,   87,   86,   85, 8273,
     8273,   84, 8273,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   46,  117,  131,  131,  131,
      131,  131,  131,  131,  117,  131,  131,  131,  129,  129,
      129,  129,  129,  129,  129,  117,  129,  129,  129,  103,

      104, 8273,   98,   21,   16,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   61,  126,  124,  123,  117,
      125,  126,  131,  131,  131,  124,  131,  123,  131,  131,
      131,  117,  131,  125,  131,  131,  126,  129,  129,  129,
      124,  129,  123,  129,  129,  129,  117,  129,  125,  129,
      129,   14,   21,   21,   21,   21,   21,   21,   21,   21,
       17,   27,   61,   62,  126,  124,  123,  120,  125,  126,
      131,  131,  131,  124,  131,  123,  131,  120,  131,  131,
      125,  131,  131,  126,  129,  129,  129,  124,  129,  123,
      129,  120,  129,  129,  125,  129,  129,   20,   21,   21,

       21,   21,   21,    5,   21,   15,   21,  118,  120,  122,
      118,  131,  131,  120,  131,  122,  131,  131,  118,  129,
      129,  120,  129,  122,  129,  129,    5,   20,   21,   21,
        7,   21,   21,    5,   28,  118,  122,  119,  118,  131,
      131,  122,  131,  119,  131,  118,  129,  129,  122,  129,
      119,  129,    7,   21,   18,   18,   21,    7,   21,  119,
      131,  119,  131,  129,  119,  129,   13,    6,   21,  121,
      121,  131,  121,  129,    6,    6,  121,  121,  131,  121,
      129,   11,   91,    8,   12,    9,   10,   89,   10
    } ;

static yyconst short int yy_accept[845] =
    {   0,
        1,    1,    1,    2,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    4,    5,    5,    5,    5,    5,    5,
        5,    6,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    8,    9,   10,   11,   11,   11,   12,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   14,   16,   18,   20,   22,   25,   28,   31,   34,
       37,   40,   43,   46,   49,   52,   55,   58,   61,   64,

       67,   70,   73,   76,   79,   82,   86,   89,   92,   95,
       98,  101,  104,  107,  110,  112,  114,  116,  119,  122,
      125,  128,  131,  134,  136,  139,  142,  144,  146,  149,
      152,  154,  156,  158,  161,  164,  167,  170,  172,  175,
      178,  181,  184,  187,  190,  193,  196,  199,  202,  204,
      207,  210,  212,  215,  218,  220,  222,  225,  228,  231,
      234,  237,  240,  243,  247,  251,  254,  257,  261,  264,
      268,  272,  276,  279,  283,  287,  290,  293,  296,  300,
      304,  306,  308,  310,  312,  315,  318,  321,  324,  327,
      330,  333,  336,  339,  342,  345,  349,  353,  356,  359,

      362,  365,  368,  370,  372,  374,  376,  378,  381,  383,
      386,  389,  392,  395,  398,  401,  404,  407,  410,  413,
      416,  419,  422,  425,  428,  431,  434,  437,  440,  443,
      446,  449,  452,  455,  458,  461,  464,  467,  470,  473,
      476,  479,  482,  485,  488,  491,  494,  497,  500,  503,
      506,  509,  512,  515,  518,  521,  524,  527,  530,  533,
      536,  539,  542,  545,  548,  551,  554,  557,  560,  563,
      563,  564,  565,  566,  567,  568,  570,  572,  574,  576,
      578,  579,  581,  583,  584,  585,  586,  588,  590,  590,
      590,  590,  590,  591,  591,  592,  593,  593,  593,  594,

      595,  596,  597,  598,  599,  600,  600,  601,  601,  601,
      601,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  603,  604,  605,  606,  607,  608,  609,  610,
      611,  612,  613,  614,  615,  616,  616,  617,  617,  617,
      617,  618,  618,  618,  618,  618,  618,  619,  620,  622,
      624,  626,  627,  628,  629,  630,  631,  633,  633,  634,
      636,  637,  637,  637,  637,  638,  639,  641,  642,  642,
      642,  642,  643,  643,  644,  645,  646,  646,  646,  647,
      649,  649,  650,  650,  651,  652,  653,  654,  656,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  659,

      661,  663,  664,  665,  666,  668,  670,  672,  673,  674,
      675,  676,  677,  678,  679,  680,  681,  682,  683,  685,
      687,  689,  690,  691,  692,  693,  694,  695,  696,  697,
      698,  699,  700,  701,  703,  705,  707,  708,  709,  710,
      711,  712,  712,  712,  713,  714,  714,  714,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  716,
      716,  717,  717,  718,  718,  719,  720,  721,  722,  723,
      724,  725,  726,  727,  728,  729,  729,  729,  730,  730,
      730,  731,  732,  733,  733,  735,  735,  735,  736,  736,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,

      737,  738,  739,  740,  741,  742,  743,  744,  745,  746,
      747,  748,  749,  750,  751,  752,  753,  754,  755,  756,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  758,  759,  760,  760,
      761,  763,  764,  764,  764,  765,  766,  767,  768,  769,
      770,  771,  772,  773,  774,  775,  775,  775,  776,  776,
      776,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      778,  778,  778,  779,  780,  781,  782,  783,  784,  785,
      787,  788,  789,  790,  791,  792,  793,  794,  795,  796,
      798,  799,  800,  800,  800,  800,  800,  800,  801,  801,

      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  803,  803,  804,  805,  806,
      807,  808,  809,  810,  811,  812,  813,  814,  815,  815,
      815,  816,  817,  817,  818,  818,  818,  819,  820,  820,
      820,  821,  822,  822,  824,  825,  826,  828,  830,  831,
      832,  834,  836,  837,  839,  840,  841,  843,  845,  846,
      847,  849,  851,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  853,  854,  855,  856,  857,  858,
      859,  860,  861,  862,  862,  862,  863,  864,  864,  865,
      866,  866,  866,  867,  868,  869,  869,  870,  870,  872,

      873,  874,  876,  878,  880,  881,  883,  884,  886,  887,
      888,  890,  892,  894,  895,  897,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  900,  901,  902,  903,
      904,  906,  907,  908,  908,  909,  909,  910,  911,  911,
      913,  914,  916,  918,  919,  921,  922,  924,  926,  927,
      927,  927,  927,  927,  927,  928,  928,  929,  930,  931,
      933,  934,  935,  935,  936,  937,  937,  938,  939,  941,
      942,  944,  946,  948,  949,  951,  953,  953,  953,  953,
      954,  954,  955,  956,  958,  959,  960,  960,  960,  960,
      960,  960,  961,  962,  964,  965,  967,  967,  967,  967,

      967,  968,  970,  970,  970,  970,  970,  971,  973,  975,
      975,  975,  976,  977,  977,  977,  977,  977,  978,  980,
      982,  982,  982,  982,  982,  982,  982,  982,  982,  982,
      983,  983,  983,  983,  984,  985,  985,  986,  986,  987,
      988,  989,  990,  990
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    3,    4,
        1,    1,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    1,    6,    7,    1,    1,    8,    1,    9,
       10,   11,    1,   12,    1,   13,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,   17,   18,
       19,   20,    1,   21,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       22,   23,   24,    1,   15,    1,   25,   26,   27,   28,

       29,   30,   31,   32,   33,   15,   15,   34,   35,   36,
       37,   38,   15,   39,   40,   41,   42,   43,   44,   45,
       46,   15,   47,    1,   48,   49,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[50] =
    {   0,
        1,    1,    2,    3,    1,    4,    1,    5,    6,    1,
        7,    1,    8,    4,    9,   10,    1,   11,    1,   11,
        1,    5,    1,    5,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    4,    4,   12
    } ;

static yyconst short int yy_base[906] =
    {   0,
        0,    1,    4,    5,    8,    9,   22,   23,   26,   27,
       40,   44,   48,   62,   85,    0,  133,  136,  139,  144,
      167,    0,  216,    0,  265,    0,  313,  359,  406,   14,
      454,    0,   66,   70,  147,  150,  318,  319,  500,  513,
      322,  333,  526,  573,  342,  350,  364,  370,  381,  384,
      458,  462,  475,  480,  353,  483,  486,  522,  494,  531,
      535,  544,  549,  567,  552,  568,  553,  581,  582,  589,
      590,  595,  596,  603,  604,  609,  623,  624,  627,  630,
     2337, 2338, 2334, 2338,   21,    0,   79, 2338,   46, 2338,
     2333, 2338,  146, 2338, 2332, 2338, 2319,  152, 2338, 2330,

     2338,  320, 2338, 2329,   36, 2338, 2316,  334, 2303,   50,
     2299,    0, 2338, 2338, 2317,   73,  335,    0, 2323, 2338,
     2322,    0,   26,  347,    0, 2338,  397, 2318, 2338, 2338,
      649,  643,  655,  530, 2338, 2338,    0,  536, 2338, 2338,
     2289,  313, 2286, 2283,  520, 2279, 2273, 2282,  632,  464,
       29,  350, 2338, 2338, 2280, 2284,    0,  497,    0,  550,
     2338, 2313,  601, 2338, 2338, 2338, 2312,  661,  667, 2338,
     2338,  516,  608,    0,  679, 2338, 2307,  622, 2338, 2338,
      691,  694, 2306,  629, 2338, 2338, 2338, 2338, 2309, 2338,
      666, 2306, 2338, 2307,  689, 2338, 2338, 2297,  700, 2338,

      695,  696,  531, 2293,  701, 2302,  388, 2338,  709, 2338,
     2303, 2338,  703,  703, 2338, 2302, 2338,  726,  705,    0,
     2338, 2301,  730,  707,    0,    0,  457, 2338,  711,  722,
        0,  509, 2338,  726,  741, 2338, 2300,  745,  741,    0,
        0,  682, 2338,  742, 2338, 2299,  764,  760,    0, 2338,
     2298,  782,  761,    0, 2338, 2297,  785,  780,    0, 2338,
     2296,  792,  787,    0, 2338, 2295,  799,  794,    0, 2294,
     2338, 2338, 2338,    0,  805,    0,    0,    0, 2274, 2273,
     2338, 2338, 2338,  557,  803, 2338, 2338, 2338, 2264,  639,
      799, 2256,    0, 2281, 2338, 2338, 2286,  796, 2286, 2285,

        0, 2284, 2283,    0,  463,  689,    0,  812, 2279, 2278,
     2338,    0,  816,  811, 2249, 2246, 2245,  784, 2239, 2233,
     2242,  816,    0,  144,  824, 2252, 2234, 2234, 2233, 2244,
      342, 2246, 2232, 2232, 2236,    0,  808,  795,  813, 2239,
     2234,  751, 2229, 2233, 2228, 2224,    0,  647,    0,    0,
        0,  843,  829,  846,    0,  838,    0, 2256, 2338,  664,
      657,  853, 2247, 2254, 2338,  849, 2338, 2338, 2248,  848,
      862, 2247,  866, 2246,  858, 2245,  868, 2241, 2338, 2338,
     2250, 2338,  835, 2249, 2250, 2247, 2246, 2338, 2338,  836,
     2204, 2219, 2222, 2221, 2216, 2215, 2197, 2213,  878, 2338,

     2338,  884,    0,  872,    0,    0,    0,  851, 2196, 2211,
     2214, 2213, 2208, 2207, 2189, 2205,    0,  890,    0,    0,
        0,  856, 2188, 2203, 2206, 2205, 2200, 2199, 2181, 2197,
      896,    0,  900,    0,    0,    0,  902,  905,  908,  911,
      914,  813,  849, 2222, 2338, 2193, 2195, 2338, 2211,  916,
     2196, 2178, 2178,  889, 2192, 2178, 2178, 2182,  920, 2167,
     2338,  923,  928, 2166, 2172, 2176, 2181, 2180, 2169, 2164,
     2165, 2171, 2162, 2174, 2165, 2168, 2170, 2163, 2158, 2160,
      932, 2338,  934,  935, 2338,  939,  942, 2338,  944,  948,
     2165, 2154, 2167, 2158, 2157, 2152, 2149, 2160, 2150, 2148,

     2155, 2144, 2157, 2148, 2147, 2142, 2139, 2150, 2140, 2138,
     2145, 2134, 2147, 2138, 2137, 2132, 2129, 2140, 2130, 2128,
     2155, 2154, 2160, 2159, 2129, 2114, 2120, 2124, 2129, 2114,
     2115, 2121, 2112, 2124, 2115,  948,  943, 2338, 2140, 2147,
     2146,  957,  959, 2144, 2107,  962, 2107, 2106, 2119, 2118,
     2113, 2108, 2113, 2111, 2102, 2101, 2103, 2104, 2093, 2089,
     2338,  964, 2092, 2099, 2101, 2092, 2099, 2102, 2084,  967,
     2096, 2084, 2083, 2090, 2092, 2083, 2090, 2093, 2075,  971,
     2087, 2075, 2074, 2081, 2083, 2074, 2081, 2084, 2066,  974,
     2078, 2066, 2094,  944, 2093,  969, 2099, 2338, 2098, 2338,

     2065, 2057, 2059,  981, 2059, 2072, 2067, 2062, 2067, 2065,
     2056,  976, 2080,  977, 2087, 2085, 2338,  989,  992, 2052,
     2057, 2045, 2044, 2057, 2056, 2041, 2052,  995, 2049, 2043,
     2075,  998, 1001, 1004, 2040, 2038, 1008, 2072, 2039, 2034,
     1011, 1014, 2039, 1017, 2034, 2032, 1020, 2066, 2033, 2028,
     1023, 1026, 2033, 1029, 2028, 2026, 1032, 2060, 2027, 2022,
     1035, 1038, 2026, 2008, 2025, 1041, 2023, 2011, 2024, 2021,
     2003, 2014, 1044, 1047, 2039, 2016, 2003, 1892, 1856, 1857,
     1050, 1795, 1053, 1810, 1772, 1775, 1056, 1059, 2338, 1062,
     1738, 1715, 1066, 1746, 1069, 1700, 1072, 1695, 1075, 1688,

     1684, 1078, 1719, 1081, 1684, 1084, 1645, 1087, 1315, 1312,
     1090, 1349, 1093, 1315, 1096, 1313, 1305, 1308, 1321, 1316,
     1303, 1327, 1099, 1312, 1338, 1337, 1312, 1299, 1321, 1307,
     1102, 1105, 1108, 1332, 1111, 1301, 1114, 1117, 1297, 1120,
     1299, 1123, 1126, 1295, 1129, 1297, 1132, 1135, 1293, 1299,
     1301, 1299, 1309, 1295, 1138, 1141, 1320, 1293, 1146, 1193,
     1293, 1196, 1199, 1317, 1202, 1203, 1205, 1208, 1211, 1201,
     1214, 1217, 1220, 1190, 1226, 1229,  950,  957,  952, 1232,
      913, 1239, 2338,    0, 1242,  913,  890,  867,  850,  848,
      829, 1245,  764, 1248,  757, 1251,  757,  732, 1254,  748,

     1257, 1260,  734,  703,  685,  668, 1263, 1266, 1269,  663,
      622, 1272, 1275,  574,  566,  548,  543, 1278, 1281, 1284,
      452,  439,  425, 1287,  378,  360,  326,  281, 1290, 1293,
      277, 1296,  109, 2338, 1299, 1302, 1305,   34, 1308, 1311,
     2338, 1314, 2338, 1355, 1367, 1379, 1391, 1403, 1415, 1427,
     1439, 1451, 1463, 1475, 1487, 1499, 1511, 1523, 1535, 1547,
     1559, 1571, 1583, 1595, 1607, 1619, 1631, 1643, 1655, 1667,
     1679, 1691, 1696, 1706, 1714, 1719, 1722, 1733, 1738, 1750,
     1762, 1774, 1786, 1798, 1810, 1822, 1834, 1846, 1858, 1870,
     1882, 1894, 1906, 1918, 1930, 1942, 1954, 1966, 1978, 1990,

     2002, 2014, 2026, 2037, 2048
    } ;

static yyconst short int yy_def[906] =
    {   0,
      844,  844,  845,  845,  846,  846,  847,  847,  848,  848,
      849,  849,  849,  849,  843,   15,  844,  844,  844,  844,
      843,   21,  843,   23,  843,   25,  844,  844,  843,   29,
      844,   31,  850,  850,  844,  844,  851,  851,  852,  852,
      853,  853,  844,  844,  844,  844,  854,  854,  855,  855,
      856,  856,  844,  844,  857,  857,  858,  858,  859,  859,
      860,  860,  861,  861,  862,  862,  863,  863,  864,  864,
      865,  865,  866,  866,  867,  867,  868,  868,  869,  869,
      843,  843,  870,  843,  843,  871,  872,  843,  871,  843,
      870,  843,  843,  843,  870,  843,  843,  843,  843,  870,

      843,  843,  843,  870,  843,  843,  843,  843,  843,  843,
      843,  873,  843,  843,  874,  843,  843,  875,  843,  843,
      843,  876,  843,  843,  877,  843,  843,  878,  843,  843,
      843,  843,  843,  843,  843,  843,  879,  843,  843,  843,
      879,  879,  879,  879,  879,  879,  879,  879,  131,  843,
      879,  843,  843,  843,  843,  843,  880,  881,  880,  880,
      843,  870,  843,  843,  843,  843,  870,  843,  843,  843,
      843,  843,  843,  882,  883,  843,  884,  843,  843,  843,
      843,  843,  885,  843,  843,  843,  843,  843,  870,  843,
      843,  843,  843,  870,  843,  843,  843,  886,  887,  843,

      886,  886,  843,  843,  843,  888,  889,  843,  888,  843,
      870,  843,  843,  843,  843,  870,  843,  843,  843,  214,
      843,  870,  843,  843,  214,  890,  891,  843,  890,  890,
      892,  893,  843,  892,  892,  843,  870,  843,  843,  214,
      894,  895,  843,  894,  843,  870,  843,  843,  214,  843,
      870,  843,  843,  214,  843,  870,  843,  843,  214,  843,
      870,  843,  843,  214,  843,  870,  843,  843,  214,  870,
      843,  843,  843,  871,  872,  871,  871,  871,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  873,  874,  843,  843,  843,  843,  843,  843,

      875,  843,  843,  876,  843,  843,  877,  843,  878,  878,
      843,  131,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  879,  843,  843,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  149,  843,  843,  843,  843,
      879,  843,  843,  843,  843,  843,  880,  881,  880,  880,
      880,  843,  843,  843,  882,  883,  882,  884,  843,  843,
      896,  843,  843,  885,  843,  843,  843,  843,  886,  886,
      887,  886,  887,  886,  886,  886,  843,  843,  843,  843,
      888,  843,  889,  888,  870,  888,  888,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,

      843,  843,  890,  891,  890,  890,  890,  890,  890,  890,
      890,  890,  890,  890,  890,  890,  892,  893,  892,  892,
      892,  892,  892,  892,  892,  892,  892,  892,  892,  892,
      843,  894,  895,  894,  894,  894,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  897,  843,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  843,  843,  879,  843,  843,
      843,  843,  843,  896,  843,  896,  843,  843,  843,  887,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,

      890,  890,  890,  890,  890,  890,  890,  890,  890,  890,
      892,  892,  892,  892,  892,  892,  892,  892,  892,  892,
      898,  899,  900,  901,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  902,  843,
      843,  843,  843,  903,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  843,  843,  879,  843,  843,
      843,  896,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  890,  890,  890,  890,  890,  890,  890,  890,
      890,  890,  892,  892,  892,  892,  892,  892,  892,  892,
      892,  892,  898,  843,  899,  843,  900,  843,  901,  843,

      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  902,  843,  843,  903,  843,  879,  843,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  843,  843,
      879,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  890,  890,  890,  890,  890,  890,  890,
      890,  890,  890,  892,  892,  892,  892,  892,  892,  892,
      892,  892,  892,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  904,  879,  879,  879,  879,  879,
      879,  879,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  890,  890,

      890,  890,  890,  890,  890,  890,  890,  892,  892,  892,
      892,  892,  892,  892,  892,  892,  843,  843,  843,  843,
      843,  843,  843,  843,  905,  904,  879,  879,  879,  879,
      879,  843,  879,  843,  843,  843,  843,  843,  843,  890,
      890,  890,  890,  890,  892,  892,  892,  892,  892,  843,
      843,  843,  843,  843,  843,  843,  905,  879,  843,  879,
      879,  843,  843,  843,  843,  843,  843,  843,  890,  890,
      890,  890,  892,  892,  892,  892,  843,  843,  843,  843,
      843,  879,  843,  879,  843,  879,  843,  843,  843,  843,
      843,  843,  890,  890,  892,  892,  843,  843,  843,  843,

      843,  879,  843,  843,  843,  843,  843,  890,  892,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  890,  892,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,    0,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,

      843,  843,  843,  843,  843
    } ;

static yyconst short int yy_nxt[2388] =
    {   0,
      843,   83,   83,   84,   84,   87,   87,   88,   88,   91,
       91,   92,   92,   85,   85,  843,  149,   89,   89,  843,
      150,   93,   93,   95,   95,   96,   96,  100,  100,  101,
      101,  272,   97,   97,  273,   98,   98,  305,  284,  102,
      102,  104,  305,  105,  106,  104,  285,  105,  106,  104,
      107,  110,  290,  108,  107,  151,  277,  108,  107,  278,
      291,  108,  109,  104,  335,  110,  109,  158,  341,  159,
      111,  158,  107,  159,   82,  108,  296,  297,   82,  160,
      276,  841,  270,  160,  111,   82,   83,   82,   84,   82,
       82,   82,   82,   82,   82,   82,   82,  112,   85,  112,

      112,   82,   82,   82,   82,   82,   82,   82,   82,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,   82,   82,   82,   83,  113,  114,   83,  113,  114,
       83,  115,  114,  838,  115,   83,   85,  114,   83,   85,
       84,   83,   85,   84,  459,  116,  279,   85,  116,  280,
       85,  116,  282,   85,  460,  283,  116,   82,   83,  117,
       84,   82,   82,   82,  118,   82,   82,  118,   82,   82,
       85,  118,  119,  120,   82,   82,   82,   82,  118,   82,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,

      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  121,   82,   82,   82,   83,   82,   84,
       82,   82,   82,  122,   82,   82,  122,  123,   82,   85,
      122,   82,  123,   82,   82,   82,   82,  122,   82,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,   82,   82,   82,   82,   83,  124,   84,   82,
       82,   82,   82,   82,   82,  125,  126,  125,   85,  125,
       82,  120,  125,   82,  125,   82,   82,   82,   82,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,

      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  121,   82,   82,   83,  127,   84,  836,  128,  162,
      162,   84,   84,  175,  129,  176,   85,  177,  834,  129,
      282,  163,  163,  283,  175,  178,  176,  298,  177,  164,
      164,  165,  165,   83,  287,   84,  178,  288,  327,  306,
      299,   83,  342,   84,  207,   85,  208,  328,  833,  130,
       83,  127,   84,   85,  128,  189,  209,  190,  179,  180,
      129,  189,   85,  190,  470,  129,  343,  191,  471,  179,
      180,  300,  194,  191,   84,  194,  192,   84,  187,  384,
      344,  385,  192,  300,  195,  832,  187,  195,  196,  308,

      197,  196,  309,  197,  831,  130,   82,   83,  131,  132,
      133,   82,   82,  134,  135,   82,  134,  136,  137,  138,
      137,  137,  136,  139,  136,   82,   82,  140,   82,   82,
      137,  137,  141,  137,  142,  137,  137,  137,  143,  137,
      137,  137,  144,  145,  137,  146,  147,  148,  137,  137,
      137,  137,   82,   82,  137,   83,  152,   84,  405,  199,
      270,  200,  153,  199,  829,  200,  339,   85,  201,  154,
      154,  202,  201,  828,  305,  202,   83,  203,   84,  305,
      155,   83,  203,   84,  207,  204,  208,  211,  205,  212,
      204,  340,  827,  205,  156,  216,  209,  217,  349,  213,

      154,  167,  168,  169,  168,  270,  218,  219,  170,  171,
      419,  172,  270,  173,  167,  168,  169,  168,  354,  354,
      354,  170,  171,  211,  172,  212,  173,   83,  181,  182,
      181,  183,  216,  377,  217,  213,  222,  322,  223,  184,
      322,  378,  214,  218,  219,  222,  324,  223,  224,  325,
      227,  220,  228,  232,  237,  233,  238,  224,  331,  284,
      350,  332,  229,  351,  225,  234,  239,  285,  227,  232,
      228,  233,  185,  186,   83,  181,  182,  181,  183,  826,
      229,  234,  237,  242,  238,  243,  184,  230,  235,  825,
      242,  246,  243,  247,  239,  244,  246,  251,  247,  252,

      824,  240,  244,  248,  251,  256,  252,  257,  248,  253,
      256,  272,  257,  823,  273,  249,  253,  258,  272,  185,
      186,  273,  258,  254,  261,  261,  262,  262,  266,  259,
      267,  266,  360,  267,  336,  361,  263,  263,  337,  272,
      268,  290,  366,  268,  264,  313,  313,  313,  349,  291,
      269,  312,  313,  313,  822,  270,  314,  313,  313,  313,
      485,  486,  314,  352,  352,  352,  481,  482,  314,  352,
      352,  352,  353,  338,  483,  315,  272,  316,  353,  367,
      357,  317,  270,  434,  270,  270,  318,  821,  319,  320,
      321,  306,  270,  362,  362,  362,  362,  362,  362,  272,

      817,  372,  273,  270,  363,  370,  375,  363,  374,  376,
      373,  272,  382,  388,  380,  400,  389,  272,  401,  386,
      273,  406,  387,  816,  407,  270,  270,  390,  399,  399,
      399,  391,  402,  402,  402,  300,  420,  392,  393,  421,
      394,  395,  396,  397,  815,  398,  408,  431,  431,  431,
      409,  272,  435,  342,  273,  436,  410,  411,  814,  412,
      413,  414,  415,  812,  416,  422,  437,  437,  437,  423,
      272,  272,  811,  273,  273,  424,  425,  343,  426,  427,
      428,  429,  810,  430,  438,  438,  438,  439,  439,  439,
      272,  344,  809,  273,  440,  440,  440,  272,  298,  808,

      273,  441,  441,  441,  272,  444,  276,  273,  270,  291,
      339,  299,  445,  285,  308,  339,  445,  309,  313,  313,
      313,  449,  454,  322,  450,  455,  322,  461,  462,  314,
      458,  354,  354,  354,  476,  340,  384,  463,  385,  357,
      340,  270,  300,  270,  464,  352,  352,  352,  354,  354,
      354,  270,  488,  489,  353,  362,  362,  362,  370,  521,
      522,  374,  487,  372,  807,  270,  363,  372,  370,  270,
      377,  374,  373,  405,  491,  270,  373,  492,  378,  490,
      399,  399,  399,  806,  270,  270,  402,  402,  402,  501,
      805,  419,  502,  270,  511,  523,  524,  512,  431,  431,

      431,  434,  804,  270,  437,  437,  437,  438,  438,  438,
      439,  439,  439,  440,  440,  440,  441,  441,  441,  461,
      462,  530,  536,  803,  536,  531,  461,  462,  802,  463,
      537,  541,  542,  538,  481,  482,  481,  482,  561,  562,
      800,  543,  485,  486,  483,  488,  489,  488,  489,  372,
      536,  270,  536,  612,  594,  487,  538,  598,  373,  615,
      461,  462,  461,  462,  619,  619,  619,  561,  562,  641,
      641,  641,  543,  651,  641,  651,  661,  641,  661,  596,
      799,  798,  600,  619,  619,  619,  612,  614,  797,  538,
      617,  674,  674,  674,  619,  619,  619,  683,  683,  683,

      687,  687,  687,  688,  688,  688,  690,  690,  690,  689,
      693,  693,  693,  641,  641,  641,  697,  697,  697,  699,
      690,  699,  702,  693,  702,  651,  641,  651,  706,  697,
      706,  708,  690,  708,  711,  693,  711,  661,  641,  661,
      715,  697,  715,  674,  674,  674,  683,  683,  683,  674,
      674,  674,  732,  732,  732,  683,  683,  683,  687,  687,
      687,  688,  688,  688,  690,  690,  690,  689,  693,  693,
      693,  737,  737,  737,  697,  697,  697,  699,  690,  699,
      702,  693,  702,  742,  737,  742,  706,  697,  706,  708,
      690,  708,  711,  693,  711,  747,  737,  747,  715,  697,

      715,  732,  732,  732,  762,  762,  762,  732,  732,  732,
      763,  763,  763,  765,  765,  765,  737,  737,  737,  767,
      767,  767,  769,  765,  769,  742,  737,  742,  771,  767,
      771,  773,  765,  773,  747,  737,  747,  775,  767,  775,
      762,  762,  762,  763,  763,  763,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  784,  783,
      323,  784,  783,  783,  783,  783,  783,  783,  783,  783,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  783,  783,  784,  785,  785,  785,  762,  762,

      762,  763,  763,  763,  765,  765,  765,  767,  767,  767,
      792,  792,  792,  769,  765,  769,  771,  767,  771,  794,
      792,  794,  773,  765,  773,  787,  795,  788,  775,  767,
      775,  796,  792,  796,  785,  785,  785,  793,  789,  791,
      790,  801,  801,  801,  785,  785,  785,  792,  792,  792,
      794,  792,  794,  796,  792,  796,  801,  801,  801,  801,
      801,  801,  813,  813,  813,  818,  818,  818,  819,  818,
      819,  820,  818,  820,  813,  813,  813,  813,  813,  813,
      818,  818,  818,  819,  818,  819,  820,  818,  820,  830,
      830,  830,  835,  835,  835,  830,  830,  830,  837,  837,

      837,  835,  835,  835,  839,  839,  839,  837,  837,  837,
      839,  839,  839,  842,  842,  842,  842,  842,  842,  764,
      786,  782,  843,  781,  780,  779,  778,  777,  776,  774,
      772,  770,  768,  766,  764,  761,  760,  759,  758,  843,
      725,  756,  755,  754,  753,  752,  751,  750,  840,  749,
      748,  712,  746,  745,  840,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   94,   94,   94,   94,   94,   94,   94,   94,   94,

       94,   94,   94,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  198,

      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  241,  241,  241,  241,  241,

      241,  241,  241,  241,  241,  241,  241,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  274,
      274,  744,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  275,  275,  275,  275,  275,  275,  275,  275,  275,

      275,  275,  275,  293,  293,  293,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  301,  743,
      301,  703,  301,  304,  741,  304,  740,  304,  307,  307,
      307,  739,  307,  310,  310,  738,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  323,  323,  323,  694,  323,
      347,  347,  347,  347,  347,  736,  347,  347,  347,  347,
      347,  347,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  355,  355,  735,  686,  355,  355,
      355,  355,  355,  355,  355,  355,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  358,  358,

      734,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      364,  364,  686,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  369,  369,  733,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      403,  403,  731,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  417,  417,  730,  417,  417,  417,

      417,  417,  417,  417,  417,  417,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  432,  432,
      729,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  595,  595,
      595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  597,

      597,  597,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  726,  728,
      727,  725,  724,  723,  726,  726,  726,  722,  726,  757,
      721,  720,  719,  718,  717,  757,  757,  757,  716,  757,
      714,  713,  712,  710,  709,  707,  705,  704,  703,  701,
      700,  698,  696,  695,  694,  692,  691,  686,  685,  684,
      682,  681,  680,  679,  678,  677,  676,  675,  617,  615,
      614,  673,  672,  671,  670,  669,  668,  667,  666,  665,

      664,  600,  598,  596,  594,  663,  662,  660,  659,  658,
      657,  656,  655,  654,  653,  652,  650,  649,  648,  647,
      646,  645,  644,  643,  642,  640,  639,  638,  637,  636,
      635,  634,  633,  632,  631,  630,  629,  628,  627,  626,
      625,  624,  623,  622,  621,  620,  618,  617,  615,  615,
      614,  611,  610,  609,  608,  607,  606,  605,  604,  603,
      602,  601,  600,  598,  596,  594,  592,  591,  590,  589,
      588,  587,  586,  585,  584,  583,  582,  581,  580,  579,
      578,  577,  576,  575,  574,  573,  572,  571,  570,  569,
      568,  567,  566,  565,  564,  563,  560,  559,  558,  557,

      556,  555,  554,  553,  552,  551,  550,  549,  548,  547,
      546,  545,  544,  539,  535,  534,  533,  532,  529,  528,
      527,  459,  526,  525,  444,  520,  519,  518,  517,  516,
      515,  514,  513,  510,  509,  508,  507,  506,  505,  504,
      503,  500,  499,  498,  497,  496,  495,  494,  493,  382,
      382,  271,  382,  382,  379,  370,  370,  370,  370,  365,
      487,  359,  480,  479,  346,  345,  478,  477,  475,  474,
      473,  472,  469,  468,  467,  466,  465,  458,  457,  456,
      453,  452,  451,  311,  311,  303,  302,  303,  302,  448,
      295,  447,  446,  443,  442,  271,  271,  271,  271,  271,

      271,  271,  271,  271,  271,  382,  379,  370,  271,  368,
      271,  365,  359,  271,  271,  346,  345,  335,  334,  333,
      330,  329,  326,  311,  303,  302,  295,  292,  289,  286,
      271,  271,  281,  271,  271,  271,  843,   81,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843
    } ;

static yyconst short int yy_chk[2388] =
    {   0,
        0,    1,    2,    1,    2,    3,    4,    3,    4,    5,
        6,    5,    6,    1,    2,    0,   30,    3,    4,    0,
       30,    5,    6,    7,    8,    7,    8,    9,   10,    9,
       10,   85,    7,    8,   85,    7,    8,  123,  105,    9,
       10,   11,  123,   11,   11,   12,  105,   12,   12,   13,
       11,   13,  110,   11,   12,   30,   89,   12,   13,   89,
      110,   13,   11,   14,  151,   14,   12,   33,  151,   33,
       13,   34,   14,   34,   33,   14,  116,  116,   34,   33,
       87,  838,   87,   34,   14,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   17,   17,   17,   18,   18,   18,
       19,   17,   19,  833,   18,   20,   17,   20,   35,   18,
       35,   36,   19,   36,  324,   17,   93,   20,   18,   93,
       35,   19,   98,   36,  324,   98,   20,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   27,   27,   27,  831,   27,   37,
       38,   37,   38,   41,   27,   41,   27,   41,  828,   27,
      102,   37,   38,  102,   42,   41,   42,  117,   42,   37,
       38,   37,   38,   45,  108,   45,   42,  108,  142,  124,
      117,   46,  152,   46,   55,   45,   55,  142,  827,   27,
       28,   28,   28,   46,   28,   47,   55,   47,   41,   41,
       28,   48,   28,   48,  331,   28,  152,   47,  331,   42,
       42,  117,   49,   48,   49,   50,   47,   50,   45,  207,
      152,  207,   48,  124,   49,  826,   46,   50,   49,  127,

       49,   50,  127,   50,  825,   28,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   31,   31,   31,  227,   51,
      227,   51,   31,   52,  823,   52,  150,   31,   51,   31,
       31,   51,   52,  822,  305,   52,   53,   53,   53,  305,
       31,   54,   54,   54,   56,   53,   56,   57,   53,   57,
       54,  150,  821,   54,   31,   59,   56,   59,  158,   57,

       31,   39,   39,   39,   39,  158,   59,   59,   39,   39,
      232,   39,  232,   39,   40,   40,   40,   40,  172,  172,
      172,   40,   40,   58,   40,   58,   40,   43,   43,   43,
       43,   43,   60,  203,   60,   58,   61,  134,   61,   43,
      134,  203,   58,   60,   60,   62,  138,   62,   61,  138,
       63,   60,   63,   65,   67,   65,   67,   62,  145,  284,
      160,  145,   63,  160,   62,   65,   67,  284,   64,   66,
       64,   66,   43,   43,   44,   44,   44,   44,   44,  817,
       64,   66,   68,   69,   68,   69,   44,   64,   66,  816,
       70,   71,   70,   71,   68,   69,   72,   73,   72,   73,

      815,   68,   70,   71,   74,   75,   74,   75,   72,   73,
       76,  163,   76,  814,  163,   72,   74,   75,  173,   44,
       44,  173,   76,   74,   77,   78,   77,   78,   79,   76,
       79,   80,  178,   80,  149,  178,   77,   78,  149,  184,
       79,  290,  184,   80,   78,  132,  132,  132,  348,  290,
       80,  131,  131,  131,  811,  348,  132,  133,  133,  133,
      361,  361,  131,  168,  168,  168,  360,  360,  133,  169,
      169,  169,  168,  149,  360,  131,  191,  131,  169,  191,
      175,  131,  175,  242,  175,  242,  131,  810,  131,  131,
      131,  306,  175,  181,  181,  181,  182,  182,  182,  195,

      806,  199,  195,  199,  181,  201,  202,  182,  201,  202,
      199,  205,  209,  213,  205,  219,  213,  224,  219,  209,
      224,  229,  209,  805,  229,  175,  175,  214,  218,  218,
      218,  214,  223,  223,  223,  306,  234,  214,  214,  234,
      214,  214,  214,  214,  804,  214,  230,  238,  238,  238,
      230,  239,  244,  342,  239,  244,  230,  230,  803,  230,
      230,  230,  230,  800,  230,  235,  247,  247,  247,  235,
      248,  253,  798,  248,  253,  235,  235,  342,  235,  235,
      235,  235,  797,  235,  252,  252,  252,  257,  257,  257,
      258,  342,  795,  258,  262,  262,  262,  263,  298,  793,

      263,  267,  267,  267,  268,  285,  275,  268,  275,  291,
      337,  298,  291,  285,  308,  339,  285,  308,  313,  313,
      313,  314,  318,  322,  314,  318,  322,  325,  325,  313,
      338,  353,  353,  353,  338,  337,  383,  325,  383,  356,
      339,  356,  298,  356,  325,  352,  352,  352,  354,  354,
      354,  356,  366,  366,  352,  362,  362,  362,  370,  442,
      442,  370,  366,  371,  791,  371,  362,  373,  375,  373,
      377,  375,  371,  404,  390,  404,  373,  390,  377,  373,
      399,  399,  399,  790,  356,  356,  402,  402,  402,  408,
      789,  418,  408,  418,  422,  443,  443,  422,  431,  431,

      431,  433,  788,  433,  437,  437,  437,  438,  438,  438,
      439,  439,  439,  440,  440,  440,  441,  441,  441,  450,
      450,  454,  459,  787,  459,  454,  462,  462,  786,  450,
      459,  463,  463,  459,  481,  481,  483,  483,  484,  484,
      781,  463,  486,  486,  483,  487,  487,  489,  489,  490,
      536,  490,  536,  537,  594,  487,  537,  594,  490,  542,
      542,  542,  543,  543,  546,  546,  546,  562,  562,  570,
      570,  570,  543,  580,  580,  580,  590,  590,  590,  596,
      779,  778,  596,  604,  604,  604,  612,  614,  777,  612,
      614,  618,  618,  618,  619,  619,  619,  628,  628,  628,

      632,  632,  632,  633,  633,  633,  634,  634,  634,  633,
      637,  637,  637,  641,  641,  641,  642,  642,  642,  644,
      644,  644,  647,  647,  647,  651,  651,  651,  652,  652,
      652,  654,  654,  654,  657,  657,  657,  661,  661,  661,
      662,  662,  662,  666,  666,  666,  673,  673,  673,  674,
      674,  674,  681,  681,  681,  683,  683,  683,  687,  687,
      687,  688,  688,  688,  690,  690,  690,  688,  693,  693,
      693,  695,  695,  695,  697,  697,  697,  699,  699,  699,
      702,  702,  702,  704,  704,  704,  706,  706,  706,  708,
      708,  708,  711,  711,  711,  713,  713,  713,  715,  715,

      715,  723,  723,  723,  731,  731,  731,  732,  732,  732,
      733,  733,  733,  735,  735,  735,  737,  737,  737,  738,
      738,  738,  740,  740,  740,  742,  742,  742,  743,  743,
      743,  745,  745,  745,  747,  747,  747,  748,  748,  748,
      755,  755,  755,  756,  756,  756,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  760,  760,  760,  762,  762,

      762,  763,  763,  763,  765,  765,  765,  767,  767,  767,
      768,  768,  768,  769,  769,  769,  771,  771,  771,  772,
      772,  772,  773,  773,  773,  763,  774,  763,  775,  775,
      775,  776,  776,  776,  780,  780,  780,  770,  763,  766,
      763,  782,  782,  782,  785,  785,  785,  792,  792,  792,
      794,  794,  794,  796,  796,  796,  799,  799,  799,  801,
      801,  801,  802,  802,  802,  807,  807,  807,  808,  808,
      808,  809,  809,  809,  812,  812,  812,  813,  813,  813,
      818,  818,  818,  819,  819,  819,  820,  820,  820,  824,
      824,  824,  829,  829,  829,  830,  830,  830,  832,  832,

      832,  835,  835,  835,  836,  836,  836,  837,  837,  837,
      839,  839,  839,  840,  840,  840,  842,  842,  842,  764,
      761,  758,  757,  754,  753,  752,  751,  750,  749,  746,
      744,  741,  739,  736,  734,  730,  729,  728,  727,  726,
      725,  724,  722,  721,  720,  719,  718,  717,  836,  716,
      714,  712,  710,  709,  839,  844,  844,  844,  844,  844,
      844,  844,  844,  844,  844,  844,  844,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  846,
      846,  846,  846,  846,  846,  846,  846,  846,  846,  846,
      846,  847,  847,  847,  847,  847,  847,  847,  847,  847,

      847,  847,  847,  848,  848,  848,  848,  848,  848,  848,
      848,  848,  848,  848,  848,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  856,

      856,  856,  856,  856,  856,  856,  856,  856,  856,  856,
      856,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  858,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  859,  859,  859,  859,  859,
      859,  859,  859,  859,  859,  859,  859,  860,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  860,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  862,  862,  862,  862,  862,  862,  862,  862,  862,
      862,  862,  862,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  864,  864,  864,  864,  864,

      864,  864,  864,  864,  864,  864,  864,  865,  865,  865,
      865,  865,  865,  865,  865,  865,  865,  865,  865,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  867,  867,  867,  867,  867,  867,  867,  867,  867,
      867,  867,  867,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  871,
      871,  707,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  872,  872,  872,  872,  872,  872,  872,  872,  872,

      872,  872,  872,  873,  873,  873,  874,  874,  874,  874,
      874,  874,  874,  874,  874,  874,  874,  874,  875,  705,
      875,  703,  875,  876,  701,  876,  700,  876,  877,  877,
      877,  698,  877,  878,  878,  696,  878,  878,  878,  878,
      878,  878,  878,  878,  878,  879,  879,  879,  694,  879,
      880,  880,  880,  880,  880,  692,  880,  880,  880,  880,
      880,  880,  881,  881,  881,  881,  881,  881,  881,  881,
      881,  881,  881,  881,  882,  882,  691,  686,  882,  882,
      882,  882,  882,  882,  882,  882,  883,  883,  883,  883,
      883,  883,  883,  883,  883,  883,  883,  883,  884,  884,

      685,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      885,  885,  684,  885,  885,  885,  885,  885,  885,  885,
      885,  885,  886,  886,  682,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  889,  889,
      889,  889,  889,  889,  889,  889,  889,  889,  889,  889,
      890,  890,  680,  890,  890,  890,  890,  890,  890,  890,
      890,  890,  891,  891,  891,  891,  891,  891,  891,  891,
      891,  891,  891,  891,  892,  892,  679,  892,  892,  892,

      892,  892,  892,  892,  892,  892,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  894,  894,
      678,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  895,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  899,  899,
      899,  899,  899,  899,  899,  899,  899,  899,  899,  899,
      900,  900,  900,  900,  900,  900,  900,  900,  900,  900,

      900,  900,  901,  901,  901,  901,  901,  901,  901,  901,
      901,  901,  901,  901,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  903,  903,  903,  903,
      903,  903,  903,  903,  903,  903,  903,  903,  904,  677,
      676,  675,  672,  671,  904,  904,  904,  670,  904,  905,
      669,  668,  667,  665,  664,  905,  905,  905,  663,  905,
      660,  659,  658,  656,  655,  653,  650,  649,  648,  646,
      645,  643,  640,  639,  638,  636,  635,  631,  630,  629,
      627,  626,  625,  624,  623,  622,  621,  620,  616,  615,
      613,  611,  610,  609,  608,  607,  606,  605,  603,  602,

      601,  599,  597,  595,  593,  592,  591,  589,  588,  587,
      586,  585,  584,  583,  582,  581,  579,  578,  577,  576,
      575,  574,  573,  572,  571,  569,  568,  567,  566,  565,
      564,  563,  560,  559,  558,  557,  556,  555,  554,  553,
      552,  551,  550,  549,  548,  547,  545,  544,  541,  540,
      539,  535,  534,  533,  532,  531,  530,  529,  528,  527,
      526,  525,  524,  523,  522,  521,  520,  519,  518,  517,
      516,  515,  514,  513,  512,  511,  510,  509,  508,  507,
      506,  505,  504,  503,  502,  501,  500,  499,  498,  497,
      496,  495,  494,  493,  492,  491,  480,  479,  478,  477,

      476,  475,  474,  473,  472,  471,  470,  469,  468,  467,
      466,  465,  464,  460,  458,  457,  456,  455,  453,  452,
      451,  449,  447,  446,  444,  430,  429,  428,  427,  426,
      425,  424,  423,  416,  415,  414,  413,  412,  411,  410,
      409,  398,  397,  396,  395,  394,  393,  392,  391,  387,
      386,  385,  384,  381,  378,  376,  374,  372,  369,  364,
      363,  358,  346,  345,  344,  343,  341,  340,  335,  334,
      333,  332,  330,  329,  328,  327,  326,  321,  320,  319,
      317,  316,  315,  310,  309,  303,  302,  300,  299,  297,
      294,  292,  289,  280,  279,  270,  266,  261,  256,  251,

      246,  237,  222,  216,  211,  206,  204,  198,  194,  192,
      189,  183,  177,  167,  162,  156,  155,  148,  147,  146,
      144,  143,  141,  128,  121,  119,  115,  111,  109,  107,
      104,  100,   97,   95,   91,   83,   81,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
yy_lp = yy_full_lp; /* restore orig. accepting pos. */ \
yy_state_ptr = yy_full_state; /* restore orig. state */ \
yy_current_state = *yy_state_ptr; /* restore curr. state */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "cpp.l"
#define INITIAL 0
/*************************************************************************

    CPP lexer

    This file is derived from the DOC++ source by Roland Wunderling
    and Malte Zoeckler.

    Better handling of typedefs, linenumbers, formatting, comments
    and various other improvements was made. Still a lot to be done
    to handle all modern C++ constructs. <bjarke@viksoe.dk>

 *************************************************************************/
#line 16 "cpp.l"

#pragma code_seg( "MISC" )

/*
 *	Includes
 */

#include "CppTypes.h"


/* -----------------------------------------------------------------
 *
 *	statics
 */
static const char*	inputString ;
static int		inputPosition ;
static int		lastContext ;
static int		lastCContext ;
static int		lastTContext;
static int		protection   = GLOB ;
static int		bracketCount = 0 ;
static int		sharpCount   = 0 ;
static Entry*		current_root = 0 ;
static Entry*		global_root  = 0 ;
static Entry*		current      = 0 ;

static int		yyLineNr = 1 ;
static char		yyFileName[264] ;
static McString*	currentString ;

static void msg( const char* str, const char* str2=NULL )
{
#ifdef _DEBUG
	if( verb )
	{
		printf( "%s(%d):\t%s", yyFileName, yyLineNr, str ) ;
		if( str2 ) printf( "%s", str2 ) ;
		printf( "\n" ) ;
	}
#endif
}

static void lineCount()
{
	for( const char* c = yytext ; *c ; ++c )
		yyLineNr += (*c == '\n') ;
}


static void addType( Entry* current )
{
   if( !current->name.empty() ) {
      if( !current->type.empty() ) current->type += ' ' ;
      current->type += current->name ;
      current->name.clear() ;
   }
   if( !current->args.empty() ) {
      if( !current->type.empty() ) current->type += ' ' ;
      current->type += current->args ;
      current->args.clear() ;
   }
}

/* -----------------------------------------------------------------
 */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result = yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
	int c = 0;
	while( c < max_size && inputString[inputPosition] )
	{
		*buf = inputString[inputPosition++] ;
		c++; buf++;
	}
	return c;
}

#define Cxx_Memo 1

#define SubDoc 2

#define SubDocComment 3

#define SubDocCppComment 4

#define Doc 5

#define VerbDoc 6

#define Define 7

#define DefineEnd 8

#define DefineEnded 9

#define ClassName 10

#define TypedefName 11

#define Bases 12

#define NextSemi 13

#define FindMembers 14

#define Function 15

#define Operator 16

#define Throws 17

#define Array 18

#define Round 19

#define Curly 20

#define SkipCurly 21

#define SkipInits 22

#define SkipCPP 23

#define Sharp 24

#define Comment 25

#define SkipComment 26

#define SkipCxxComment 27

#define CppDoc 28

#define CppMemo 29

#define See 30

#define Args 31

#define Type 32

#define Author 33

#define Name 34

#define Version 35

#define Param 36

#define Memo 37

#define Return 38

#define Exception 39

#line 1492 "lex.cpp.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplusx
//#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 142 "cpp.l"


#line 1649 "lex.cpp.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 844 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 843 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yy_looking_for_trail_begin )
					{
					if ( yy_act == yy_looking_for_trail_begin )
						{
						yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					yy_full_match = yy_cp;
					yy_full_state = yy_state_ptr;
					yy_full_lp = yy_lp;
					break;
					}
				++yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 144 "cpp.l"
{ 
					  yyLineNr = 1 ; 
					  int i;
					  for( i = 0 ; yytext[i+1] != 6 ; i++ )
						yyFileName[i] = yytext[i+1] ;
					  yyFileName[i] = 0 ;
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 152 "cpp.l"
{ BEGIN( FindMembers ) ; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 153 "cpp.l"

	YY_BREAK
case 4:
YY_RULE_SETUP
#line 154 "cpp.l"
{ BEGIN( SkipCurly ) ; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 156 "cpp.l"
{ 
					  current->protection = protection = PUBL ;
					  lineCount() ;
					}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 160 "cpp.l"
{ 
					  current->protection = protection = PROT ;
					  lineCount() ;
					}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 164 "cpp.l"
{ 
					  current->protection = protection = PRIV ;
					  lineCount() ;
					}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 169 "cpp.l"
{
					  msg( "found class    ", current->name ) ;
					  current->section = TYPEDEF_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef class" ;
					  current->name.clear() ;
					  lineCount() ;
					}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 178 "cpp.l"
{
					  msg( "found struct   ", current->name ) ;
					  current->section = STRUCT_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef struct" ;
					  current->name.clear() ;
					  lastTContext = 1;
					  lineCount() ;
				  	  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 188 "cpp.l"
{
					  msg( "found struct   ", current->name ) ;
					  current->section = STRUCT_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef struct" ;
					  current->name.clear() ;
					  lineCount() ;
					  current->file = yyFileName ;
					  current->startLine = yyLineNr ;
					  lastTContext = 1;
				  	  BEGIN( Curly ) ;
					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 201 "cpp.l"
{
					  msg( "found enum     ", current->name ) ;
					  current->section = ENUM_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef enum" ;
					  current->name.clear() ;
					  lineCount() ;
				  	  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 211 "cpp.l"
{
					  msg( "found union    ", current->name ) ;
					  current->section = UNION_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef union" ;
					  current->name.clear() ;
					  lineCount() ;
				  	  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 221 "cpp.l"
{ 
					  current->section = CLASS_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "interface" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 230 "cpp.l"
{ 
					  current->section = CLASS_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "class" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 239 "cpp.l"
{ 
					  msg( "found struct    ", current->name ) ;
					  current->section = STRUCT_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "struct" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 249 "cpp.l"
{ 
					  msg( "found enum    ", current->name ) ;
					  current->section = ENUM_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "enum" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 259 "cpp.l"
{ 
					  current->section = UNION_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "union" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 18:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 269 "cpp.l"
{ 
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  current->name  = yytext ;
					  BEGIN( Operator ) ;
					}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 275 "cpp.l"
{ 
					  current->name += yytext ;
					  current->lineNo = yyLineNr;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 281 "cpp.l"
{ 
					  addType( current ) ;
				          current->lineNo = yyLineNr;
					  current->name  = yytext ;
					}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 286 "cpp.l"
{ 
					  addType( current ) ;
				          current->lineNo = yyLineNr;
					  current->name  = yytext ;
					}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 292 "cpp.l"
{ lineCount() ; BEGIN( SkipCPP ) ; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 293 "cpp.l"

	YY_BREAK
case 24:
YY_RULE_SETUP
#line 294 "cpp.l"

	YY_BREAK
case 25:
YY_RULE_SETUP
#line 295 "cpp.l"
{ yyLineNr++ ; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 296 "cpp.l"
{ 
					  yyLineNr++ ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 301 "cpp.l"
{ 
					  current->type = "using " ;
					  BEGIN( Define ) ;
					}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 305 "cpp.l"
{ 
					  current->type = "#define" ;
					  BEGIN( Define ) ;
					}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 309 "cpp.l"
{ 
					  current->name = yytext ;
					  current->lineNo = yyLineNr;
					  BEGIN( DefineEnd ) ;
					}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 314 "cpp.l"
{ BEGIN( DefineEnd ) ; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 315 "cpp.l"
{ 
					  current->args = yytext ;
					  BEGIN( DefineEnded ) ;
					}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 319 "cpp.l"
{ yyLineNr++ ; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 320 "cpp.l"
{ yyLineNr++ ; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 321 "cpp.l"
{ 
					  if( current->done == onlyDocs )
					  {
					    current->section = MACRO_SEC ;
					    current->lineNo = yyLineNr;
					    msg( "found macro    ", current->name ) ;
					    current_root->addSubEntry( current ) ;
					    current = new Entry ;
					    current->protection = protection ;
					  }
					  else
					  {
					    current->name.clear() ;
					    current->type.clear() ;
					  }
					  yyLineNr++ ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 340 "cpp.l"
{ 
					  current->name += yytext ; 
					  current->lineNo = yyLineNr;
					}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 345 "cpp.l"
{ 
					  BEGIN( FindMembers ) ;
					  if( current->lineNo == 0 ) current->lineNo = yyLineNr + 1;
					  msg( "found variable ", current->name ) ;
					  if( current->done == onlyDocs )
					  {
					    if( current->section != TYPEDEF_SEC )
						    current->section = VARIABLE_SEC ;
					    current_root->addSubEntry( current ) ;
					    current = new Entry ;
					    current->protection = protection ;
					  }
					  else
					  {
					    current->section = EMPTY_SEC ;
					    current->name.clear() ;
					    current->type.clear() ;
					    current->args.clear() ;
					  }
					  if( *yytext == '=' )
					    BEGIN( NextSemi ) ;
					}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 368 "cpp.l"
{ 
					  current->args += yytext ;
					  sharpCount=1;
					  BEGIN( Array ) ;
					}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 373 "cpp.l"
{ 
					  current->args += *yytext ;
					  if( --sharpCount<=0 )
						BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 378 "cpp.l"
{ 
					  current->args += *yytext ;
					  sharpCount++;	
					}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 382 "cpp.l"
{ current->args += *yytext ; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 384 "cpp.l"
{ 
					  addType( current ) ;
					  current->type += *yytext ;
					  sharpCount=1;
					  BEGIN( Sharp ) ;
					}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 390 "cpp.l"
{ 
					  current->type += *yytext ;
					  if (--sharpCount<=0)
	                                     BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 395 "cpp.l"
{ 
					  current->type += *yytext ;
					  sharpCount++;	
					}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 399 "cpp.l"
{ current->type += *yytext ; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 401 "cpp.l"
{ current->program += yytext ; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 402 "cpp.l"
{ current->program += yytext ; ++yyLineNr ; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 403 "cpp.l"
{ current->program += yytext ; ++yyLineNr ; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 404 "cpp.l"
{ current->program += yytext ; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 405 "cpp.l"
{ 
					  current->program += yytext ;
					  lastContext = Curly ;
					  BEGIN( Comment ) ;
					}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 410 "cpp.l"
{ 
					  current->program += yytext ;
					  ++yyLineNr ;
					  lastContext = Curly ;
					  BEGIN( Comment ) ;
					}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 416 "cpp.l"
{ 
					  current->program += yytext ;
					  ++bracketCount ;
					}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 420 "cpp.l"
{ 
					  if( bracketCount > 0 )
					  {
						current->program += yytext ;
						--bracketCount ;
					  }
					  else
					  {
					    current->args += " {...}";

					    if( lastTContext ) 
					    {
					      BEGIN( TypedefName ) ;
					    }
					    else if( current->done == onlyDocs )
					    {
					      int section = current->section;
					      current_root->addSubEntry( current ) ;
					      current = new Entry ;
					      current->protection = protection ;
					      if( section == CLASS_SEC ) current->protection = GLOB ;
					      BEGIN( NextSemi ) ;
					    }
					    else
					    {
					      current->name.clear() ;
					      current->type.clear() ;
					      current->args.clear() ;
					      current->section = EMPTY_SEC ;
					      BEGIN( NextSemi ) ;
					    }
					  }
					}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 453 "cpp.l"
{ 
					  current->program += yytext ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 457 "cpp.l"
{ current->program += yytext ; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 459 "cpp.l"
{ 
					  current->args = yytext ;
					  BEGIN( Round ) ;
					}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 463 "cpp.l"
{ 
					  current->args += *yytext ;
					  ++bracketCount ;
					}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 467 "cpp.l"
{ 
					  current->args += *yytext ;
					  if( bracketCount > 0 )
					    --bracketCount ;
					  else
					    BEGIN( Function ) ;
					}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 474 "cpp.l"
{ lineCount() ; current->args += ", " ; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 475 "cpp.l"
{ lineCount() ; current->args += " " ; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 476 "cpp.l"
{ current->args += *yytext ; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 478 "cpp.l"
{ lineCount() ; current->args += " const" ; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 480 "cpp.l"
{ 
					  current->args += " throw(" ;
					  lineCount() ;
				  	  BEGIN( Round ) ;
					}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 485 "cpp.l"
{ 
					  current->type += current->name ;
					  current->name  = current->args ;
					  current->args  = yytext ;
					  current->lineNo = yyLineNr;
					  BEGIN( Round ) ;
					}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 492 "cpp.l"
{ 
					  msg( "found method   ", current->name ) ;
					  if( current->done == onlyDocs )
					  {
					    current->section = FUNCTION_SEC ;
					    current_root->addSubEntry(current);
					    current = new Entry ;
					    current->protection = protection ;
					  }
					  else
					  {
					    current->name.clear() ;
					    current->type.clear() ;
					    current->args.clear() ;
					  }
					  if( *yytext == '{' )
					      BEGIN( SkipCurly ) ;
					  else if( *yytext == ':' )
					      BEGIN( SkipInits ) ;
					  else
					      BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 515 "cpp.l"
{ BEGIN( SkipCurly ) ; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 517 "cpp.l"
{ lineCount() ; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 518 "cpp.l"

	YY_BREAK
case 68:
YY_RULE_SETUP
#line 519 "cpp.l"
{ ++bracketCount ; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 520 "cpp.l"
{ 
					  if( bracketCount > 0 )
					    --bracketCount ;
					  else
					    BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 527 "cpp.l"
{ 
					  if( current->done == onlyDocs )
					  {
					    current->section = VARIABLE_SEC ;
					    current_root->addSubEntry(current);
					    current = new Entry ;
					    current->protection = protection ;
					  }
					  else
					  {
					    current->section = EMPTY_SEC ;
					    current->type.clear() ;
					    current->name.clear() ;
					    current->args.clear() ;
					  }
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 544 "cpp.l"
{ 
					  if( !current->type.empty() && !current->name.empty() ) current->type += " " ;
					  current->type += current->name ;
				  	  current->name = yytext ;
					  current->lineNo = yyLineNr;
					}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 550 "cpp.l"
{ 
					  current->args = " :" ;
					  BEGIN( Bases ) ;
					}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 554 "cpp.l"
{ 
					  current->file = yyFileName ;
				  	  if( current->lineNo == 0 ) current->lineNo = yyLineNr;
					  current->startLine = yyLineNr ;
				  	  msg( "found class    ", current->name ) ;
				  	  BEGIN( Curly ) ;
					}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 561 "cpp.l"
{ 
					  current->extends.append( new McString(yytext) ) ;
					  if( !current->args.empty() ) current->args += " " ;
					  current->args += yytext ;
					}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 566 "cpp.l"
{ current->args += ',' ; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 568 "cpp.l"
{ 
					  current->program += yytext ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 572 "cpp.l"
{ current->program += yytext ; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 573 "cpp.l"
{ 
					  current->program += yytext ;
					  BEGIN( Curly ) ;
					}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 578 "cpp.l"
{ 
					  if( !current->type.empty() && !current->name.empty() ) current->type += " " ;
					  current->type += current->name ;
				  	  current->name = yytext ;
					  current->lineNo = yyLineNr;
		
				          lastTContext = 0;
					  msg( "found typedef  ", current->name ) ;

				          int section = current->section;
					  current_root->addSubEntry( current ) ;
					  current = new Entry ;
					  current->protection = protection ;
					  if( section == CLASS_SEC ) current->protection = GLOB ;

					  BEGIN( NextSemi ) ;
					}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 596 "cpp.l"
{
				          lastTContext = 0;
					  msg( "found typedef  ", current->name ) ;

					  int section = current->section;
					  current_root->addSubEntry( current ) ;
					  current = new Entry ;
					  current->protection = protection ;
					  if( section == CLASS_SEC ) current->protection = GLOB ;

				          if( *yytext == ',' )
					    BEGIN( NextSemi ) ;
					  else
					    BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 613 "cpp.l"
{ 
					  lineCount() ;
					  if( current->doc.length() > 0
						  ||  current->memo.length() > 0 )
					  {
						msg( "found explicit entry" ) ;
						current->lineNo = yyLineNr;
						current_root->addSubEntry( current ) ;
						current = new Entry ;
					  }
					  current->done = onlyDocs ;
					  BEGIN( Cxx_Memo ) ;
					}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 626 "cpp.l"
{ current->memo += yytext ; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 627 "cpp.l"
{ 
					  yyLineNr++ ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 632 "cpp.l"
{ lineCount() ; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 633 "cpp.l"
{ lineCount() ; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 634 "cpp.l"
{ 
					  lineCount() ;
					  lastCContext = YY_START ;
					  BEGIN( SkipComment ) ;
					}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 639 "cpp.l"
{ 
					  lineCount() ;
					  if( current->doc.length() > 0
					      ||  current->memo.length() > 0 )
					  {
					     msg( "found explicit entry" ) ;
					     current->lineNo = yyLineNr;
					     current_root->addSubEntry( current ) ;
					     current = new Entry ;
					  }
					  current->done = onlyDocs ;
					  BEGIN( Doc ) ;
					}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 652 "cpp.l"
{ yyLineNr++; BEGIN( FindMembers ) ; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 653 "cpp.l"
{ 
					  current->doc += yytext ;
					  BEGIN( VerbDoc ) ;
					}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 657 "cpp.l"
{ 
					  current->doc += '\n' ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 661 "cpp.l"
{ 
					  current->doc += yytext ;
					  BEGIN( Doc ) ;
					}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 665 "cpp.l"

	YY_BREAK
case 93:
YY_RULE_SETUP
#line 666 "cpp.l"
{ 
					  if( !current->doc.empty() ) current->doc += '\n' ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 670 "cpp.l"
{ current->doc += *yytext ; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 671 "cpp.l"
{ current->doc += yytext ; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 672 "cpp.l"
{ current->doc += yytext ; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 673 "cpp.l"
{ BEGIN( FindMembers ) ; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 675 "cpp.l"
{ 
					  lineCount() ;
					  current->file = yyFileName ;
					  if( current->lineNo == 0 ) current->lineNo = yyLineNr;
					  current->startLine = yyLineNr ;
					  BEGIN( SubDoc ) ;
					}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 682 "cpp.l"
{ 
					  current->program += yytext ;
					  BEGIN( SubDocComment ) ;
					}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 686 "cpp.l"
{ 
					  current->program += yytext ;
					  BEGIN( SubDocCppComment ) ;
					}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 690 "cpp.l"
{ current->program += *yytext ; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 691 "cpp.l"
{ 
					  current->program += *yytext ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 695 "cpp.l"
{ 
					  lineCount() ;
					  current->program += yytext ;
					  ++bracketCount ;
					}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 700 "cpp.l"
{ 
					  lineCount() ;
					  if( bracketCount > 0 )
					  {
					    current->program += yytext ;
					    --bracketCount ;
					  }
					  else
					  {
					    msg( "found explicit subentry" ) ;
					              current->lineNo = yyLineNr;
					    current_root->addSubEntry( current ) ;
					    current = new Entry ;
					    current->protection = protection ;
					    BEGIN( FindMembers ) ;
					  }
					}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 718 "cpp.l"
{ current->program += yytext ; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 719 "cpp.l"
{ current->program += yytext ; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 720 "cpp.l"
{ current->program += yytext ; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 721 "cpp.l"
{ 
					  current->program += yytext ;
					  ++yyLineNr ;
					}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 725 "cpp.l"
{ 
					  current->program += yytext ;
					  BEGIN( SubDoc ) ;
					}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 730 "cpp.l"
{ current->program += yytext ; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 731 "cpp.l"
{ 
					  current->program += yytext ;
					  ++yyLineNr ;
					  BEGIN( SubDoc ) ;
					}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 737 "cpp.l"
{ 
					  current->memo += yytext ;
					  current->doc  += yytext ; 
					}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 741 "cpp.l"
{ 
					  BEGIN( CppDoc ) ;
                      			  lineCount();
					  current->doc  += yytext ; 
					}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 746 "cpp.l"
{ 
					  current->doc  += *yytext ; 
	                  		  lineCount();
					}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 750 "cpp.l"
{ current->memo += yytext ; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 751 "cpp.l"
{ current->doc  += yytext ; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 753 "cpp.l"
{
					  lineCount() ;
					  current->see.append( new McString ) ;
					  BEGIN( See ) ;
					}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 758 "cpp.l"
{
					  lineCount() ;
					  BEGIN( Author ) ; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 761 "cpp.l"
{
					  lineCount() ;
					  BEGIN( Version ) ; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 764 "cpp.l"
{
					  lineCount() ;
					  current->param.append( new McString  ) ;
					  BEGIN( Param ) ;
					}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 769 "cpp.l"
{
					  lineCount() ;
					  current->exception.append( new McString ) ;
					  BEGIN( Exception ) ;
					}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 774 "cpp.l"
{
					  lineCount() ;
					  BEGIN( Return ) ; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 777 "cpp.l"
{
					  current->name.clear() ;
					  current->section = MANUAL_SEC ;
					  BEGIN( Name ) ;
					}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 782 "cpp.l"
{
					  lineCount() ;
					  current->memo.clear() ;
					  BEGIN( Memo ) ;
					}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 788 "cpp.l"
{
					  lineCount() ;
					  current->type.clear() ;
					  BEGIN( Type ) ;
					}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 793 "cpp.l"
{
					  lineCount() ;
					  current->args.clear() ;
					  BEGIN( Args ) ;
					}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 799 "cpp.l"
{ current->name = yytext ; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 800 "cpp.l"
{ ++yyLineNr ; BEGIN( CppDoc ) ; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 802 "cpp.l"
{ current->type = yytext ; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 803 "cpp.l"
{ ++yyLineNr ; BEGIN( CppDoc ) ; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 805 "cpp.l"
{ current->args = yytext ; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 806 "cpp.l"
{ ++yyLineNr ; BEGIN( CppDoc ) ; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 808 "cpp.l"
{ current->author += *yytext ; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 809 "cpp.l"
{ current->version += *yytext ; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 810 "cpp.l"
{ *(current->see.last()) += *yytext ; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 811 "cpp.l"
{ *(current->param.last()) += *yytext ; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 812 "cpp.l"
{ *(current->exception.last()) += *yytext ; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 813 "cpp.l"
{ current->memo += *yytext ; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 814 "cpp.l"
{ current->retrn += *yytext ; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 816 "cpp.l"
{ current->author  += '\n' ; lineCount() ; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 817 "cpp.l"
{ current->version += '\n' ; lineCount() ; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 818 "cpp.l"
{ *(current->see.last()) += '\n' ; lineCount() ; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 819 "cpp.l"
{ *(current->param.last()) += '\n' ; lineCount() ; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 820 "cpp.l"
{ *(current->exception.last()) += '\n' ; lineCount() ; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 821 "cpp.l"
{ current->memo += *yytext ; lineCount() ; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 822 "cpp.l"
{ current->retrn += *yytext ; lineCount() ; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 824 "cpp.l"

	YY_BREAK
case 148:
YY_RULE_SETUP
#line 825 "cpp.l"
{ yyLineNr++ ; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 826 "cpp.l"
{ 
					  lastCContext = YY_START ;
					  BEGIN( SkipComment ) ;
					}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 830 "cpp.l"

	YY_BREAK
case 151:
YY_RULE_SETUP
#line 831 "cpp.l"
{ BEGIN( lastCContext ) ; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 832 "cpp.l"
{ 
					  lastCContext = YY_START ;
					  BEGIN( SkipCxxComment ) ;
					}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 836 "cpp.l"
{ 
					  yyLineNr++ ;
					  BEGIN( lastCContext ) ;
					}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 840 "cpp.l"
ECHO;
	YY_BREAK
#line 3030 "lex.cpp.c"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Cxx_Memo):
			case YY_STATE_EOF(SubDoc):
			case YY_STATE_EOF(SubDocComment):
			case YY_STATE_EOF(SubDocCppComment):
			case YY_STATE_EOF(Doc):
			case YY_STATE_EOF(VerbDoc):
			case YY_STATE_EOF(Define):
			case YY_STATE_EOF(DefineEnd):
			case YY_STATE_EOF(DefineEnded):
			case YY_STATE_EOF(ClassName):
			case YY_STATE_EOF(TypedefName):
			case YY_STATE_EOF(Bases):
			case YY_STATE_EOF(NextSemi):
			case YY_STATE_EOF(FindMembers):
			case YY_STATE_EOF(Function):
			case YY_STATE_EOF(Operator):
			case YY_STATE_EOF(Throws):
			case YY_STATE_EOF(Array):
			case YY_STATE_EOF(Round):
			case YY_STATE_EOF(Curly):
			case YY_STATE_EOF(SkipCurly):
			case YY_STATE_EOF(SkipInits):
			case YY_STATE_EOF(SkipCPP):
			case YY_STATE_EOF(Sharp):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(SkipComment):
			case YY_STATE_EOF(SkipCxxComment):
			case YY_STATE_EOF(CppDoc):
			case YY_STATE_EOF(CppMemo):
			case YY_STATE_EOF(See):
			case YY_STATE_EOF(Args):
			case YY_STATE_EOF(Type):
			case YY_STATE_EOF(Author):
			case YY_STATE_EOF(Name):
			case YY_STATE_EOF(Version):
			case YY_STATE_EOF(Param):
			case YY_STATE_EOF(Memo):
			case YY_STATE_EOF(Return):
			case YY_STATE_EOF(Exception):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 844 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 844 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 843);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 840 "cpp.l"



/*@ ----------------------------------------------------------------------------
 */
void parseDoc(Entry* rt)
{
	if( rt->doc.length() )
	{
		Entry* _current = current ;
		rt->program = rt->doc ;
		rt->doc.clear() ;
		inputString   = rt->program ;
		inputPosition = 0 ;
		current = rt ;
		cpprestart( cppin ) ;
		if( rt->memo.length() > 0 )
			BEGIN( CppDoc ) ;
		else
			BEGIN( CppMemo ) ;
		cpplex() ;
		rt->program.clear() ;
		if( rt->memo.length()+2 >= rt->doc.length() )
			rt->doc.clear() ;
		current = _current ;
	}
}

void callcpplex()
{
	cpplex() ;
	if( (current->name.length()  ||  current->program.length()  ||
		current->memo.length()  ||  current->doc.length() )
		&&  current->done == onlyDocs )
	{
		if( current->section == EMPTY_SEC )
			current->section = VARIABLE_SEC ;
		current_root->addSubEntry( current ) ;
		current = new Entry ;
		current->protection = protection ;
	}
}

void parseCppClasses(Entry* rt)
{
    if( rt == 0 ) return ;
    for( Entry *cr = rt->sub ; cr ; cr = cr->next )
    {
		if( cr->program.length() > 0 )
		{
#ifdef _DEBUG
			if (verb)
				printf("Scanning substuff of (%s) %s\n",
				   (const char *)cr->type,
				   (const char *)cr->name);
#endif
			inputString   = cr->program ;
			inputPosition = 0 ;
			cpprestart( cppin ) ;
			BEGIN( FindMembers ) ;
			current_root = cr ;
			strcpy( yyFileName, cr->file ) ;
			yyLineNr = cr->startLine ;
			current->type.clear() ;
			current->name.clear() ;
			current->args.clear() ;
			current->section = EMPTY_SEC ;
			if( cr->section == CLASS_SEC )
				current->protection = protection = PRIV ;
			else if( cr->section == STRUCT_SEC )
				current->protection = protection = PUBL ;
			else if( cr->section == UNION_SEC )
				current->protection = protection = PUBL ;
			else
				current->protection = protection = GLOB ;
			callcpplex() ;
			cr->program.clear() ;
		}
		parseCppClasses( cr ) ;
    }
    parseDoc( rt ) ;
}

void parseCpp(Entry* rt)
{
	current_root  = rt ;
	global_root   = rt ;
	protection    = GLOB ;
	current       = new Entry ;
	yyLineNr      = 1 ;
	yyFileName[0] = '\0' ;
	bracketCount  = 0 ;
	sharpCount    = 0 ;
	lastTContext  = 0 ;

	inputString   = rt->program ;
	inputPosition = 0 ;
	cpprestart( cppin ) ;
	BEGIN( FindMembers ) ;
	callcpplex() ;
	rt->program.clear() ;
	parseCppClasses( rt ) ;

	delete current;
}

extern "C" {
	int	cppwrap()	{ return 1 ; }
};
