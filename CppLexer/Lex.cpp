#define yy_create_buffer cpp_create_buffer
#define yy_delete_buffer cpp_delete_buffer
#define yy_scan_buffer cpp_scan_buffer
#define yy_scan_string cpp_scan_string
#define yy_scan_bytes cpp_scan_bytes
#define yy_flex_debug cpp_flex_debug
#define yy_init_buffer cpp_init_buffer
#define yy_flush_buffer cpp_flush_buffer
#define yy_load_buffer_state cpp_load_buffer_state
#define yy_switch_to_buffer cpp_switch_to_buffer
#define yyin cppin
#define yyleng cppleng
#define yylex cpplex
#define yyout cppout
#define yyrestart cpprestart
#define yytext cpptext
#define yywrap cppwrap

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

typedef int FILE; //#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplusx
#define __cplusplusx
#endif
#endif


#ifdef __cplusplus

//#include <stdlib.h>
//#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
//#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 148
#define YY_END_OF_BUFFER 149
static yyconst short int yy_accept[758] =
    {   0,
        0,    0,   89,   89,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    5,    5,    0,    0,   22,   22,    0,    0,
        0,    0,    0,    0,   53,   53,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  125,  125,
      123,  123,    0,    0,  121,  121,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  149,  141,  141,  142,
      141,   89,   89,   90,   89,  102,  102,  101,  100,  102,
      102,  102,   98,  102,   37,   38,   42,  141,  141,  141,

       78,   79,   77,   80,   86,   87,  141,   81,   82,  141,
      141,    2,    4,    5,  142,  141,   43,   62,   44,   24,
      141,   49,   45,   24,   24,   24,   24,   24,   24,   24,
       24,    5,   25,  141,   70,   71,  141,  141,   22,   22,
       22,   22,   48,   48,   48,   47,   46,   67,   67,   66,
       66,   63,   64,   65,   67,   53,   53,   60,   61,   61,
       58,   59,  141,  142,  141,  141,   75,   76,   72,   28,
      141,  141,  141,  141,  141,   52,   52,   52,   51,   50,
       84,   84,   83,   84,   84,  141,  141,  141,  141,  142,
      141,  108,  108,  108,  108,  108,  106,  106,  106,  107,

      106,  106,  129,  129,  136,  129,  129,  125,  125,  126,
      125,  125,  123,  123,  124,  123,  123,  127,  127,  134,
      127,  127,  121,  121,  122,  121,  128,  128,  135,  128,
      128,  130,  130,  137,  130,  130,  132,  132,  139,  132,
      132,  133,  133,  140,  133,  133,  131,  131,  138,  131,
      131,    0,    1,  143,  146,   89,   89,    1,   89,   89,
      101,  101,  105,  104,  103,    0,    0,    0,    0,   37,
        0,   39,   40,    0,    0,   79,   80,   78,   79,   80,
       86,   87,    0,   81,    0,    0,    0,    3,    5,    0,
        0,   43,   24,  143,  146,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,    5,   25,    0,    0,
        0,    0,    0,    0,    0,    0,   22,   22,    1,   22,
       22,   66,   65,   65,   53,   53,    1,    0,   55,   56,
      146,    0,    0,    0,   74,  146,   26,    0,   27,   31,
        0,    0,    0,    0,    0,    0,    0,    1,    0,   85,
      143,  146,  144,  145,    0,  147,    0,    1,  147,  143,
      146,  110,  110,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  107,  109,  109,  136,  125,  125,    1,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      123,  123,    1,  123,  123,  123,  123,  123,  123,  123,

      123,  123,  123,  123,  134,  121,  121,    1,  121,  121,
      135,  137,  139,  140,  138,  101,   96,    0,    0,   41,
        0,    0,   95,    0,   88,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,    0,    0,    0,
        0,   56,   57,   56,    0,   54,    0,   73,    0,   26,
       31,    0,   32,   85,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,    0,    0,   95,   94,   93,    0,
       91,   88,    0,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  111,
        0,    0,  125,  125,  125,  125,  125,  125,  125,  111,
      125,  125,  123,  123,  123,  123,  123,  123,  123,  111,
      123,  123,    0,    0,    0,    0,   92,    0,   24,   18,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
        0,   30,   29,   68,    0,    0,    0,  120,    0,    0,
      118,  117,    0,    0,  111,  119,    0,  120,  125,  125,
      118,  117,  125,  125,  111,  119,  125,  120,  123,  123,
      118,  117,  123,  123,  111,  119,  123,    0,    0,   16,

       24,   24,   24,   24,   24,   24,   24,   24,   19,   35,
        0,   68,    0,   69,   34,   33,  120,    0,    0,  118,
      117,  114,    0,  119,    0,  120,  125,  125,  118,  117,
      114,  125,  119,  125,  120,  123,  123,  118,  117,  114,
      123,  119,  123,    0,    0,    0,    0,   23,   24,   24,
       24,   24,    6,   17,   24,    0,  112,    0,  114,  116,
        0,  112,  125,  114,  116,  125,  112,  123,  114,  116,
      123,    0,    0,   20,   23,   24,   24,    8,   24,    6,
        0,   36,  112,    0,  116,  113,  112,  125,  116,  113,
      112,  123,  116,  113,    0,    0,   24,   21,   21,    8,

       24,    0,    0,    0,    0,    0,  113,  125,  113,  123,
      113,    0,    0,   15,    7,    0,    0,    0,    0,  115,
      115,  115,    0,    0,    7,    0,    0,    0,    0,  115,
      115,  115,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   12,   13,    0,    0,    0,   99,    9,   13,    0,
       14,    0,   10,   11,   97,   11,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    3,    4,
        1,    1,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    1,    6,    7,    1,    1,    8,    1,    9,
       10,   11,    1,   12,    1,   13,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,   17,   18,
       19,   20,    1,   21,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       22,   23,   24,    1,   15,    1,   25,   26,   27,   28,

       29,   30,   31,   32,   33,   15,   15,   34,   35,   36,
       37,   38,   15,   39,   40,   41,   42,   43,   44,   45,
       46,   15,   47,    1,   48,   49,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[50] =
    {   0,
        1,    1,    2,    3,    4,    5,    1,    6,    7,    1,
        8,    1,    9,    5,   10,   11,    1,   12,    1,   12,
        1,    6,    1,    6,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,    5,    5,   13
    } ;

static yyconst short int yy_base[815] =
    {   0,
        0,    1,    4,    5,   18,   22,   26,   40,   63,    0,
      111,  114,  117,  122,  145,    0,  194,    0,  243,    0,
      291,  337,  384,    9,  432,    0,   44,   48,  125,  128,
      296,  297,  478,  491,  300,  311,  504,  551,  320,  328,
      342,  348,  331,  366,  436,  443,  451,  456,  464,  500,
      362,  470,  511,  515,  518,  524,  519,  545,  544,  558,
      559,  566,  567,  572,  580,  581,  586,  587,  600,  601,
      605,  609,  614,  622,  623,  627, 2206, 2207, 2203, 2207,
       20,    0,    9, 2207,   24, 2207, 2202,   14, 2207, 2189,
       45, 2176,   36, 2172,    0, 2207, 2207, 2190,   56,  313,

        0, 2196, 2207, 2195,    0,  121,  306,    0, 2207,  138,
     2191, 2207, 2207,  323,  536,  630,  366, 2207, 2207,    0,
      367, 2207, 2207, 2162,  327, 2159, 2156,  340, 2152, 2146,
      321,  635,  448,  618, 2207, 2207, 2154, 2158,    0,  435,
        0,  428, 2207, 2187,  475, 2207, 2207, 2207, 2186,  648,
      651, 2207, 2207,  494,  513,    0,  660, 2207, 2181,  553,
     2207, 2207,  664,  667, 2180,  564, 2207, 2207, 2207, 2207,
      606,  539,  636,  509,  501, 2207, 2183,  647, 2207, 2207,
     2173,  671, 2207,  665,  666, 2169,  672, 2178,  467, 2207,
      680, 2207, 2179, 2207,  674,  684, 2207, 2178, 2207,  692,

      676,    0, 2207, 2177,  695,  678,    0,    0,  608, 2207,
      690,  703,    0,  701, 2207,  700,  722, 2207, 2176,  712,
      707,    0,    0,  708, 2207,  715, 2207, 2175,  730,  726,
        0, 2207, 2174,  745,  741,    0, 2207, 2173,  763,  742,
        0, 2207, 2172,  766,  761,    0, 2207, 2171,  773,  768,
        0, 2170, 2207, 2207, 2207,    0,  779,    0,    0,    0,
      132,  777, 2207, 2207, 2207, 2142,  320,  773, 2134,    0,
     2159, 2207, 2207, 2164,  770, 2164, 2163,    0, 2162, 2161,
        0,  295,  488,    0,  786, 2157, 2156, 2207,  790,  793,
      788,  792,    0, 2150, 2146, 2134, 2116, 2116, 2115, 2126,

      559, 2128, 2114, 2114, 2118, 2117,  805,  787,  629, 2120,
     2114,  798, 2110, 2114, 2109, 2105,    0,  804,    0,    0,
        0,  817,  823,  827,    0,  831,    0, 2137, 2207,  837,
     2138,  839, 2127, 2134, 2207,  842,    0,  846, 2207,    0,
      699,  785, 2103, 2108, 2126,  841,  855, 2125,  856, 2124,
      850, 2123, 2207, 2207, 2129, 2207,  832, 2128, 2129, 2126,
     2125, 2207, 2207,  823, 2083, 2098, 2101, 2100, 2095, 2094,
     2076, 2092,  868, 2207, 2207,  871,    0,  878,    0,    0,
        0,  842, 2075, 2090, 2093, 2092, 2087, 2086, 2068, 2084,
        0,  881,    0,    0,    0,  847, 2067, 2082, 2085, 2084,

     2079, 2078, 2060, 2076,  887,    0,  891,    0,    0,    0,
      893,  896,  899,  902,  905, 2101, 2207, 2072, 2074, 2207,
     2090, 2086,  908, 2095,    7, 2058, 2062, 2067, 2066, 2055,
     2050, 2051, 2057, 2048, 2060, 2051, 2051, 2056,  854, 2045,
     2047,  727, 2207,  912, 2079, 2207,  913, 2207,  819,    0,
        0, 2054, 2053,  910, 2049, 2038, 2051, 2042, 2041, 2036,
     2033, 2044, 2034, 2032, 2039, 2028, 2041, 2032, 2031, 2026,
     2023, 2034, 2024, 2022, 2029, 2018, 2031, 2022, 2021, 2016,
     2013, 2024, 2014, 2012, 2017, 2002,  921,  914, 2207, 2044,
     2207, 2044,  750, 2006,  926, 2006, 2005, 2018, 2017, 2012,

     2007, 2012, 2010, 2001, 2005, 2002, 2004, 2004, 1991, 1987,
     1997, 2000, 1988, 1995, 1997, 1988, 1995, 1998, 1980,  929,
     1992, 1980, 1979, 1986, 1988, 1979, 1986, 1989, 1971,  932,
     1983, 1971, 1970, 1977, 1979, 1970, 1977, 1980, 1962,  935,
     1974, 1962, 1965, 1957,  930, 1995, 2207,  938,  942,  945,
     1962, 1967, 1955, 1954, 1966, 1962, 1947, 1958,  950, 1983,
     1949, 2207, 2207,  953,  956, 1954, 1951,  959, 1940, 1938,
      963, 1972, 1939, 1934,  966,  969, 1939,  972, 1932, 1927,
      975, 1961, 1928, 1923,  978,  981, 1889,  984, 1872, 1819,
      987, 1828, 1770, 1714,  990,  993, 1707, 1680, 1674,  996,

     1698, 1654, 1634, 1628, 1612, 1632,  999, 1616, 1002, 1640,
     1612, 1005, 1008, 2207, 2207, 2207, 1011, 1561, 1256, 1015,
     1293, 1018, 1259, 1021, 1257, 1024, 1254, 1250, 1027, 1287,
     1030, 1253, 1033, 1251, 1036, 1248, 1245, 1039, 1282, 1042,
     1248, 1045, 1246, 1239, 1242, 1048, 1277, 1276, 1251, 1237,
     1259, 1245, 1051, 1054, 1057, 1270, 1063, 1239, 1066, 1069,
     1234, 1072, 1236, 1075, 1078, 1232, 1081, 1234, 1084, 1087,
     1230, 1236, 1238, 2207, 1260, 1157, 1092, 1139, 1156, 1142,
     1145, 1170, 1148, 1027, 1151, 1154, 1157, 1026, 1160, 1163,
     1166,  914, 1172, 1175,  904,  895, 1178, 2207,    0, 1185,

      872,  843,  833,  827,  827,  818, 1188,  802, 1191,  775,
     1194,  779,  744, 1197, 1200,  749,  717,  706,  703, 1203,
     1206, 1209,  668,  632, 1212,  606,  571,  555,  540, 1215,
     1218, 1221,  444,  429,  412, 1224,  416,  347,  322,  288,
     1227, 1230, 1233,  255, 1236,   87, 2207, 1239, 1242, 1245,
     1248,    7, 1251, 1254, 2207, 1257, 2207, 1298, 1311, 1324,
     1337, 1350, 1363, 1376, 1389, 1402, 1415, 1428, 1441, 1454,
     1467, 1480, 1493, 1506, 1519, 1532, 1545, 1558, 1571, 1584,
     1597, 1610, 1615, 1626, 1634, 1639, 1642, 1654, 1659, 1672,
     1685, 1698, 1711, 1724, 1737, 1750, 1763, 1776, 1789, 1802,

     1815, 1828, 1841, 1854, 1867, 1880, 1893, 1906, 1919, 1932,
     1945, 1957, 1969, 1981
    } ;

static yyconst short int yy_def[815] =
    {   0,
      758,  758,  759,  759,  760,  760,  760,  760,  757,    9,
      758,  758,  758,  758,  757,   15,  757,   17,  757,   19,
      758,  758,  757,   23,  758,   25,  761,  761,  758,  758,
      762,  762,  763,  763,  764,  764,  758,  758,  758,  758,
      758,  758,  758,  758,  765,  765,  766,  766,  758,  758,
      767,  767,  768,  768,  769,  769,  770,  770,  771,  771,
      772,  772,  773,  773,  774,  774,  775,  775,  776,  776,
      777,  777,  778,  778,  779,  779,  757,  757,  780,  757,
      757,  781,  782,  757,  781,  757,  780,  757,  757,  757,
      757,  757,  757,  757,  783,  757,  757,  784,  757,  757,

      785,  757,  757,  757,  786,  757,  757,  787,  757,  757,
      788,  757,  757,  757,  757,  757,  757,  757,  757,  789,
      757,  757,  757,  789,  789,  789,  789,  789,  789,  789,
      789,  757,  757,  757,  757,  757,  757,  757,  790,  791,
      790,  790,  757,  780,  757,  757,  757,  757,  780,  757,
      757,  757,  757,  757,  757,  792,  793,  757,  794,  757,
      757,  757,  757,  757,  795,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  780,  757,  757,  757,
      796,  797,  757,  796,  796,  757,  757,  798,  799,  757,
      798,  757,  780,  757,  757,  757,  757,  780,  757,  757,

      757,  196,  757,  780,  757,  757,  196,  800,  801,  757,
      800,  800,  802,  803,  757,  802,  802,  757,  780,  757,
      757,  196,  804,  805,  757,  804,  757,  780,  757,  757,
      196,  757,  780,  757,  757,  196,  757,  780,  757,  757,
      196,  757,  780,  757,  757,  196,  757,  780,  757,  757,
      196,  780,  757,  757,  757,  781,  782,  781,  781,  781,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  783,
      784,  757,  757,  757,  757,  757,  757,  785,  757,  757,
      786,  757,  757,  787,  757,  788,  788,  757,  757,  757,
      757,  757,  789,  757,  806,  789,  789,  789,  789,  789,

      789,  789,  789,  789,  789,  789,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  790,  791,  790,  790,
      790,  757,  757,  757,  792,  793,  792,  794,  757,  757,
      807,  757,  757,  795,  757,  757,  808,  757,  757,  809,
      757,  757,  757,  757,  796,  796,  797,  796,  797,  796,
      796,  796,  757,  757,  798,  757,  799,  798,  780,  798,
      798,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  800,  801,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      802,  803,  802,  802,  802,  802,  802,  802,  802,  802,

      802,  802,  802,  802,  757,  804,  805,  804,  804,  804,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  806,  757,  810,  757,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  757,  757,  757,
      757,  757,  757,  757,  807,  757,  757,  757,  757,  808,
      809,  757,  757,  797,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  757,  757,  757,  757,  757,  810,
      757,  757,  811,  789,  789,  789,  789,  789,  789,  789,

      789,  789,  789,  789,  789,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  757,  757,  757,  811,  757,  811,  789,  757,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  757,  757,  812,

      813,  789,  789,  789,  789,  789,  789,  789,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  757,  757,  812,  814,  813,  789,  789,
      789,  789,  789,  812,  789,  757,  757,  757,  757,  757,
      757,  800,  800,  800,  800,  800,  802,  802,  802,  802,
      802,  757,  757,  757,  814,  789,  757,  789,  789,  757,
      757,  757,  757,  757,  757,  757,  800,  800,  800,  800,
      802,  802,  802,  802,  757,  757,  789,  757,  789,  757,

      789,  757,  757,  757,  757,  757,  757,  800,  800,  802,
      802,  757,  757,  757,  789,  757,  757,  757,  757,  757,
      800,  802,  757,  757,  757,  757,  757,  757,  757,  757,
      800,  802,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,    0,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,

      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757
    } ;

static yyconst short int yy_nxt[2257] =
    {   0,
      757,   79,   79,   80,   80,   83,   83,   84,   84,  492,
      258,  132,  252,   81,   81,  133,  261,   85,   85,   87,
      493,   88,   89,   87,  262,   88,   89,   87,   90,   93,
      254,   91,   90,  255,  259,   91,   90,  260,  267,   91,
       92,   87,  757,   93,   92,  140,  268,  141,   94,  140,
       90,  141,   78,   91,  755,  264,   78,  142,  265,  273,
      274,  142,   94,   78,   79,   78,   80,   78,   78,   78,
       78,   78,   78,   78,   78,   95,   81,   95,   95,   78,
       78,   78,   78,   78,   78,   78,   78,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,

       95,   95,   95,   95,   95,   95,   95,   95,   95,   78,
       78,   78,   79,   96,   97,   79,   96,   97,   79,   98,
       97,  752,   98,   79,   81,   97,   79,   81,   80,   79,
       81,   80,  282,   99,  261,   81,   99,  282,   81,   99,
      285,   81,  262,  286,   99,   78,   79,  100,   80,   78,
       78,   78,  101,   78,   78,  101,   78,   78,   81,  101,
      102,  103,   78,   78,   78,   78,  101,   78,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  104,   78,   78,   78,   79,   78,   80,   78,   78,

       78,  105,   78,   78,  105,  106,   78,   81,  105,   78,
      106,   78,   78,   78,   78,  105,   78,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
       78,   78,   78,   78,   79,  107,   80,   78,   78,   78,
       78,   78,   78,  108,  109,  108,   81,  108,   78,  103,
      108,   78,  108,   78,   78,   78,   78,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  104,
       78,   78,   79,  110,   80,  750,  111,  144,  144,   80,

       80,  157,  112,  158,   81,  159,  282,  112,  283,  145,
      145,  282,  157,  160,  158,  275,  159,  146,  146,  147,
      147,   79,  267,   80,  160,  289,  290,  290,  276,   79,
      268,   80,   79,   81,   80,  747,  291,  113,   79,  110,
       80,   81,  111,   79,  173,  170,  161,  162,  112,   79,
       81,  170,  277,  112,  746,  171,  305,  161,  162,  277,
      306,  171,  297,  189,  172,  190,  169,   79,  174,   80,
      172,  298,  175,  292,  169,  191,  292,  294,  301,  173,
      295,  302,  745,  113,   78,   79,  114,  115,  116,   78,
       78,  117,  118,   78,  117,  119,  120,  121,  120,  120,

      119,  122,  119,   78,   78,  123,   78,   78,  120,  120,
      124,  120,  125,  120,  120,  120,  126,  120,  120,  120,
      127,  128,  120,  129,  130,  131,  120,  120,  120,  120,
       78,   78,  120,   79,  134,   80,  319,  177,  320,   80,
      135,  321,  744,  252,  177,   81,   80,  136,  136,  178,
      309,  741,  182,  179,  183,  180,  178,  182,  137,  183,
      179,  184,  180,  740,  185,   79,  184,   80,  358,  185,
      359,  189,  138,  190,  186,  310,  311,  187,  136,  149,
      150,  151,  150,  191,  739,  254,  152,  153,  255,  154,
      283,  155,  149,  150,  151,  150,  324,  324,  324,  152,

      153,   79,  154,   80,  155,   79,  163,  164,  163,  165,
      186,  341,  193,  187,  194,  342,  193,  166,  194,  198,
      204,  199,  205,  254,  195,  198,  255,  199,  195,  343,
      200,  201,  206,  344,  277,  196,  200,  201,  290,  290,
      290,  338,  339,  338,  202,  209,  204,  210,  205,  291,
      167,  168,   79,  163,  164,  163,  165,  211,  206,  209,
      214,  210,  215,  330,  166,  207,  331,  214,  219,  215,
      220,  211,  216,  219,  254,  220,  738,  336,  212,  216,
      221,  224,  224,  225,  225,  221,  217,  228,  228,  229,
      229,  431,  222,  226,  226,  432,  737,  167,  168,  230,

      230,  233,  233,  234,  234,  736,  238,  231,  239,  379,
      238,  252,  239,  235,  235,  243,  254,  244,  240,  337,
      312,  236,  240,  243,  248,  244,  249,  245,  248,  241,
      249,  309,  290,  290,  290,  245,  250,  307,  290,  290,
      250,  308,  246,  291,  313,  735,  254,  251,  291,  340,
      322,  322,  322,  322,  322,  322,  310,  254,  314,  323,
      255,  327,  323,  252,  734,  252,  332,  332,  332,  332,
      332,  332,  348,  252,  252,  346,  351,  333,  350,  352,
      333,  349,  254,  356,  362,  354,  374,  363,  254,  375,
      360,  255,  733,  361,  373,  373,  373,  376,  376,  376,

      380,  341,  393,  381,  252,  342,  252,  252,  364,  408,
      394,  252,  365,  395,  405,  405,  405,  254,  366,  367,
      255,  368,  369,  370,  371,  409,  372,  382,  410,  442,
      443,  383,  411,  411,  411,  729,  254,  384,  385,  255,
      386,  387,  388,  389,  728,  390,  396,  412,  412,  412,
      397,  254,  254,  547,  255,  255,  398,  399,  727,  400,
      401,  402,  403,  548,  404,  413,  413,  413,  414,  414,
      414,  254,  275,  726,  255,  415,  415,  415,  254,  416,
      258,  255,  252,  268,  724,  276,  417,  262,  285,  309,
      417,  286,  289,  290,  290,  290,  290,  290,  421,  292,

      312,  422,  292,  291,  723,  319,  291,  307,  290,  290,
      722,  308,  252,  343,  310,  311,  277,  344,  291,  322,
      322,  322,  448,  449,  313,  324,  324,  324,  323,  324,
      324,  324,  327,  358,  252,  359,  252,  721,  314,  442,
      443,  332,  332,  332,  252,  448,  449,  444,  338,  339,
      338,  346,  333,  720,  350,  447,  348,  348,  252,  252,
      346,  455,  719,  350,  456,  349,  349,  718,  717,  454,
      373,  373,  373,  376,  376,  376,  716,  252,  252,  379,
      465,  252,  393,  466,  252,  475,  507,  715,  476,  405,
      405,  405,  408,  508,  252,  411,  411,  411,  412,  412,

      412,  413,  413,  413,  414,  414,  414,  415,  415,  415,
      487,  348,  487,  252,  442,  443,  448,  449,  488,  713,
      349,  489,  444,  487,  545,  487,  447,  489,  550,  550,
      550,  575,  575,  575,  585,  575,  585,  595,  575,  595,
      545,  547,  712,  489,  600,  600,  600,  550,  550,  550,
      710,  548,  609,  609,  609,  612,  612,  612,  613,  613,
      613,  617,  617,  617,  614,  620,  620,  620,  575,  575,
      575,  624,  624,  624,  626,  617,  626,  629,  620,  629,
      585,  575,  585,  633,  624,  633,  635,  617,  635,  638,
      620,  638,  595,  575,  595,  642,  624,  642,  600,  600,

      600,  654,  654,  654,  609,  609,  609,  612,  612,  612,
      613,  613,  613,  617,  617,  617,  614,  620,  620,  620,
      659,  659,  659,  624,  624,  624,  626,  617,  626,  629,
      620,  629,  664,  659,  664,  633,  624,  633,  635,  617,
      635,  638,  620,  638,  669,  659,  669,  642,  624,  642,
      757,  757,  757,  680,  680,  680,  654,  654,  654,  681,
      681,  681,  708,  706,  674,  683,  683,  683,  659,  659,
      659,  685,  685,  685,  687,  683,  687,  664,  659,  664,
      689,  685,  689,  691,  683,  691,  669,  659,  669,  693,
      685,  693,  698,  698,  698,  698,  698,  698,  698,  698,

      698,  698,  698,  698,  699,  698,  293,  699,  698,  698,
      698,  698,  698,  698,  698,  698,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  698,  698,
      699,  700,  700,  700,  680,  680,  680,  681,  681,  681,
      683,  683,  683,  685,  685,  685,  707,  707,  707,  687,
      683,  687,  689,  685,  689,  709,  707,  709,  691,  683,
      691,  702,  682,  703,  693,  685,  693,  711,  707,  711,
      714,  714,  714,  701,  704,  697,  705,  700,  700,  700,
      707,  707,  707,  709,  707,  709,  711,  707,  711,  714,

      714,  714,  725,  725,  725,  730,  730,  730,  731,  730,
      731,  732,  730,  732,  725,  725,  725,  730,  730,  730,
      731,  730,  731,  732,  730,  732,  742,  742,  742,  748,
      748,  748,  742,  742,  742,  749,  749,  749,  751,  751,
      751,  748,  748,  748,  749,  749,  749,  753,  753,  753,
      751,  751,  751,  753,  753,  753,  756,  756,  756,  756,
      756,  756,  757,  696,  695,  694,  692,  690,  688,  686,
      743,  684,  682,  679,  678,  677,  743,  676,  757,  647,
      673,  672,  671,  670,  639,  668,  667,  666,  665,  630,
      663,  754,  662,  661,  660,  621,  658,  754,   78,   78,

       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,

      176,  176,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  218,  218,  218,  218,  218,  218,  218,

      218,  218,  218,  218,  218,  218,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  256,  256,  657,

      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  270,  270,  270,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  278,
      656,  278,  610,  278,  281,  655,  281,  653,  281,  284,
      284,  284,  652,  284,  287,  287,  651,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  293,  293,  293,
      650,  293,  317,  317,  317,  317,  317,  317,  649,  317,
      317,  317,  317,  317,  317,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  325,  325,

      647,  325,  645,  325,  325,  325,  325,  325,  325,  325,
      325,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  328,  328,  644,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  334,  334,  643,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      345,  345,  641,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,

      357,  357,  377,  377,  640,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  391,  391,
      639,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  406,  406,  637,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  445,  445,  445,  445,  445,  445,  445,

      445,  445,  445,  445,  445,  445,  450,  450,  636,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  451,
      451,  634,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  646,  646,
      646,  632,  631,  630,  628,  646,  646,  646,  627,  646,
      648,  625,  623,  622,  621,  619,  618,  648,  648,  648,
      616,  648,  675,  615,  611,  610,  608,  607,  606,  675,
      675,  675,  605,  675,  604,  603,  602,  601,  547,  599,

      598,  597,  596,  594,  593,  592,  591,  590,  589,  588,
      587,  586,  584,  583,  582,  581,  580,  579,  578,  577,
      576,  574,  573,  572,  571,  570,  569,  568,  567,  566,
      565,  564,  563,  562,  561,  560,  559,  558,  557,  556,
      555,  554,  553,  552,  551,  549,  492,  491,  544,  543,
      542,  541,  540,  539,  538,  537,  536,  535,  534,  533,
      532,  531,  530,  529,  528,  527,  526,  525,  524,  523,
      522,  521,  520,  519,  518,  517,  516,  515,  514,  513,
      512,  511,  446,  510,  509,  506,  505,  504,  503,  502,
      501,  500,  499,  498,  497,  496,  495,  494,  491,  425,

      423,  486,  485,  416,  484,  483,  482,  481,  480,  479,
      478,  477,  474,  473,  472,  471,  470,  469,  468,  467,
      464,  463,  462,  461,  460,  459,  458,  457,  356,  356,
      253,  356,  356,  346,  346,  346,  346,  453,  452,  335,
      447,  446,  329,  441,  440,  316,  315,  439,  438,  437,
      436,  435,  434,  433,  430,  429,  428,  427,  426,  425,
      423,  288,  288,  280,  279,  280,  279,  420,  272,  419,
      418,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  356,  353,  346,  253,  335,  329,  253,  253,  316,
      315,  304,  303,  300,  299,  296,  288,  280,  279,  272,

      269,  266,  263,  253,  253,  757,   77,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757
    } ;

static yyconst short int yy_chk[2257] =
    {   0,
        0,    1,    2,    1,    2,    3,    4,    3,    4,  425,
       83,   24,   83,    1,    2,   24,   88,    3,    4,    5,
      425,    5,    5,    6,   88,    6,    6,    7,    5,    7,
       81,    5,    6,   81,   85,    6,    7,   85,   93,    7,
        5,    8,    0,    8,    6,   27,   93,   27,    7,   28,
        8,   28,   27,    8,  752,   91,   28,   27,   91,   99,
       99,   28,    8,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,   11,   11,   11,   12,   12,   12,   13,   11,
       13,  746,   12,   14,   11,   14,   29,   12,   29,   30,
       13,   30,  106,   11,  261,   14,   12,  106,   29,   13,
      110,   30,  261,  110,   14,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   21,   21,   21,  744,   21,   31,   32,   31,

       32,   35,   21,   35,   21,   35,  282,   21,  107,   31,
       32,  282,   36,   35,   36,  100,   36,   31,   32,   31,
       32,   39,  267,   39,   36,  114,  114,  114,  100,   40,
      267,   40,   43,   39,   43,  740,  114,   21,   22,   22,
       22,   40,   22,   41,   43,   41,   35,   35,   22,   42,
       22,   42,  107,   22,  739,   41,  131,   36,   36,  100,
      131,   42,  125,   51,   41,   51,   39,   44,   44,   44,
       42,  125,   44,  117,   40,   51,  117,  121,  128,   44,
      121,  128,  738,   22,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   25,   25,   25,  140,   45,  142,   45,
       25,  142,  737,  140,   46,   25,   46,   25,   25,   45,
      133,  735,   47,   45,   47,   45,   46,   48,   25,   48,
       46,   47,   46,  734,   47,   49,   48,   49,  189,   48,
      189,   52,   25,   52,   49,  133,  133,   49,   25,   33,
       33,   33,   33,   52,  733,  145,   33,   33,  145,   33,
      283,   33,   34,   34,   34,   34,  154,  154,  154,   34,

       34,   50,   34,   50,   34,   37,   37,   37,   37,   37,
       50,  174,   53,   50,   53,  174,   54,   37,   54,   55,
       57,   55,   57,  155,   53,   56,  155,   56,   54,  175,
       55,   55,   57,  175,  283,   54,   56,   56,  115,  115,
      115,  172,  172,  172,   56,   59,   58,   59,   58,  115,
       37,   37,   38,   38,   38,   38,   38,   59,   58,   60,
       61,   60,   61,  160,   38,   58,  160,   62,   63,   62,
       63,   60,   61,   64,  166,   64,  729,  166,   60,   62,
       63,   65,   66,   65,   66,   64,   62,   67,   68,   67,
       68,  301,   64,   65,   66,  301,  728,   38,   38,   67,

       68,   69,   70,   69,   70,  727,   71,   68,   71,  209,
       72,  209,   72,   69,   70,   73,  171,   73,   71,  171,
      134,   70,   72,   74,   75,   74,   75,   73,   76,   72,
       76,  309,  116,  116,  116,   74,   75,  132,  132,  132,
       76,  132,   74,  116,  134,  726,  173,   76,  132,  173,
      150,  150,  150,  151,  151,  151,  309,  178,  134,  150,
      178,  157,  151,  157,  724,  157,  163,  163,  163,  164,
      164,  164,  182,  157,  182,  184,  185,  163,  184,  185,
      164,  182,  187,  191,  195,  187,  201,  195,  206,  201,
      191,  206,  723,  191,  200,  200,  200,  205,  205,  205,

      211,  341,  214,  211,  214,  341,  157,  157,  196,  224,
      216,  224,  196,  216,  220,  220,  220,  221,  196,  196,
      221,  196,  196,  196,  196,  226,  196,  212,  226,  442,
      442,  212,  229,  229,  229,  719,  230,  212,  212,  230,
      212,  212,  212,  212,  718,  212,  217,  234,  234,  234,
      217,  235,  240,  493,  235,  240,  217,  217,  717,  217,
      217,  217,  217,  493,  217,  239,  239,  239,  244,  244,
      244,  245,  275,  716,  245,  249,  249,  249,  250,  262,
      257,  250,  257,  268,  713,  275,  268,  262,  285,  308,
      262,  285,  289,  289,  289,  290,  290,  290,  291,  292,

      312,  291,  292,  289,  712,  318,  290,  307,  307,  307,
      710,  307,  318,  342,  308,  308,  275,  342,  307,  322,
      322,  322,  449,  449,  312,  323,  323,  323,  322,  324,
      324,  324,  326,  357,  326,  357,  326,  708,  312,  330,
      330,  332,  332,  332,  326,  336,  336,  330,  338,  338,
      338,  346,  332,  706,  346,  336,  347,  349,  347,  349,
      351,  364,  705,  351,  364,  347,  349,  704,  703,  349,
      373,  373,  373,  376,  376,  376,  702,  326,  326,  378,
      382,  378,  392,  382,  392,  396,  439,  701,  396,  405,
      405,  405,  407,  439,  407,  411,  411,  411,  412,  412,

      412,  413,  413,  413,  414,  414,  414,  415,  415,  415,
      423,  454,  423,  454,  444,  444,  447,  447,  423,  696,
      454,  423,  444,  487,  488,  487,  447,  488,  495,  495,
      495,  520,  520,  520,  530,  530,  530,  540,  540,  540,
      545,  548,  695,  545,  549,  549,  549,  550,  550,  550,
      692,  548,  559,  559,  559,  564,  564,  564,  565,  565,
      565,  568,  568,  568,  565,  571,  571,  571,  575,  575,
      575,  576,  576,  576,  578,  578,  578,  581,  581,  581,
      585,  585,  585,  586,  586,  586,  588,  588,  588,  591,
      591,  591,  595,  595,  595,  596,  596,  596,  600,  600,

      600,  607,  607,  607,  609,  609,  609,  612,  612,  612,
      613,  613,  613,  617,  617,  617,  613,  620,  620,  620,
      622,  622,  622,  624,  624,  624,  626,  626,  626,  629,
      629,  629,  631,  631,  631,  633,  633,  633,  635,  635,
      635,  638,  638,  638,  640,  640,  640,  642,  642,  642,
      646,  646,  646,  653,  653,  653,  654,  654,  654,  655,
      655,  655,  688,  684,  646,  657,  657,  657,  659,  659,
      659,  660,  660,  660,  662,  662,  662,  664,  664,  664,
      665,  665,  665,  667,  667,  667,  669,  669,  669,  670,
      670,  670,  677,  677,  677,  677,  677,  677,  677,  677,

      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  678,  678,  678,  680,  680,  680,  681,  681,  681,
      683,  683,  683,  685,  685,  685,  686,  686,  686,  687,
      687,  687,  689,  689,  689,  690,  690,  690,  691,  691,
      691,  681,  682,  681,  693,  693,  693,  694,  694,  694,
      697,  697,  697,  679,  681,  676,  681,  700,  700,  700,
      707,  707,  707,  709,  709,  709,  711,  711,  711,  714,

      714,  714,  715,  715,  715,  720,  720,  720,  721,  721,
      721,  722,  722,  722,  725,  725,  725,  730,  730,  730,
      731,  731,  731,  732,  732,  732,  736,  736,  736,  741,
      741,  741,  742,  742,  742,  743,  743,  743,  745,  745,
      745,  748,  748,  748,  749,  749,  749,  750,  750,  750,
      751,  751,  751,  753,  753,  753,  754,  754,  754,  756,
      756,  756,  675,  673,  672,  671,  668,  666,  663,  661,
      736,  658,  656,  652,  651,  650,  742,  649,  648,  647,
      645,  644,  643,  641,  639,  637,  636,  634,  632,  630,
      628,  750,  627,  625,  623,  621,  619,  753,  758,  758,

      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,

      765,  765,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  767,  767,  767,  767,  767,
      767,  767,  767,  767,  767,  767,  767,  767,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  773,  773,  773,  773,  773,  773,  773,

      773,  773,  773,  773,  773,  773,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  779,  779,  779,  779,  779,  779,  779,  779,  779,
      779,  779,  779,  779,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  781,  781,  618,

      781,  781,  781,  781,  781,  781,  781,  781,  781,  781,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  783,  783,  783,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  785,
      611,  785,  610,  785,  786,  608,  786,  606,  786,  787,
      787,  787,  605,  787,  788,  788,  604,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  789,  789,  789,
      603,  789,  790,  790,  790,  790,  790,  790,  602,  790,
      790,  790,  790,  790,  790,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  792,  792,

      601,  792,  599,  792,  792,  792,  792,  792,  792,  792,
      792,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  794,  794,  598,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  795,  795,  597,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      796,  796,  594,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,

      799,  799,  800,  800,  593,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  801,  801,  801,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  801,  802,  802,
      592,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  804,  804,  590,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  805,  805,  805,
      805,  805,  805,  805,  805,  805,  805,  805,  805,  805,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  807,  807,  807,  807,  807,  807,  807,

      807,  807,  807,  807,  807,  807,  808,  808,  589,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  809,
      809,  587,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  812,  812,
      812,  584,  583,  582,  580,  812,  812,  812,  579,  812,
      813,  577,  574,  573,  572,  570,  569,  813,  813,  813,
      567,  813,  814,  566,  561,  560,  558,  557,  556,  814,
      814,  814,  555,  814,  554,  553,  552,  551,  546,  544,

      543,  542,  541,  539,  538,  537,  536,  535,  534,  533,
      532,  531,  529,  528,  527,  526,  525,  524,  523,  522,
      521,  519,  518,  517,  516,  515,  514,  513,  512,  511,
      510,  509,  508,  507,  506,  505,  504,  503,  502,  501,
      500,  499,  498,  497,  496,  494,  492,  490,  486,  485,
      484,  483,  482,  481,  480,  479,  478,  477,  476,  475,
      474,  473,  472,  471,  470,  469,  468,  467,  466,  465,
      464,  463,  462,  461,  460,  459,  458,  457,  456,  455,
      453,  452,  445,  441,  440,  438,  437,  436,  435,  434,
      433,  432,  431,  430,  429,  428,  427,  426,  424,  422,

      421,  419,  418,  416,  404,  403,  402,  401,  400,  399,
      398,  397,  390,  389,  388,  387,  386,  385,  384,  383,
      372,  371,  370,  369,  368,  367,  366,  365,  361,  360,
      359,  358,  355,  352,  350,  348,  345,  344,  343,  334,
      333,  331,  328,  316,  315,  314,  313,  311,  310,  306,
      305,  304,  303,  302,  300,  299,  298,  297,  296,  295,
      294,  287,  286,  280,  279,  277,  276,  274,  271,  269,
      266,  252,  248,  243,  238,  233,  228,  219,  204,  198,
      193,  188,  186,  181,  177,  165,  159,  149,  144,  138,
      137,  130,  129,  127,  126,  124,  111,  104,  102,   98,

       94,   92,   90,   87,   79,   77,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#define INITIAL 0
/*************************************************************************

    CPP lexer

    This file is derived from the DOC++ source by Roland Wunderling
    and Malte Zoeckler.

    Better handling of typedefs, linenumbers, formatting, comments
    and various other improvements was made. Still a lot to be done
    to handle all modern C++ constructs. <bjarke@viksoe.dk>

 *************************************************************************/

#pragma code_seg( "MISC" )

/*
 *	Includes
 */

#include "CppTypes.h"


/* -----------------------------------------------------------------
 *
 *	statics
 */
static const char*	inputString ;
static int		inputPosition ;
static int		lastContext ;
static int		lastCContext ;
static int		lastTContext;
static int		protection   = GLOB ;
static int		bracketCount = 0 ;
static int		sharpCount   = 0 ;
static int		elseCount    = 0 ;
static Entry*		current_root = 0 ;
static Entry*		global_root  = 0 ;
static Entry*		current      = 0 ;

static int		yyLineNr = 1 ;
static char		yyFileName[264] ;
static McString*	currentString ;

static void msg( const char* str, const char* str2=NULL )
{
#ifdef _DEBUG
	if( verb )
	{
		printf( "%s(%d):\t%s", yyFileName, yyLineNr, str ) ;
		if( str2 ) printf( "%s", str2 ) ;
		printf( "\n" ) ;
	}
#endif
}

static void lineCount()
{
	for( const char* c = yytext ; *c ; ++c )
		yyLineNr += (*c == '\n') ;
}


static void addType( Entry* current )
{
   if( !current->name.empty() ) {
      if( !current->type.empty() ) current->type += ' ' ;
      current->type += current->name ;
      current->name.clear() ;
   }
   if( !current->args.empty() ) {
      if( !current->type.empty() ) current->type += ' ' ;
      current->type += current->args ;
      current->args.clear() ;
   }
}

/* -----------------------------------------------------------------
 */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result = yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
	int c = 0;
	while( c < max_size && inputString[inputPosition] )
	{
		*buf = inputString[inputPosition++] ;
		c++; buf++;
	}
	return c;
}

#define Cxx_Memo 1

#define Doc 2

#define VerbDoc 3

#define Define 4

#define DefineEnd 5

#define DefineEnded 6

#define ClassName 7

#define TypedefName 8

#define Bases 9

#define NextSemi 10

#define FindMembers 11

#define Function 12

#define Operator 13

#define Throws 14

#define Array 15

#define Round 16

#define Curly 17

#define SkipCurly 18

#define SkipInits 19

#define SkipDefine 20

#define SkipElse 21

#define Sharp 22

#define Comment 23

#define SkipComment 24

#define SkipCxxComment 25

#define CppDoc 26

#define CppMemo 27

#define See 28

#define Args 29

#define Type 30

#define Author 31

#define Name 32

#define Version 33

#define Param 34

#define Memo 35

#define Return 36

#define Exception 37


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplusx
//#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;




	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 758 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 757 );
		yy_cp = yy_last_accepting_cpos;
		yy_current_state = yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{ 
					  yyLineNr = 1 ; 
					  int i;
					  for( i = 0 ; yytext[i+1] != 6 ; i++ )
						yyFileName[i] = yytext[i+1] ;
					  yyFileName[i] = 0 ;
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
{ BEGIN( FindMembers ) ; }
	YY_BREAK
case 3:
YY_RULE_SETUP

	YY_BREAK
case 4:
YY_RULE_SETUP
{ BEGIN( SkipCurly ) ; }
	YY_BREAK
case 5:
YY_RULE_SETUP

	YY_BREAK
case 6:
YY_RULE_SETUP
{ 
					  current->protection = protection = PUBL ;
					  lineCount() ;
					}
	YY_BREAK
case 7:
YY_RULE_SETUP
{ 
					  current->protection = protection = PROT ;
					  lineCount() ;
					}
	YY_BREAK
case 8:
YY_RULE_SETUP
{ 
					  current->protection = protection = PRIV ;
					  lineCount() ;
					}
	YY_BREAK
case 9:
YY_RULE_SETUP
{
					  msg( "found class    ", current->name ) ;
					  current->section = TYPEDEF_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef class" ;
					  current->name.clear() ;
					  lineCount() ;
					}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
					  msg( "found struct   ", current->name ) ;
					  current->section = STRUCT_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef struct" ;
					  current->name.clear() ;
					  lastTContext = 1;
					  lineCount() ;
				  	  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
					  msg( "found struct   ", current->name ) ;
					  current->section = STRUCT_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef struct" ;
					  current->name.clear() ;
					  lineCount() ;
					  current->file = yyFileName ;
					  current->startLine = yyLineNr ;
					  lastTContext = 1;
				  	  BEGIN( Curly ) ;
					}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
					  msg( "found enum     ", current->name ) ;
					  current->section = ENUM_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef enum" ;
					  current->name.clear() ;
					  lineCount() ;
					  current->file = yyFileName ;
					  current->startLine = yyLineNr ;
					  lastTContext = 1;
				  	  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
					  msg( "found struct   ", current->name ) ;
					  current->section = ENUM_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef enum" ;
					  current->name.clear() ;
					  lineCount() ;
					  current->file = yyFileName ;
					  current->startLine = yyLineNr ;
					  lastTContext = 1;
				  	  BEGIN( Curly ) ;
					}
	YY_BREAK
case 14:
YY_RULE_SETUP
{
					  msg( "found union    ", current->name ) ;
					  current->section = UNION_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef union" ;
					  current->name.clear() ;
					  lineCount() ;
				  	  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 15:
YY_RULE_SETUP
{ 
					  current->section = CLASS_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "interface" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 16:
YY_RULE_SETUP
{ 
					  msg( "found class     ", current->name ) ;
					  current->section = CLASS_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "class" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 17:
YY_RULE_SETUP
{ 
					  msg( "found struct    ", current->name ) ;
					  current->section = STRUCT_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "struct" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 18:
YY_RULE_SETUP
{ 
					  msg( "found enum    ", current->name ) ;
					  current->section = ENUM_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "enum" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 19:
YY_RULE_SETUP
{ 
					  current->section = UNION_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "union" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 20:
YY_RULE_SETUP
{ 
					  msg( "found forward declare  ", current->name ) ;
					  lineCount() ;
					}
	YY_BREAK
case 21:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ 
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  current->name  = yytext ;
					  BEGIN( Operator ) ;
					}
	YY_BREAK
case 22:
YY_RULE_SETUP
{ 
					  current->name += yytext ;
					  current->lineNo = yyLineNr;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 23:
YY_RULE_SETUP
{ 
					  addType( current ) ;
				          current->lineNo = yyLineNr;
					  current->name  = yytext ;
					}
	YY_BREAK
case 24:
YY_RULE_SETUP
{ 
					  addType( current ) ;
				          current->lineNo = yyLineNr;
					  current->name  = yytext ;
					}
	YY_BREAK
case 25:
YY_RULE_SETUP
{ lineCount() ; BEGIN( SkipDefine ) ; msg( "found comp.dir " ) ; }
	YY_BREAK
case 26:
YY_RULE_SETUP

	YY_BREAK
case 27:
YY_RULE_SETUP
{ yyLineNr++ ; }
	YY_BREAK
case 28:
YY_RULE_SETUP
{ 
					  yyLineNr++ ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 29:
YY_RULE_SETUP
{ elseCount=1; BEGIN( SkipElse ) ; msg( "found comp.dir ELSE ", current->name ) ; }
	YY_BREAK
case 30:
YY_RULE_SETUP
{ elseCount=1; BEGIN( SkipElse ) ; msg( "found comp.dir ELSE ", current->name ) ; }
	YY_BREAK
case 31:
YY_RULE_SETUP

	YY_BREAK
case 32:
YY_RULE_SETUP
{ elseCount++ ; }
	YY_BREAK
case 33:
YY_RULE_SETUP
{ elseCount++ ; }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ if( --elseCount<=0 )
					     BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 35:
YY_RULE_SETUP
{ 
					  current->type = "using " ;
					  BEGIN( Define ) ;
					}
	YY_BREAK
case 36:
YY_RULE_SETUP
{ 
					  current->type = "#define" ;
					  BEGIN( Define ) ;
					}
	YY_BREAK
case 37:
YY_RULE_SETUP
{ 
					  current->name = yytext ;
					  current->lineNo = yyLineNr;
					  BEGIN( DefineEnd ) ;
					}
	YY_BREAK
case 38:
YY_RULE_SETUP
{ BEGIN( DefineEnd ) ; }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ 
					  current->args = yytext ;
					  BEGIN( DefineEnded ) ;
					}
	YY_BREAK
case 40:
YY_RULE_SETUP
{ yyLineNr++ ; }
	YY_BREAK
case 41:
YY_RULE_SETUP
{ yyLineNr++ ; }
	YY_BREAK
case 42:
YY_RULE_SETUP
{ 
					  if( current->done == onlyDocs )
					  {
					    current->section = MACRO_SEC ;
					    current->lineNo = yyLineNr;
					    msg( "found macro    ", current->name ) ;
					    current_root->addSubEntry( current ) ;
					    current = new Entry ;
					    current->protection = protection ;
					  }
					  else
					  {
					    current->name.clear() ;
					    current->type.clear() ;
					  }
					  yyLineNr++ ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 43:
YY_RULE_SETUP
{ 
					  current->name += yytext ; 
					  current->lineNo = yyLineNr;
					}
	YY_BREAK
case 44:
YY_RULE_SETUP
{ 
					  BEGIN( FindMembers ) ;
					  if( current->lineNo == 0 ) current->lineNo = yyLineNr + 1;
					  msg( "found variable ", current->name ) ;
					  if( current->done == onlyDocs )
					  {
					    if( current->section != TYPEDEF_SEC )
						    current->section = VARIABLE_SEC ;
					    current_root->addSubEntry( current ) ;
					    current = new Entry ;
					    current->protection = protection ;
					  }
					  else
					  {
					    current->section = EMPTY_SEC ;
					    current->name.clear() ;
					    current->type.clear() ;
					    current->args.clear() ;
					  }
					  if( *yytext == '=' )
					    BEGIN( NextSemi ) ;
					}
	YY_BREAK
case 45:
YY_RULE_SETUP
{ 
					  current->args += yytext ;
					  sharpCount=1;
					  BEGIN( Array ) ;
					}
	YY_BREAK
case 46:
YY_RULE_SETUP
{ 
					  current->args += *yytext ;
					  if( --sharpCount<=0 )
						BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 47:
YY_RULE_SETUP
{ 
					  current->args += *yytext ;
					  sharpCount++;	
					}
	YY_BREAK
case 48:
YY_RULE_SETUP
{ current->args += *yytext ; }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ 
					  addType( current ) ;
					  current->type += *yytext ;
					  sharpCount=1;
					  BEGIN( Sharp ) ;
					}
	YY_BREAK
case 50:
YY_RULE_SETUP
{ 
					  current->type += *yytext ;
					  if (--sharpCount<=0)
	                                     BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 51:
YY_RULE_SETUP
{ 
					  current->type += *yytext ;
					  sharpCount++;	
					}
	YY_BREAK
case 52:
YY_RULE_SETUP
{ current->type += *yytext ; }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ current->program += yytext ; ++yyLineNr ; }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  lastContext = Curly ;
					  BEGIN( Comment ) ;
					}
	YY_BREAK
case 57:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  ++yyLineNr ;
					  lastContext = Curly ;
					  BEGIN( Comment ) ;
					}
	YY_BREAK
case 58:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  ++bracketCount ;
					}
	YY_BREAK
case 59:
YY_RULE_SETUP
{ 
					  if( bracketCount > 0 )
					  {
						current->program += yytext ;
						--bracketCount ;
					  }
					  else
					  {
					    current->args += " {...}";

					    if( lastTContext ) 
					    {
					      BEGIN( TypedefName ) ;
					    }
					    else if( current->done == onlyDocs )
					    {
					      int section = current->section;
					      current_root->addNextEntry( current ) ;
					      current = new Entry ;
					      current->protection = protection ;
					      if( section == CLASS_SEC ) current->protection = GLOB ;
					      BEGIN( NextSemi ) ;
					    }
					    else
					    {
					      current->name.clear() ;
					      current->type.clear() ;
					      current->args.clear() ;
					      current->section = EMPTY_SEC ;
					      BEGIN( NextSemi ) ;
					    }
					  }
					}
	YY_BREAK
case 60:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 61:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ 
					  current->args = yytext ;
					  BEGIN( Round ) ;
					}
	YY_BREAK
case 63:
YY_RULE_SETUP
{ 
					  current->args += *yytext ;
					  ++bracketCount ;
					}
	YY_BREAK
case 64:
YY_RULE_SETUP
{ 
					  current->args += *yytext ;
					  if( bracketCount > 0 )
					    --bracketCount ;
					  else
					    BEGIN( Function ) ;
					}
	YY_BREAK
case 65:
YY_RULE_SETUP
{ lineCount() ; current->args += ", " ; }
	YY_BREAK
case 66:
YY_RULE_SETUP
{ lineCount() ; current->args += " " ; }
	YY_BREAK
case 67:
YY_RULE_SETUP
{ current->args += *yytext ; }
	YY_BREAK
case 68:
YY_RULE_SETUP
{ lineCount() ; current->args += " const" ; }
	YY_BREAK
case 69:
YY_RULE_SETUP
{ 
					  current->args += " throw(" ;
					  lineCount() ;
				  	  BEGIN( Round ) ;
					}
	YY_BREAK
case 70:
YY_RULE_SETUP
{ 
					  current->type += current->name ;
					  current->name  = current->args ;
					  current->args  = yytext ;
					  current->lineNo = yyLineNr;
					  BEGIN( Round ) ;
					}
	YY_BREAK
case 71:
YY_RULE_SETUP
{ 
					  msg( "found method   ", current->name ) ;
					  if( current->done == onlyDocs )
					  {
					    current->section = FUNCTION_SEC ;
					    if( *yytext == '{' && current->protection == GLOB ) current->section = IMPL_SEC;
					    current_root->addSubEntry(current);
					    current = new Entry ;
					    current->protection = protection ;
					  }
					  else
					  {
					    current->name.clear() ;
					    current->type.clear() ;
					    current->args.clear() ;
					  }
					  if( *yytext == '{' ) {
					      BEGIN( SkipCurly ) ;
					  }
					  else if( *yytext == ':' )
					      BEGIN( SkipInits ) ;
					  else
					      BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 72:
YY_RULE_SETUP
{ BEGIN( SkipCurly ) ; }
	YY_BREAK
case 73:
YY_RULE_SETUP
{ lineCount() ; }
	YY_BREAK
case 74:
YY_RULE_SETUP

	YY_BREAK
case 75:
YY_RULE_SETUP
{ ++bracketCount ; }
	YY_BREAK
case 76:
YY_RULE_SETUP
{ 
					  if( bracketCount > 0 )
					    --bracketCount ;
					  else
					    BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 77:
YY_RULE_SETUP
{ 
					  if( current->done == onlyDocs )
					  {
					    current->section = VARIABLE_SEC ;
					    current_root->addSubEntry(current);
					    current = new Entry ;
					    current->protection = protection ;
					  }
					  else
					  {
					    current->section = EMPTY_SEC ;
					    current->type.clear() ;
					    current->name.clear() ;
					    current->args.clear() ;
					  }
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 78:
YY_RULE_SETUP
{ 
					  if( !current->type.empty() && !current->name.empty() ) current->type += " " ;
					  current->type += current->name ;
				  	  current->name = yytext ;
					  current->lineNo = yyLineNr;
					}
	YY_BREAK
case 79:
YY_RULE_SETUP
{ 
					  current->args = " :" ;
					  BEGIN( Bases ) ;
					}
	YY_BREAK
case 80:
YY_RULE_SETUP
{ 
					  current->file = yyFileName ;
				  	  if( current->lineNo == 0 ) current->lineNo = yyLineNr;
					  current->startLine = yyLineNr ;
				  	  msg( "found name     ", current->name ) ;
				  	  BEGIN( Curly ) ;
					}
	YY_BREAK
case 81:
YY_RULE_SETUP
{ 
					  current->extends.append( new McString(yytext) ) ;
					  if( !current->args.empty() ) current->args += " " ;
					  current->args += yytext ;
					}
	YY_BREAK
case 82:
YY_RULE_SETUP
{ current->args += ',' ; }
	YY_BREAK
case 83:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 84:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 85:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  BEGIN( Curly ) ;
					}
	YY_BREAK
case 86:
YY_RULE_SETUP
{ 
					  if( !current->type.empty() && !current->name.empty() ) current->type += " " ;
					  current->type += current->name ;
				  	  current->name = yytext ;
					  current->lineNo = yyLineNr;
		
				          lastTContext = 0;
					  msg( "found name     ", current->name ) ;

				          int section = current->section;
					  current_root->addNextEntry( current ) ;
					  current = new Entry ;
					  current->protection = protection ;
					  if( section == CLASS_SEC ) current->protection = GLOB ;

					  BEGIN( NextSemi ) ;
					}
	YY_BREAK
case 87:
YY_RULE_SETUP
{
				          lastTContext = 0;
					  msg( "found name     ", current->name ) ;

					  int section = current->section;
					  current_root->addNextEntry( current ) ;
					  current = new Entry ;
					  current->protection = protection ;
					  if( section == CLASS_SEC ) current->protection = GLOB ;

				          if( *yytext == ',' )
					    BEGIN( NextSemi ) ;
					  else
					    BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 88:
YY_RULE_SETUP
{ 
					  lineCount() ;
					  if( !current->doc.empty()
						  ||  !current->memo.empty() )
					  {
						msg( "found doc entry" ) ;
						current->lineNo = yyLineNr;
						current_root->addSubEntry( current ) ;
						current = new Entry ;
					  }
					  current->done = onlyDocs ;
					  BEGIN( Cxx_Memo ) ;
					}
	YY_BREAK
case 89:
YY_RULE_SETUP
{ current->memo += yytext ; }
	YY_BREAK
case 90:
YY_RULE_SETUP
{ 
					  yyLineNr++ ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 91:
YY_RULE_SETUP
{ lineCount() ; }
	YY_BREAK
case 92:
YY_RULE_SETUP
{ lineCount() ; }
	YY_BREAK
case 93:
YY_RULE_SETUP
{ lineCount() ; }
	YY_BREAK
case 94:
YY_RULE_SETUP
{ 
					  lineCount() ;
					  lastCContext = YY_START ;
					  BEGIN( SkipComment ) ;
					}
	YY_BREAK
case 95:
YY_RULE_SETUP
{ 
					  lineCount() ;
					  if( !current->doc.empty() 
					      ||  !current->memo.empty() )
					  {
					     msg( "found doc entry" ) ;
					     current->lineNo = yyLineNr;
					     current_root->addSubEntry( current ) ;
					     current = new Entry ;
					  }
					  current->done = onlyDocs ;
					  BEGIN( Doc ) ;
					}
	YY_BREAK
case 96:
YY_RULE_SETUP
{ yyLineNr++; BEGIN( FindMembers ) ; }
	YY_BREAK
case 97:
YY_RULE_SETUP
{ 
					  current->doc += yytext ;
					  BEGIN( VerbDoc ) ;
					}
	YY_BREAK
case 98:
YY_RULE_SETUP
{ 
					  current->doc += '\n' ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 99:
YY_RULE_SETUP
{ 
					  current->doc += yytext ;
					  BEGIN( Doc ) ;
					}
	YY_BREAK
case 100:
YY_RULE_SETUP

	YY_BREAK
case 101:
YY_RULE_SETUP
{ 
					  if( !current->doc.empty() ) current->doc += '\n' ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 102:
YY_RULE_SETUP
{ current->doc += *yytext ; }
	YY_BREAK
case 103:
YY_RULE_SETUP
{ current->doc += yytext ; }
	YY_BREAK
case 104:
YY_RULE_SETUP
{ current->doc += yytext ; }
	YY_BREAK
case 105:
YY_RULE_SETUP
{ BEGIN( FindMembers ) ; }
	YY_BREAK
case 106:
YY_RULE_SETUP
{ 
					  current->memo += yytext ;
					  current->doc  += yytext ; 
					}
	YY_BREAK
case 107:
YY_RULE_SETUP
{ 
					  BEGIN( CppDoc ) ;
                      			  lineCount();
					  current->doc  += yytext ; 
					}
	YY_BREAK
case 108:
YY_RULE_SETUP
{ 
					  current->doc  += *yytext ; 
	                  		  lineCount();
					}
	YY_BREAK
case 109:
YY_RULE_SETUP
{ current->memo += yytext ; }
	YY_BREAK
case 110:
YY_RULE_SETUP
{ current->doc  += yytext ; }
	YY_BREAK
case 111:
YY_RULE_SETUP
{
					  lineCount() ;
					  current->see.append( new McString ) ;
					  BEGIN( See ) ;
					}
	YY_BREAK
case 112:
YY_RULE_SETUP
{
					  lineCount() ;
					  BEGIN( Author ) ; }
	YY_BREAK
case 113:
YY_RULE_SETUP
{
					  lineCount() ;
					  BEGIN( Version ) ; }
	YY_BREAK
case 114:
YY_RULE_SETUP
{
					  lineCount() ;
					  current->param.append( new McString  ) ;
					  BEGIN( Param ) ;
					}
	YY_BREAK
case 115:
YY_RULE_SETUP
{
					  lineCount() ;
					  current->exception.append( new McString ) ;
					  BEGIN( Exception ) ;
					}
	YY_BREAK
case 116:
YY_RULE_SETUP
{
					  lineCount() ;
					  BEGIN( Return ) ; }
	YY_BREAK
case 117:
YY_RULE_SETUP
{
					  current->name.clear() ;
					  current->section = MANUAL_SEC ;
					  BEGIN( Name ) ;
					}
	YY_BREAK
case 118:
YY_RULE_SETUP
{
					  lineCount() ;
					  current->memo.clear() ;
					  BEGIN( Memo ) ;
					}
	YY_BREAK
case 119:
YY_RULE_SETUP
{
					  lineCount() ;
					  current->type.clear() ;
					  BEGIN( Type ) ;
					}
	YY_BREAK
case 120:
YY_RULE_SETUP
{
					  lineCount() ;
					  current->args.clear() ;
					  BEGIN( Args ) ;
					}
	YY_BREAK
case 121:
YY_RULE_SETUP
{ current->name = yytext ; }
	YY_BREAK
case 122:
YY_RULE_SETUP
{ ++yyLineNr ; BEGIN( CppDoc ) ; }
	YY_BREAK
case 123:
YY_RULE_SETUP
{ current->type = yytext ; }
	YY_BREAK
case 124:
YY_RULE_SETUP
{ ++yyLineNr ; BEGIN( CppDoc ) ; }
	YY_BREAK
case 125:
YY_RULE_SETUP
{ current->args = yytext ; }
	YY_BREAK
case 126:
YY_RULE_SETUP
{ ++yyLineNr ; BEGIN( CppDoc ) ; }
	YY_BREAK
case 127:
YY_RULE_SETUP
{ current->author += *yytext ; }
	YY_BREAK
case 128:
YY_RULE_SETUP
{ current->version += *yytext ; }
	YY_BREAK
case 129:
YY_RULE_SETUP
{ *(current->see.last()) += *yytext ; }
	YY_BREAK
case 130:
YY_RULE_SETUP
{ *(current->param.last()) += *yytext ; }
	YY_BREAK
case 131:
YY_RULE_SETUP
{ *(current->exception.last()) += *yytext ; }
	YY_BREAK
case 132:
YY_RULE_SETUP
{ current->memo += *yytext ; }
	YY_BREAK
case 133:
YY_RULE_SETUP
{ current->retrn += *yytext ; }
	YY_BREAK
case 134:
YY_RULE_SETUP
{ current->author  += '\n' ; lineCount() ; }
	YY_BREAK
case 135:
YY_RULE_SETUP
{ current->version += '\n' ; lineCount() ; }
	YY_BREAK
case 136:
YY_RULE_SETUP
{ *(current->see.last()) += '\n' ; lineCount() ; }
	YY_BREAK
case 137:
YY_RULE_SETUP
{ *(current->param.last()) += '\n' ; lineCount() ; }
	YY_BREAK
case 138:
YY_RULE_SETUP
{ *(current->exception.last()) += '\n' ; lineCount() ; }
	YY_BREAK
case 139:
YY_RULE_SETUP
{ current->memo += *yytext ; lineCount() ; }
	YY_BREAK
case 140:
YY_RULE_SETUP
{ current->retrn += *yytext ; lineCount() ; }
	YY_BREAK
case 141:
YY_RULE_SETUP

	YY_BREAK
case 142:
YY_RULE_SETUP
{ yyLineNr++ ; }
	YY_BREAK
case 143:
YY_RULE_SETUP
{ 
					  lastCContext = YY_START ;
					  BEGIN( SkipComment ) ;
					}
	YY_BREAK
case 144:
YY_RULE_SETUP
{ BEGIN( lastCContext ) ; }
	YY_BREAK
case 145:
YY_RULE_SETUP

	YY_BREAK
case 146:
YY_RULE_SETUP
{ 
					  lastCContext = YY_START ;
					  BEGIN( SkipCxxComment ) ;
					}
	YY_BREAK
case 147:
YY_RULE_SETUP
{ 
					  yyLineNr++ ;
					  BEGIN( lastCContext ) ;
					}
	YY_BREAK
case 148:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Cxx_Memo):
case YY_STATE_EOF(Doc):
case YY_STATE_EOF(VerbDoc):
case YY_STATE_EOF(Define):
case YY_STATE_EOF(DefineEnd):
case YY_STATE_EOF(DefineEnded):
case YY_STATE_EOF(ClassName):
case YY_STATE_EOF(TypedefName):
case YY_STATE_EOF(Bases):
case YY_STATE_EOF(NextSemi):
case YY_STATE_EOF(FindMembers):
case YY_STATE_EOF(Function):
case YY_STATE_EOF(Operator):
case YY_STATE_EOF(Throws):
case YY_STATE_EOF(Array):
case YY_STATE_EOF(Round):
case YY_STATE_EOF(Curly):
case YY_STATE_EOF(SkipCurly):
case YY_STATE_EOF(SkipInits):
case YY_STATE_EOF(SkipDefine):
case YY_STATE_EOF(SkipElse):
case YY_STATE_EOF(Sharp):
case YY_STATE_EOF(Comment):
case YY_STATE_EOF(SkipComment):
case YY_STATE_EOF(SkipCxxComment):
case YY_STATE_EOF(CppDoc):
case YY_STATE_EOF(CppMemo):
case YY_STATE_EOF(See):
case YY_STATE_EOF(Args):
case YY_STATE_EOF(Type):
case YY_STATE_EOF(Author):
case YY_STATE_EOF(Name):
case YY_STATE_EOF(Version):
case YY_STATE_EOF(Param):
case YY_STATE_EOF(Memo):
case YY_STATE_EOF(Return):
case YY_STATE_EOF(Exception):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_last_accepting_cpos;
				yy_current_state = yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 758 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 758 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 757);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif



/*@ ----------------------------------------------------------------------------
 */
void parseDoc(Entry* rt)
{
	if( !rt->doc.empty() )
	{
		Entry* _current = current ;
		rt->program = rt->doc ;
		rt->doc.clear() ;
		inputString   = rt->program ;
		inputPosition = 0 ;
		current = rt ;
		cpprestart( cppin ) ;
		if( !rt->memo.empty() )
			BEGIN( CppDoc ) ;
		else
			BEGIN( CppMemo ) ;
		cpplex() ;
		rt->program.clear() ;
		if( rt->memo.length()+2 >= rt->doc.length() )
			rt->doc.clear() ;
		current = _current ;
	}
}

void callcpplex()
{
	cpplex() ;
	if( ( !current->name.empty()  ||  !current->program.empty()  ||
		  !current->memo.empty()  ||  !current->doc.empty() )
		&&  current->done == onlyDocs )
	{
		if( current->section == EMPTY_SEC )
			current->section = VARIABLE_SEC ;
		current_root->addSubEntry( current ) ;
		current = new Entry ;
		current->protection = protection ;
	}
}

void parseCppClasses(Entry* rt)
{
    if( rt == 0 ) return ;
    for( Entry *cr = rt ; cr ; cr = cr->next )
    {
		if( !cr->program.empty() )
		{
#ifdef _DEBUG
			if (verb)
				printf("Scanning substuff of (%s) %s\n",
				   (const char *)cr->type,
				   (const char *)cr->name);
#endif
			inputString   = cr->program ;
			inputPosition = 0 ;
			cpprestart( cppin ) ;
			BEGIN( FindMembers ) ;
			current_root = cr ;
			strcpy( yyFileName, cr->file ) ;
			yyLineNr = cr->startLine ;
			current->type.clear() ;
			current->name.clear() ;
			current->args.clear() ;
			current->section = EMPTY_SEC ;
			if( cr->section == CLASS_SEC )
				current->protection = protection = PRIV ;
			else if( cr->section == STRUCT_SEC )
				current->protection = protection = PUBL ;
			else if( cr->section == UNION_SEC )
				current->protection = protection = PUBL ;
			else if( cr->section == ENUM_SEC )
				current->protection = protection = PUBL ;
			else
				current->protection = protection = GLOB ;
			callcpplex() ;
			cr->program.clear() ;
		}
    }
    parseDoc( rt ) ;
}

void parseCpp(Entry* rt)
{
	current_root  = rt ;
	global_root   = rt ;
	protection    = GLOB ;
	current       = new Entry ;
	yyLineNr      = 1 ;
	yyFileName[0] = '\0' ;
	bracketCount  = 0 ;
	sharpCount    = 0 ;
	elseCount     = 0 ;
	lastTContext  = 0 ;

	inputString   = rt->program ;
	inputPosition = 0 ;
	cpprestart( cppin ) ;
	BEGIN( FindMembers ) ;
	callcpplex() ;
	rt->program.clear() ;
	parseCppClasses( rt ) ;

	delete current;
}

extern "C" {
	int	cppwrap()	{ return 1 ; }
};
