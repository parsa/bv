#define yy_create_buffer cpp_create_buffer
#define yy_delete_buffer cpp_delete_buffer
#define yy_scan_buffer cpp_scan_buffer
#define yy_scan_string cpp_scan_string
#define yy_scan_bytes cpp_scan_bytes
#define yy_flex_debug cpp_flex_debug
#define yy_init_buffer cpp_init_buffer
#define yy_flush_buffer cpp_flush_buffer
#define yy_load_buffer_state cpp_load_buffer_state
#define yy_switch_to_buffer cpp_switch_to_buffer
#define yyin cppin
#define yyleng cppleng
#define yylex cpplex
#define yyout cppout
#define yyrestart cpprestart
#define yytext cpptext
#define yywrap cppwrap

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

typedef int FILE; //#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplusx
#define __cplusplusx
#endif
#endif


#ifdef __cplusplus

//#include <stdlib.h>
//#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
//#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 154
#define YY_END_OF_BUFFER 155
static yyconst short int yy_accept[842] =
    {   0,
        0,    0,   82,   82,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   20,   20,    0,    0,    0,    0,    0,    0,
       46,   46,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  132,  132,  130,  130,    0,    0,  128,  128,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      155,  148,  148,  149,  148,   82,   82,   83,   82,  102,
      102,  103,  102,  108,  108,  109,  108,  108,  111,  111,

      112,  111,   95,   95,   94,   93,   95,   95,   95,   91,
       95,   30,   31,   35,  148,  148,  148,   71,   72,   70,
       73,   79,   80,  148,   74,   75,  148,  148,    2,    4,
      148,  149,  148,   36,   55,   37,   22,  148,   42,   38,
       22,   22,   22,   22,   22,   22,   22,   22,  148,   23,
       22,  148,   63,   64,  148,  148,   20,   20,   20,   20,
       41,   41,   41,   40,   39,   60,   60,   59,   59,   56,
       57,   58,   60,   46,   46,   53,   54,   54,   51,   52,
      148,  149,  148,  148,   68,   69,   65,   24,   24,   27,
       24,   24,   45,   45,   45,   44,   43,   77,   77,   76,

       77,   77,  148,  148,  148,  149,  148,  115,  115,  115,
      115,  115,  113,  113,  113,  114,  113,  113,  136,  136,
      143,  136,  136,  132,  132,  133,  132,  132,  130,  130,
      131,  130,  130,  134,  134,  141,  134,  134,  128,  128,
      129,  128,  135,  135,  142,  135,  135,  137,  137,  144,
      137,  137,  139,  139,  146,  139,  139,  140,  140,  147,
      140,  140,  138,  138,  145,  138,  138,    0,    1,  150,
      152,   82,   82,    1,   82,   82,  100,  101,  110,  106,
      107,   94,   94,   98,   97,   96,    0,    0,    0,    0,
       30,    0,   32,   33,    0,    0,   72,   73,   71,   72,

       73,   79,   80,    0,   74,    0,    0,    0,    3,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
       22,  150,  152,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,    0,   23,    0,    0,    0,   22,    0,
        0,    0,    0,    0,   20,   20,    1,   20,   20,   59,
       58,   58,   46,   46,    1,    0,   48,   49,  152,    0,
        0,    0,   67,  152,   25,    0,   26,    0,    0,    0,
        1,    0,   78,  150,  152,  151,    0,  153,    0,    1,
      153,  150,  152,  117,  117,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  114,  116,  116,  143,  132,  132,

        1,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  130,  130,    1,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  141,  128,  128,    1,
      128,  128,  142,  144,  146,  147,  145,    0,    0,   94,
       89,    0,    0,   34,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   88,    0,    0,   81,    0,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
        0,    0,   22,    0,    0,   49,   50,   49,    0,   47,
        0,   66,    0,   25,   78,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  132,  132,  132,  132,  132,

      132,  132,  132,  132,  132,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       88,   87,   86,    0,    0,   84,   81,    0,    0,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
        0,    0,   22,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  118,    0,    0,  132,  132,  132,  132,  132,
      132,  132,  118,  132,  132,  130,  130,  130,  130,  130,
      130,  130,  118,  130,  130,    0,    0,    0,    0,    0,
      104,    0,  105,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,   85,    0,
        0,   84,   22,   17,   22,   22,   22,   22,   22,   22,
       22,   22,   22,    0,    0,   22,   61,    0,  127,    0,
        0,  125,  124,    0,    0,  118,  126,    0,  127,  132,
      132,  125,  124,  132,  132,  118,  126,  132,  127,  130,
      130,  125,  124,  130,  130,  118,  126,  130,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   99,   15,
       22,   22,   22,   22,   22,   22,   22,   22,   18,    0,
        0,   28,   61,    0,   62,  127,    0,    0,  125,  124,
      121,    0,  126,    0,  127,  132,  132,  125,  124,  121,

      132,  126,  132,  127,  130,  130,  125,  124,  121,  130,
      126,  130,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   21,   22,   22,   22,   22,    5,   16,   22,    0,
      119,    0,  121,  123,    0,  119,  132,  121,  123,  132,
      119,  130,  121,  123,  130,    0,    0,    0,    0,    0,
        5,    0,   21,   22,   22,    7,   22,    5,    0,   29,
      119,    0,  123,  120,  119,  132,  123,  120,  119,  130,
      123,  120,    0,    0,    0,    7,    0,   22,   19,   19,
        7,   22,    0,    0,    0,    0,    0,  120,  132,  120,
      130,  120,    0,    0,    0,    0,   14,    6,    0,    0,

        0,    0,  122,  122,  122,    0,    0,    6,    6,    0,
        0,    0,    0,  122,  122,  122,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   11,   12,    0,    0,    0,
       92,    8,   12,    0,   13,    0,    9,   10,   90,   10,
        0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    3,    4,
        1,    1,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    1,    6,    7,    1,    1,    8,    1,    9,
       10,   11,    1,   12,    1,   13,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,   17,   18,
       19,   20,    1,   21,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       22,   23,   24,    1,   15,    1,   25,   26,   27,   28,

       29,   30,   31,   32,   33,   15,   15,   34,   35,   36,
       37,   38,   15,   39,   40,   41,   42,   43,   44,   45,
       46,   15,   47,    1,   48,   49,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[50] =
    {   0,
        1,    1,    2,    3,    1,    4,    1,    5,    6,    1,
        7,    1,    8,    4,    9,   10,    1,   11,    1,   11,
        1,    5,    1,    5,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    4,    4,   12
    } ;

static yyconst short int yy_base[907] =
    {   0,
        0,    1,    4,    5,    8,    9,   22,   23,   26,   27,
       40,   44,   48,   62,   85,    0,  133,  136,  139,  144,
      167,    0,  216,    0,  265,    0,  313,  359,  406,   14,
      454,    0,   66,   70,  147,  150,  318,  319,  500,  513,
      322,  333,  526,  573,  342,  350,  364,  370,  381,  384,
      458,  462,  463,  476,  353,  480,  484,  522,  531,  535,
      548,  549,  553,  567,  578,  581,  582,  587,  595,  596,
      601,  602,  610,  615,  623,  624,  628,  629,  637,  642,
     2363, 2364, 2360, 2364,   21,    0,   79, 2364,   46, 2364,
     2359, 2364,  146, 2364, 2358, 2364, 2345,  152, 2364, 2356,

     2364,  320, 2364, 2355,   36, 2364, 2342,  334, 2329,   50,
     2325,    0, 2364, 2364, 2343,   73,  335,    0, 2349, 2364,
     2348,    0,   26,  347,    0, 2364,  397, 2344, 2364, 2364,
      661,  644,  656,  481, 2364, 2364,    0,  482, 2364, 2364,
     2315,  313, 2312, 2309,  458, 2305, 2299, 2308,  504,  480,
       29,  350, 2364, 2364, 2306, 2310,    0,  497,    0,  527,
     2364, 2339,  547, 2364, 2364, 2364, 2338,  650,  664, 2364,
     2364,  516,  554,    0,  675, 2364, 2333,  579, 2364, 2364,
      668,  681, 2332,  669, 2364, 2364, 2364, 2364, 2335, 2364,
      682,  701, 2364, 2334,  686, 2364, 2364, 2324,  705, 2364,

      697,  699, 2320, 2329,  388, 2364,  710, 2364, 2330, 2364,
      701,  700, 2364, 2329, 2364,  714,  716,    0, 2364, 2328,
      728,  723,    0,    0,  457, 2364,  731,  721,    0,  562,
     2364,  733,  740, 2364, 2327,  748,  744,    0,    0,  609,
     2364,  752, 2364, 2326,  767,  763,    0, 2364, 2325,  781,
      776,    0, 2364, 2324,  788,  783,    0, 2364, 2323,  795,
      790,    0, 2364, 2322,  802,  797,    0, 2321, 2364, 2364,
     2364,    0,  724,    0,    0,    0, 2301, 2300, 2364, 2364,
     2364,  531,  799, 2364, 2364, 2364, 2291,  785,  798, 2283,
        0, 2308, 2364, 2364, 2313,  779, 2313, 2312,    0, 2311,

     2310,    0,  542,  631,    0,  811, 2306, 2305, 2364,    0,
      815,  810, 2276, 2273, 2272,  783, 2266, 2260, 2269,  819,
        0,  144,  677, 2279, 2261, 2261, 2260, 2271,  342, 2273,
     2259, 2259, 2263,    0,  544,  439,  745, 2266, 2261,  812,
     2256, 2260, 2255, 2251,    0,  814,    0,    0,    0,  828,
      831,  838,    0,  842,    0, 2283, 2364,  834, 2284,  846,
     2273, 2280, 2364,  850,    0,  854, 2364, 2274,  851,  859,
     2273,  864, 2272,  858, 2271, 2364, 2277, 2364,  869, 2276,
     2277, 2274, 2273, 2364, 2364,  835, 2231, 2246, 2249, 2248,
     2243, 2242, 2224, 2240,  876, 2364, 2364,  879,    0,  883,

        0,    0,    0,  849, 2223, 2238, 2241, 2240, 2235, 2234,
     2216, 2232,    0,  890,    0,    0,    0,  854, 2215, 2230,
     2233, 2232, 2227, 2226, 2208, 2224,  894,    0,  898,    0,
        0,    0,  900,  903,  906,  909,  912,  720,  871, 2249,
     2364, 2220, 2222, 2364, 2238, 2234, 2222, 2204, 2204,  585,
     2218, 2204, 2204, 2208,  917, 2193, 2235,  315,  848, 2198,
     2202, 2207, 2206, 2195, 2190, 2191, 2197, 2188, 2200, 2191,
     2194, 2196, 2189, 2184, 2186,  920, 2364,  922, 2218, 2364,
      925, 2364,  930,    0,  934, 2190, 2179, 2192, 2183, 2182,
     2177, 2174, 2185, 2175, 2173, 2180, 2169, 2182, 2173, 2172,

     2167, 2164, 2175, 2165, 2163, 2170, 2159, 2172, 2163, 2162,
     2157, 2154, 2165, 2155, 2153, 2180, 2179, 2185, 2184, 2154,
     2139, 2145, 2149, 2154, 2139, 2140, 2146, 2137, 2149, 2140,
      937,  930, 2364, 2165, 2171, 2364, 2171,  872, 2169, 2132,
      943, 2132, 2131, 2144, 2143, 2138, 2133, 2138, 2136, 2127,
     2126, 2128, 2129, 2118, 2114, 2117, 2124, 2126, 2117, 2124,
     2127, 2109,  946, 2121, 2109, 2108, 2115, 2117, 2108, 2115,
     2118, 2100,  949, 2112, 2100, 2099, 2106, 2108, 2099, 2106,
     2109, 2091,  952, 2103, 2091, 2119,  947, 2118,  948, 2124,
     2364, 2123, 2364, 2090, 2082, 2084,  960, 2084, 2097, 2092,

     2087, 2092, 2090, 2081,  955, 2105,  956, 2111, 2364,  923,
     2110, 2364,  968,  971, 2077, 2082, 2070, 2069, 2082, 2081,
     2066, 2077,  974, 2074, 2068, 2100,  977,  980,  983, 2065,
     2063,  987, 2097, 2064, 2059,  990,  993, 2064,  996, 2059,
     2057,  999, 2091, 2058, 2053, 1002, 1005, 2058, 1008, 2053,
     2051, 1011, 2085, 2052, 2047, 1014, 1017, 2052, 2037, 2054,
     1020, 2052, 2039, 2049, 2048, 2033, 2044, 1023, 2364, 1026,
     2069, 2044, 2028, 2035, 2022, 2046, 1029, 2031, 1032, 1951,
     1877, 1879, 1035, 1038, 2364, 1041, 1819, 1769, 1045, 1795,
     1048, 1750, 1051, 1726, 1054, 1723, 1700, 1057, 1731, 1060,

     1685, 1063, 1680, 1066, 1673, 1669, 1069, 1704, 1072, 1669,
     1075, 1630, 1296, 1299, 1312, 1307, 1294, 1317, 1078, 1302,
     1328, 1327, 1302, 1289, 1311, 1297, 1081, 1084, 1087, 1322,
     1090, 1291, 1093, 1096, 1287, 1099, 1289, 1102, 1105, 1285,
     1108, 1287, 1111, 1114, 1282, 1288, 1290, 1288, 1298, 1283,
     1117, 1120, 1308, 1281, 1125, 1172, 1281, 1175, 1178, 1305,
     1181, 1270, 1184, 1187, 1190, 1269, 1193, 1196, 1199, 1268,
     1205, 1208, 1180, 1192, 1177, 1211,  940, 1218, 2364,    0,
     1221,  944,  909,  896,  880,  865,  831, 1224,  811, 1227,
      792, 1230,  777,  748, 1233,  738, 1236, 1239,  724,  678,

      653,  654, 1242, 1245, 1248,  649,  624, 1251, 1254,  612,
      605,  593,  570, 1257, 1260, 1263,  553,  525,  473, 1266,
      464,  449,  372,  348, 1269, 1272, 1275,  318, 1278,  109,
     2364, 1281, 1284, 1287, 1290,   34, 1293, 1296, 2364, 1299,
     2364, 1340, 1352, 1364, 1376, 1388, 1400, 1412, 1424, 1436,
     1448, 1460, 1472, 1484, 1496, 1508, 1520, 1532, 1544, 1556,
     1568, 1580, 1592, 1604, 1616, 1628, 1640, 1652, 1664, 1676,
     1681, 1691, 1699, 1704, 1707, 1718, 1723, 1735, 1747, 1759,
     1771, 1783, 1795, 1807, 1819, 1831, 1843, 1855, 1867, 1879,
     1891, 1903, 1915, 1927, 1939, 1951, 1963, 1975, 1987, 1999,

     2011, 2023, 2035, 2047, 2058, 2069
    } ;

static yyconst short int yy_def[907] =
    {   0,
      842,  842,  843,  843,  844,  844,  845,  845,  846,  846,
      847,  847,  847,  847,  841,   15,  842,  842,  842,  842,
      841,   21,  841,   23,  841,   25,  842,  842,  841,   29,
      842,   31,  848,  848,  842,  842,  849,  849,  850,  850,
      851,  851,  842,  842,  842,  842,  852,  852,  853,  853,
      854,  854,  842,  842,  855,  855,  856,  856,  857,  857,
      858,  858,  859,  859,  860,  860,  861,  861,  862,  862,
      863,  863,  864,  864,  865,  865,  866,  866,  867,  867,
      841,  841,  868,  841,  841,  869,  870,  841,  869,  841,
      868,  841,  841,  841,  868,  841,  841,  841,  841,  868,

      841,  841,  841,  868,  841,  841,  841,  841,  841,  841,
      841,  871,  841,  841,  872,  841,  841,  873,  841,  841,
      841,  874,  841,  841,  875,  841,  841,  876,  841,  841,
      841,  841,  841,  841,  841,  841,  877,  841,  841,  841,
      877,  877,  877,  877,  877,  877,  877,  877,  131,  841,
      877,  841,  841,  841,  841,  841,  878,  879,  878,  878,
      841,  868,  841,  841,  841,  841,  868,  841,  841,  841,
      841,  841,  841,  880,  881,  841,  882,  841,  841,  841,
      841,  841,  883,  841,  841,  841,  841,  841,  868,  841,
      841,  841,  841,  868,  841,  841,  841,  884,  885,  841,

      884,  884,  841,  886,  887,  841,  886,  841,  868,  841,
      841,  841,  841,  868,  841,  841,  841,  212,  841,  868,
      841,  841,  212,  888,  889,  841,  888,  888,  890,  891,
      841,  890,  890,  841,  868,  841,  841,  212,  892,  893,
      841,  892,  841,  868,  841,  841,  212,  841,  868,  841,
      841,  212,  841,  868,  841,  841,  212,  841,  868,  841,
      841,  212,  841,  868,  841,  841,  212,  868,  841,  841,
      841,  869,  870,  869,  869,  869,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      871,  872,  841,  841,  841,  841,  841,  841,  873,  841,

      841,  874,  841,  841,  875,  841,  876,  876,  841,  131,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      877,  841,  894,  877,  877,  877,  877,  877,  877,  877,
      877,  877,  877,  149,  841,  841,  841,  841,  877,  841,
      841,  841,  841,  841,  878,  879,  878,  878,  878,  841,
      841,  841,  880,  881,  880,  882,  841,  841,  895,  841,
      841,  883,  841,  841,  896,  841,  841,  884,  884,  885,
      884,  885,  884,  884,  884,  841,  886,  841,  887,  886,
      868,  886,  886,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  888,  889,

      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  890,  891,  890,  890,  890,  890,  890,  890,
      890,  890,  890,  890,  890,  890,  841,  892,  893,  892,
      892,  892,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  894,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  897,  841,  897,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      841,  841,  877,  841,  841,  841,  841,  841,  895,  841,
      841,  841,  841,  896,  885,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  888,  888,  888,  888,  888,

      888,  888,  888,  888,  888,  890,  890,  890,  890,  890,
      890,  890,  890,  890,  890,  898,  899,  900,  901,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  902,  897,  841,  841,  903,  904,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      841,  841,  877,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  890,  890,  890,  890,  890,
      890,  890,  890,  890,  890,  898,  841,  899,  841,  900,
      841,  901,  841,  841,  841,  841,  841,  841,  841,  841,

      841,  841,  841,  841,  841,  902,  841,  903,  841,  903,
      904,  841,  877,  841,  877,  877,  877,  877,  877,  877,
      877,  877,  877,  841,  841,  877,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  890,  890,
      890,  890,  890,  890,  890,  890,  890,  890,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      905,  877,  877,  877,  877,  877,  877,  877,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  888,  888,  888,  888,  888,  888,

      888,  888,  888,  890,  890,  890,  890,  890,  890,  890,
      890,  890,  841,  841,  841,  841,  841,  841,  841,  841,
      906,  905,  877,  877,  877,  877,  877,  841,  877,  841,
      841,  841,  841,  841,  841,  888,  888,  888,  888,  888,
      890,  890,  890,  890,  890,  841,  841,  841,  841,  841,
      841,  841,  906,  877,  841,  877,  877,  841,  841,  841,
      841,  841,  841,  841,  888,  888,  888,  888,  890,  890,
      890,  890,  841,  841,  841,  841,  841,  877,  841,  877,
      841,  877,  841,  841,  841,  841,  841,  841,  888,  888,
      890,  890,  841,  841,  841,  841,  841,  877,  841,  841,

      841,  841,  841,  888,  890,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  888,  890,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
        0,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,

      841,  841,  841,  841,  841,  841
    } ;

static yyconst short int yy_nxt[2414] =
    {   0,
      841,   83,   83,   84,   84,   87,   87,   88,   88,   91,
       91,   92,   92,   85,   85,  841,  149,   89,   89,  841,
      150,   93,   93,   95,   95,   96,   96,  100,  100,  101,
      101,  270,   97,   97,  271,   98,   98,  303,  282,  102,
      102,  104,  303,  105,  106,  104,  283,  105,  106,  104,
      107,  110,  288,  108,  107,  151,  275,  108,  107,  276,
      289,  108,  109,  104,  333,  110,  109,  158,  339,  159,
      111,  158,  107,  159,   82,  108,  294,  295,   82,  160,
      274,  839,  268,  160,  111,   82,   83,   82,   84,   82,
       82,   82,   82,   82,   82,   82,   82,  112,   85,  112,

      112,   82,   82,   82,   82,   82,   82,   82,   82,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,   82,   82,   82,   83,  113,  114,   83,  113,  114,
       83,  115,  114,  836,  115,   83,   85,  114,   83,   85,
       84,   83,   85,   84,  455,  116,  277,   85,  116,  278,
       85,  116,  280,   85,  456,  281,  116,   82,   83,  117,
       84,   82,   82,   82,  118,   82,   82,  118,   82,   82,
       85,  118,  119,  120,   82,   82,   82,   82,  118,   82,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,

      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  121,   82,   82,   82,   83,   82,   84,
       82,   82,   82,  122,   82,   82,  122,  123,   82,   85,
      122,   82,  123,   82,   82,   82,   82,  122,   82,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,   82,   82,   82,   82,   83,  124,   84,   82,
       82,   82,   82,   82,   82,  125,  126,  125,   85,  125,
       82,  120,  125,   82,  125,   82,   82,   82,   82,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,

      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  121,   82,   82,   83,  127,   84,  537,  128,  162,
      162,   84,   84,  175,  129,  176,   85,  177,  538,  129,
      280,  163,  163,  281,  175,  178,  176,  296,  177,  164,
      164,  165,  165,   83,  285,   84,  178,  286,  325,  304,
      297,   83,  340,   84,  205,   85,  206,  326,  834,  130,
       83,  127,   84,   85,  128,  189,  207,  190,  179,  180,
      129,  189,   85,  190,  465,  129,  341,  191,  466,  179,
      180,  298,  194,  191,   84,  194,  192,   84,  187,  380,
      342,  381,  192,  298,  195,  831,  187,  195,  196,  306,

      197,  196,  307,  197,  830,  130,   82,   83,  131,  132,
      133,   82,   82,  134,  135,   82,  134,  136,  137,  138,
      137,  137,  136,  139,  136,   82,   82,  140,   82,   82,
      137,  137,  141,  137,  142,  137,  137,  137,  143,  137,
      137,  137,  144,  145,  137,  146,  147,  148,  137,  137,
      137,  137,   82,   82,  137,   83,  152,   84,  401,  199,
      268,  200,  153,  199,   83,  200,   84,   85,  201,  154,
      154,  202,  201,  203,  454,  202,   85,   83,  471,   84,
      155,  205,  337,  206,  829,  209,  203,  210,  320,   85,
      828,  320,  322,  207,  156,  323,  329,  211,  347,  330,

      154,  167,  168,  169,  168,  268,  334,  338,  170,  171,
      335,  172,  825,  173,  167,  168,  169,  168,  352,  352,
      352,  170,  171,  209,  172,  210,  173,   83,  181,  182,
      181,  183,  214,  282,  215,  211,  214,  348,  215,  184,
      349,  283,  212,  216,  217,  336,  337,  216,  217,  220,
      220,  221,  221,  303,  225,  218,  226,  270,  303,  824,
      271,  222,  222,  415,  270,  268,  227,  271,  225,  223,
      226,  338,  185,  186,   83,  181,  182,  181,  183,  230,
      227,  231,  230,  235,  231,  236,  184,  228,  235,  358,
      236,  232,  359,  823,  232,  237,  240,  240,  241,  241,

      237,  233,  244,  244,  245,  245,  822,  238,  242,  242,
      430,  249,  268,  250,  246,  246,  249,  525,  250,  185,
      186,  526,  247,  251,  254,  254,  255,  255,  251,  259,
      259,  260,  260,  304,  821,  252,  256,  256,  264,  820,
      265,  261,  261,  264,  257,  265,  311,  311,  311,  262,
      266,  819,  350,  350,  350,  266,  818,  312,  311,  311,
      311,  351,  267,  310,  311,  311,  350,  350,  350,  312,
      360,  360,  360,  817,  312,  351,  355,  298,  268,  270,
      268,  361,  364,  360,  360,  360,  813,  313,  268,  314,
      458,  812,  270,  315,  361,  365,  270,  459,  316,  271,

      317,  318,  319,  366,  367,  366,  371,  369,  268,  374,
      373,  384,  375,  378,  385,  372,  395,  395,  395,  811,
      382,  268,  268,  383,  386,  274,  396,  268,  387,  397,
      398,  398,  398,  270,  388,  389,  271,  390,  391,  392,
      393,  402,  394,  416,  403,  404,  417,  337,  810,  405,
      427,  427,  427,  808,  270,  406,  407,  271,  408,  409,
      410,  411,  431,  412,  418,  432,  516,  517,  419,  433,
      433,  433,  338,  270,  420,  421,  271,  422,  423,  424,
      425,  296,  426,  434,  434,  434,  270,  288,  807,  271,
      435,  435,  435,  270,  297,  289,  271,  436,  436,  436,

      270,  440,  806,  271,  437,  437,  437,  270,  289,  283,
      271,  441,  441,  306,  340,  347,  307,  311,  311,  311,
      445,  450,  268,  446,  451,  298,  320,  805,  312,  320,
      350,  350,  350,  352,  352,  352,  476,  477,  341,  351,
      352,  352,  352,  355,  478,  268,  804,  268,  360,  360,
      360,  536,  342,  482,  483,  268,  366,  367,  366,  361,
      371,  369,  268,  481,  373,  371,  803,  268,  369,  372,
      380,  373,  381,  486,  372,  609,  487,  485,  395,  395,
      395,  398,  398,  398,  401,  610,  268,  496,  268,  268,
      497,  415,  506,  268,  539,  507,  427,  427,  427,  430,

      802,  268,  433,  433,  433,  434,  434,  434,  435,  435,
      435,  436,  436,  436,  437,  437,  437,  518,  519,  531,
      801,  531,  476,  477,  476,  477,  609,  532,  482,  483,
      533,  800,  478,  482,  483,  371,  610,  268,  481,  531,
      605,  531,  799,  533,  372,  614,  614,  614,  636,  636,
      636,  646,  636,  646,  656,  636,  656,  587,  589,  798,
      591,  593,  614,  614,  614,  605,  607,  796,  533,  669,
      670,  670,  670,  614,  614,  614,  679,  679,  679,  683,
      683,  683,  684,  684,  684,  686,  686,  686,  685,  689,
      689,  689,  636,  636,  636,  693,  693,  693,  695,  686,

      695,  698,  689,  698,  646,  636,  646,  702,  693,  702,
      704,  686,  704,  707,  689,  707,  656,  636,  656,  711,
      693,  711,  670,  670,  670,  679,  679,  679,  670,  670,
      670,  728,  728,  728,  679,  679,  679,  683,  683,  683,
      684,  684,  684,  686,  686,  686,  685,  689,  689,  689,
      733,  733,  733,  693,  693,  693,  695,  686,  695,  698,
      689,  698,  738,  733,  738,  702,  693,  702,  704,  686,
      704,  707,  689,  707,  743,  733,  743,  711,  693,  711,
      728,  728,  728,  758,  758,  758,  728,  728,  728,  759,
      759,  759,  761,  761,  761,  733,  733,  733,  763,  763,

      763,  765,  761,  765,  738,  733,  738,  767,  763,  767,
      769,  761,  769,  743,  733,  743,  771,  763,  771,  758,
      758,  758,  759,  759,  759,  779,  779,  779,  779,  779,
      779,  779,  779,  779,  779,  779,  779,  780,  779,  321,
      780,  779,  779,  779,  779,  779,  779,  779,  779,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  779,  779,  780,  781,  781,  781,  758,  758,  758,
      759,  759,  759,  761,  761,  761,  763,  763,  763,  788,
      788,  788,  765,  761,  765,  767,  763,  767,  790,  788,

      790,  769,  761,  769,  783,  795,  784,  771,  763,  771,
      792,  788,  792,  781,  781,  781,  794,  785,  793,  786,
      797,  797,  797,  781,  781,  781,  788,  788,  788,  790,
      788,  790,  792,  788,  792,  797,  797,  797,  797,  797,
      797,  809,  809,  809,  814,  814,  814,  815,  814,  815,
      816,  814,  816,  809,  809,  809,  809,  809,  809,  814,
      814,  814,  815,  814,  815,  816,  814,  816,  826,  826,
      826,  832,  832,  832,  826,  826,  826,  833,  833,  833,
      835,  835,  835,  832,  832,  832,  833,  833,  833,  837,
      837,  837,  835,  835,  835,  837,  837,  837,  840,  840,

      840,  840,  840,  840,  791,  789,  787,  760,  782,  778,
      841,  777,  827,  776,  775,  774,  773,  772,  827,  770,
      768,  766,  764,  762,  760,  757,  756,  755,  754,  841,
      721,  752,  751,  838,  750,  749,  748,  747,  746,  838,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,

      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  204,  204,  204,  204,

      204,  204,  204,  204,  204,  204,  204,  204,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  243,  243,  243,  243,  243,  243,  243,  243,

      243,  243,  243,  243,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  272,  272,  745,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  291,  291,
      291,  292,  292,  292,  292,  292,  292,  292,  292,  292,

      292,  292,  292,  299,  744,  299,  708,  299,  302,  742,
      302,  741,  302,  305,  305,  305,  740,  305,  308,  308,
      739,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      321,  321,  321,  699,  321,  345,  345,  345,  345,  345,
      737,  345,  345,  345,  345,  345,  345,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  353,
      353,  736,  735,  353,  353,  353,  353,  353,  353,  353,
      353,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  356,  356,  734,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  362,  362,  690,  362,  362,

      362,  362,  362,  362,  362,  362,  362,  368,  368,  732,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  399,  399,  731,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  413,
      413,  682,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  414,  414,  414,  414,  414,  414,  414,  414,  414,

      414,  414,  414,  428,  428,  730,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  484,  484,  682,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  588,  588,  588,
      588,  588,  588,  588,  588,  588,  588,  588,  588,  590,

      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  722,
      729,  727,  726,  725,  724,  722,  722,  722,  723,  722,
      753,  721,  720,  719,  718,  717,  753,  753,  753,  716,
      753,  715,  714,  713,  712,  710,  709,  708,  706,  705,
      703,  701,  700,  699,  697,  696,  694,  692,  691,  690,

      688,  687,  682,  681,  680,  678,  677,  676,  675,  674,
      673,  672,  671,  612,  609,  607,  668,  667,  666,  665,
      664,  663,  662,  661,  660,  659,  593,  591,  589,  587,
      658,  657,  655,  654,  653,  652,  651,  650,  649,  648,
      647,  645,  644,  643,  642,  641,  640,  639,  638,  637,
      635,  634,  633,  632,  631,  630,  629,  628,  627,  626,
      625,  624,  623,  622,  621,  620,  619,  618,  617,  616,
      615,  613,  612,  537,  536,  607,  604,  603,  602,  601,
      600,  599,  598,  597,  596,  595,  594,  593,  591,  589,
      587,  585,  584,  583,  582,  581,  580,  579,  578,  577,

      576,  575,  574,  573,  572,  571,  570,  569,  568,  567,
      566,  565,  564,  563,  562,  561,  560,  559,  558,  557,
      556,  480,  555,  554,  553,  552,  551,  550,  549,  548,
      547,  546,  545,  544,  543,  542,  541,  540,  536,  534,
      530,  529,  528,  527,  524,  523,  522,  458,  455,  521,
      520,  440,  515,  514,  513,  512,  511,  510,  509,  508,
      505,  504,  503,  502,  501,  500,  499,  498,  495,  494,
      493,  492,  491,  490,  489,  488,  378,  378,  269,  378,
      378,  369,  369,  369,  369,  363,  481,  480,  357,  475,
      474,  344,  343,  473,  472,  470,  469,  468,  467,  464,

      463,  462,  461,  460,  454,  453,  452,  449,  448,  447,
      309,  309,  301,  300,  301,  300,  444,  293,  443,  442,
      439,  438,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  378,  376,  369,  269,  269,  363,  357,  269,
      269,  344,  343,  333,  332,  331,  328,  327,  324,  309,
      301,  300,  293,  290,  287,  284,  269,  269,  279,  269,
      269,  269,  841,   81,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,

      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841
    } ;

static yyconst short int yy_chk[2414] =
    {   0,
        0,    1,    2,    1,    2,    3,    4,    3,    4,    5,
        6,    5,    6,    1,    2,    0,   30,    3,    4,    0,
       30,    5,    6,    7,    8,    7,    8,    9,   10,    9,
       10,   85,    7,    8,   85,    7,    8,  123,  105,    9,
       10,   11,  123,   11,   11,   12,  105,   12,   12,   13,
       11,   13,  110,   11,   12,   30,   89,   12,   13,   89,
      110,   13,   11,   14,  151,   14,   12,   33,  151,   33,
       13,   34,   14,   34,   33,   14,  116,  116,   34,   33,
       87,  836,   87,   34,   14,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   17,   17,   17,   18,   18,   18,
       19,   17,   19,  830,   18,   20,   17,   20,   35,   18,
       35,   36,   19,   36,  322,   17,   93,   20,   18,   93,
       35,   19,   98,   36,  322,   98,   20,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   27,   27,   27,  458,   27,   37,
       38,   37,   38,   41,   27,   41,   27,   41,  458,   27,
      102,   37,   38,  102,   42,   41,   42,  117,   42,   37,
       38,   37,   38,   45,  108,   45,   42,  108,  142,  124,
      117,   46,  152,   46,   55,   45,   55,  142,  828,   27,
       28,   28,   28,   46,   28,   47,   55,   47,   41,   41,
       28,   48,   28,   48,  329,   28,  152,   47,  329,   42,
       42,  117,   49,   48,   49,   50,   47,   50,   45,  205,
      152,  205,   48,  124,   49,  824,   46,   50,   49,  127,

       49,   50,  127,   50,  823,   28,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   31,   31,   31,  225,   51,
      225,   51,   31,   52,   53,   52,   53,   31,   51,   31,
       31,   51,   52,   53,  336,   52,   53,   54,  336,   54,
       31,   56,  150,   56,  822,   57,   54,   57,  134,   54,
      821,  134,  138,   56,   31,  138,  145,   57,  158,  145,

       31,   39,   39,   39,   39,  158,  149,  150,   39,   39,
      149,   39,  819,   39,   40,   40,   40,   40,  172,  172,
      172,   40,   40,   58,   40,   58,   40,   43,   43,   43,
       43,   43,   59,  282,   59,   58,   60,  160,   60,   43,
      160,  282,   58,   59,   59,  149,  335,   60,   60,   61,
       62,   61,   62,  303,   63,   60,   63,  163,  303,  818,
      163,   61,   62,  230,  173,  230,   63,  173,   64,   62,
       64,  335,   43,   43,   44,   44,   44,   44,   44,   65,
       64,   65,   66,   67,   66,   67,   44,   64,   68,  178,
       68,   65,  178,  817,   66,   67,   69,   70,   69,   70,

       68,   66,   71,   72,   71,   72,  813,   68,   69,   70,
      240,   73,  240,   73,   71,   72,   74,  450,   74,   44,
       44,  450,   72,   73,   75,   76,   75,   76,   74,   77,
       78,   77,   78,  304,  812,   74,   75,   76,   79,  811,
       79,   77,   78,   80,   76,   80,  132,  132,  132,   78,
       79,  810,  168,  168,  168,   80,  807,  132,  133,  133,
      133,  168,   80,  131,  131,  131,  169,  169,  169,  133,
      181,  181,  181,  806,  131,  169,  175,  304,  175,  184,
      175,  181,  184,  182,  182,  182,  802,  131,  175,  131,
      323,  801,  191,  131,  182,  191,  195,  323,  131,  195,

      131,  131,  131,  192,  192,  192,  199,  201,  199,  202,
      201,  211,  202,  207,  211,  199,  216,  216,  216,  800,
      207,  175,  175,  207,  212,  273,  217,  273,  212,  217,
      221,  221,  221,  222,  212,  212,  222,  212,  212,  212,
      212,  227,  212,  232,  227,  228,  232,  337,  799,  228,
      236,  236,  236,  796,  237,  228,  228,  237,  228,  228,
      228,  228,  242,  228,  233,  242,  438,  438,  233,  245,
      245,  245,  337,  246,  233,  233,  246,  233,  233,  233,
      233,  296,  233,  250,  250,  250,  251,  288,  794,  251,
      255,  255,  255,  256,  296,  288,  256,  260,  260,  260,

      261,  283,  793,  261,  265,  265,  265,  266,  289,  283,
      266,  289,  283,  306,  340,  346,  306,  311,  311,  311,
      312,  316,  346,  312,  316,  296,  320,  791,  311,  320,
      350,  350,  350,  351,  351,  351,  358,  358,  340,  350,
      352,  352,  352,  354,  358,  354,  789,  354,  360,  360,
      360,  459,  340,  364,  364,  354,  366,  366,  366,  360,
      370,  369,  370,  364,  369,  372,  787,  372,  374,  370,
      379,  374,  379,  386,  372,  538,  386,  372,  395,  395,
      395,  398,  398,  398,  400,  538,  400,  404,  354,  354,
      404,  414,  418,  414,  459,  418,  427,  427,  427,  429,

      786,  429,  433,  433,  433,  434,  434,  434,  435,  435,
      435,  436,  436,  436,  437,  437,  437,  439,  439,  455,
      785,  455,  476,  476,  478,  478,  610,  455,  481,  481,
      455,  784,  478,  483,  483,  485,  610,  485,  481,  531,
      532,  531,  783,  532,  485,  541,  541,  541,  563,  563,
      563,  573,  573,  573,  583,  583,  583,  587,  589,  782,
      587,  589,  597,  597,  597,  605,  607,  777,  605,  607,
      613,  613,  613,  614,  614,  614,  623,  623,  623,  627,
      627,  627,  628,  628,  628,  629,  629,  629,  628,  632,
      632,  632,  636,  636,  636,  637,  637,  637,  639,  639,

      639,  642,  642,  642,  646,  646,  646,  647,  647,  647,
      649,  649,  649,  652,  652,  652,  656,  656,  656,  657,
      657,  657,  661,  661,  661,  668,  668,  668,  670,  670,
      670,  677,  677,  677,  679,  679,  679,  683,  683,  683,
      684,  684,  684,  686,  686,  686,  684,  689,  689,  689,
      691,  691,  691,  693,  693,  693,  695,  695,  695,  698,
      698,  698,  700,  700,  700,  702,  702,  702,  704,  704,
      704,  707,  707,  707,  709,  709,  709,  711,  711,  711,
      719,  719,  719,  727,  727,  727,  728,  728,  728,  729,
      729,  729,  731,  731,  731,  733,  733,  733,  734,  734,

      734,  736,  736,  736,  738,  738,  738,  739,  739,  739,
      741,  741,  741,  743,  743,  743,  744,  744,  744,  751,
      751,  751,  752,  752,  752,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  756,  756,  756,  758,  758,  758,
      759,  759,  759,  761,  761,  761,  763,  763,  763,  764,
      764,  764,  765,  765,  765,  767,  767,  767,  768,  768,

      768,  769,  769,  769,  759,  775,  759,  771,  771,  771,
      772,  772,  772,  776,  776,  776,  774,  759,  773,  759,
      778,  778,  778,  781,  781,  781,  788,  788,  788,  790,
      790,  790,  792,  792,  792,  795,  795,  795,  797,  797,
      797,  798,  798,  798,  803,  803,  803,  804,  804,  804,
      805,  805,  805,  808,  808,  808,  809,  809,  809,  814,
      814,  814,  815,  815,  815,  816,  816,  816,  820,  820,
      820,  825,  825,  825,  826,  826,  826,  827,  827,  827,
      829,  829,  829,  832,  832,  832,  833,  833,  833,  834,
      834,  834,  835,  835,  835,  837,  837,  837,  838,  838,

      838,  840,  840,  840,  770,  766,  762,  760,  757,  754,
      753,  750,  820,  749,  748,  747,  746,  745,  826,  742,
      740,  737,  735,  732,  730,  726,  725,  724,  723,  722,
      721,  720,  718,  834,  717,  716,  715,  714,  713,  837,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  844,  844,  844,  844,  844,  844,
      844,  844,  844,  844,  844,  844,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  846,  846,
      846,  846,  846,  846,  846,  846,  846,  846,  846,  846,

      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  848,  848,  848,  848,  848,  848,  848,  848,
      848,  848,  848,  848,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  855,  855,  855,  855,

      855,  855,  855,  855,  855,  855,  855,  855,  856,  856,
      856,  856,  856,  856,  856,  856,  856,  856,  856,  856,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  858,  858,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  859,  859,  859,  859,  859,  859,
      859,  859,  859,  859,  859,  859,  860,  860,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      862,  862,  862,  862,  862,  862,  862,  862,  862,  862,
      862,  862,  863,  863,  863,  863,  863,  863,  863,  863,

      863,  863,  863,  863,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  865,  865,  865,  865,
      865,  865,  865,  865,  865,  865,  865,  865,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      867,  867,  867,  867,  867,  867,  867,  867,  867,  867,
      867,  867,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  869,  869,  712,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  871,  871,
      871,  872,  872,  872,  872,  872,  872,  872,  872,  872,

      872,  872,  872,  873,  710,  873,  708,  873,  874,  706,
      874,  705,  874,  875,  875,  875,  703,  875,  876,  876,
      701,  876,  876,  876,  876,  876,  876,  876,  876,  876,
      877,  877,  877,  699,  877,  878,  878,  878,  878,  878,
      697,  878,  878,  878,  878,  878,  878,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  880,
      880,  696,  694,  880,  880,  880,  880,  880,  880,  880,
      880,  881,  881,  881,  881,  881,  881,  881,  881,  881,
      881,  881,  881,  882,  882,  692,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  883,  883,  690,  883,  883,

      883,  883,  883,  883,  883,  883,  883,  884,  884,  688,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  885,
      885,  885,  885,  885,  885,  885,  885,  885,  885,  885,
      885,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  888,  888,  687,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  889,  889,  889,
      889,  889,  889,  889,  889,  889,  889,  889,  889,  890,
      890,  682,  890,  890,  890,  890,  890,  890,  890,  890,
      890,  891,  891,  891,  891,  891,  891,  891,  891,  891,

      891,  891,  891,  892,  892,  681,  892,  892,  892,  892,
      892,  892,  892,  892,  892,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  896,  896,  680,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  899,  899,  899,
      899,  899,  899,  899,  899,  899,  899,  899,  899,  900,

      900,  900,  900,  900,  900,  900,  900,  900,  900,  900,
      900,  901,  901,  901,  901,  901,  901,  901,  901,  901,
      901,  901,  901,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  903,  903,  903,  903,  903,
      903,  903,  903,  903,  903,  903,  903,  904,  904,  904,
      904,  904,  904,  904,  904,  904,  904,  904,  904,  905,
      678,  676,  675,  674,  673,  905,  905,  905,  672,  905,
      906,  671,  667,  666,  665,  664,  906,  906,  906,  663,
      906,  662,  660,  659,  658,  655,  654,  653,  651,  650,
      648,  645,  644,  643,  641,  640,  638,  635,  634,  633,

      631,  630,  626,  625,  624,  622,  621,  620,  619,  618,
      617,  616,  615,  611,  608,  606,  604,  603,  602,  601,
      600,  599,  598,  596,  595,  594,  592,  590,  588,  586,
      585,  584,  582,  581,  580,  579,  578,  577,  576,  575,
      574,  572,  571,  570,  569,  568,  567,  566,  565,  564,
      562,  561,  560,  559,  558,  557,  556,  555,  554,  553,
      552,  551,  550,  549,  548,  547,  546,  545,  544,  543,
      542,  540,  539,  537,  535,  534,  530,  529,  528,  527,
      526,  525,  524,  523,  522,  521,  520,  519,  518,  517,
      516,  515,  514,  513,  512,  511,  510,  509,  508,  507,

      506,  505,  504,  503,  502,  501,  500,  499,  498,  497,
      496,  495,  494,  493,  492,  491,  490,  489,  488,  487,
      486,  479,  475,  474,  473,  472,  471,  470,  469,  468,
      467,  466,  465,  464,  463,  462,  461,  460,  457,  456,
      454,  453,  452,  451,  449,  448,  447,  446,  445,  443,
      442,  440,  426,  425,  424,  423,  422,  421,  420,  419,
      412,  411,  410,  409,  408,  407,  406,  405,  394,  393,
      392,  391,  390,  389,  388,  387,  383,  382,  381,  380,
      377,  375,  373,  371,  368,  362,  361,  359,  356,  344,
      343,  342,  341,  339,  338,  333,  332,  331,  330,  328,

      327,  326,  325,  324,  319,  318,  317,  315,  314,  313,
      308,  307,  301,  300,  298,  297,  295,  292,  290,  287,
      278,  277,  268,  264,  259,  254,  249,  244,  235,  220,
      214,  209,  204,  203,  198,  194,  189,  183,  177,  167,
      162,  156,  155,  148,  147,  146,  144,  143,  141,  128,
      121,  119,  115,  111,  109,  107,  104,  100,   97,   95,
       91,   83,   81,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,

      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#define INITIAL 0
/*************************************************************************

    CPP lexer

    This file is derived from the DOC++ source by Roland Wunderling
    and Malte Zoeckler.

    Better handling of typedefs, linenumbers, formatting, comments
    and various other improvements was made. Still a lot to be done
    to handle all modern C++ constructs. <bjarke@viksoe.dk>

 *************************************************************************/

#pragma code_seg( "MISC" )

/*
 *	Includes
 */

#include "CppTypes.h"


/* -----------------------------------------------------------------
 *
 *	statics
 */
static const char*	inputString ;
static int		inputPosition ;
static int		lastContext ;
static int		lastCContext ;
static int		lastTContext;
static int		protection   = GLOB ;
static int		bracketCount = 0 ;
static int		sharpCount   = 0 ;
static Entry*		current_root = 0 ;
static Entry*		global_root  = 0 ;
static Entry*		current      = 0 ;

static int		yyLineNr = 1 ;
static char		yyFileName[264] ;
static McString*	currentString ;

static void msg( const char* str, const char* str2=NULL )
{
#ifdef _DEBUG
	if( verb )
	{
		printf( "%s(%d):\t%s", yyFileName, yyLineNr, str ) ;
		if( str2 ) printf( "%s", str2 ) ;
		printf( "\n" ) ;
	}
#endif
}

static void lineCount()
{
	for( const char* c = yytext ; *c ; ++c )
		yyLineNr += (*c == '\n') ;
}


static void addType( Entry* current )
{
   if( !current->name.empty() ) {
      if( !current->type.empty() ) current->type += ' ' ;
      current->type += current->name ;
      current->name.clear() ;
   }
   if( !current->args.empty() ) {
      if( !current->type.empty() ) current->type += ' ' ;
      current->type += current->args ;
      current->args.clear() ;
   }
}

/* -----------------------------------------------------------------
 */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result = yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
	int c = 0;
	while( c < max_size && inputString[inputPosition] )
	{
		*buf = inputString[inputPosition++] ;
		c++; buf++;
	}
	return c;
}

#define Cxx_Memo 1

#define SubDoc 2

#define SubDocComment 3

#define SubDocCppComment 4

#define Doc 5

#define VerbDoc 6

#define Define 7

#define DefineEnd 8

#define DefineEnded 9

#define ClassName 10

#define TypedefName 11

#define Bases 12

#define NextSemi 13

#define FindMembers 14

#define Function 15

#define Operator 16

#define Throws 17

#define Array 18

#define Round 19

#define Curly 20

#define SkipCurly 21

#define SkipInits 22

#define SkipDefine 23

#define Sharp 24

#define Comment 25

#define SkipComment 26

#define SkipCxxComment 27

#define CppDoc 28

#define CppMemo 29

#define See 30

#define Args 31

#define Type 32

#define Author 33

#define Name 34

#define Version 35

#define Param 36

#define Memo 37

#define Return 38

#define Exception 39


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplusx
//#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;




	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 842 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 841 );
		yy_cp = yy_last_accepting_cpos;
		yy_current_state = yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{ 
					  yyLineNr = 1 ; 
					  int i;
					  for( i = 0 ; yytext[i+1] != 6 ; i++ )
						yyFileName[i] = yytext[i+1] ;
					  yyFileName[i] = 0 ;
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
{ BEGIN( FindMembers ) ; }
	YY_BREAK
case 3:
YY_RULE_SETUP

	YY_BREAK
case 4:
YY_RULE_SETUP
{ BEGIN( SkipCurly ) ; }
	YY_BREAK
case 5:
YY_RULE_SETUP
{ 
					  current->protection = protection = PUBL ;
					  lineCount() ;
					}
	YY_BREAK
case 6:
YY_RULE_SETUP
{ 
					  current->protection = protection = PROT ;
					  lineCount() ;
					}
	YY_BREAK
case 7:
YY_RULE_SETUP
{ 
					  current->protection = protection = PRIV ;
					  lineCount() ;
					}
	YY_BREAK
case 8:
YY_RULE_SETUP
{
					  msg( "found class    ", current->name ) ;
					  current->section = TYPEDEF_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef class" ;
					  current->name.clear() ;
					  lineCount() ;
					}
	YY_BREAK
case 9:
YY_RULE_SETUP
{
					  msg( "found struct   ", current->name ) ;
					  current->section = STRUCT_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef struct" ;
					  current->name.clear() ;
					  lastTContext = 1;
					  lineCount() ;
				  	  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
					  msg( "found struct   ", current->name ) ;
					  current->section = STRUCT_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef struct" ;
					  current->name.clear() ;
					  lineCount() ;
					  current->file = yyFileName ;
					  current->startLine = yyLineNr ;
					  lastTContext = 1;
				  	  BEGIN( Curly ) ;
					}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
					  msg( "found enum     ", current->name ) ;
					  current->section = ENUM_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef enum" ;
					  current->name.clear() ;
					  lineCount() ;
				  	  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
					  msg( "found struct   ", current->name ) ;
					  current->section = ENUM_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef enum" ;
					  current->name.clear() ;
					  lineCount() ;
					  current->file = yyFileName ;
					  current->startLine = yyLineNr ;
					  lastTContext = 1;
				  	  BEGIN( Curly ) ;
					}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
					  msg( "found union    ", current->name ) ;
					  current->section = UNION_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef union" ;
					  current->name.clear() ;
					  lineCount() ;
				  	  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 14:
YY_RULE_SETUP
{ 
					  current->section = CLASS_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "interface" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 15:
YY_RULE_SETUP
{ 
					  msg( "found class     ", current->name ) ;
					  current->section = CLASS_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "class" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 16:
YY_RULE_SETUP
{ 
					  msg( "found struct    ", current->name ) ;
					  current->section = STRUCT_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "struct" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 17:
YY_RULE_SETUP
{ 
					  msg( "found enum    ", current->name ) ;
					  current->section = ENUM_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "enum" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 18:
YY_RULE_SETUP
{ 
					  current->section = UNION_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "union" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 19:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ 
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  current->name  = yytext ;
					  BEGIN( Operator ) ;
					}
	YY_BREAK
case 20:
YY_RULE_SETUP
{ 
					  current->name += yytext ;
					  current->lineNo = yyLineNr;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 21:
YY_RULE_SETUP
{ 
					  addType( current ) ;
				          current->lineNo = yyLineNr;
					  current->name  = yytext ;
					}
	YY_BREAK
case 22:
YY_RULE_SETUP
{ 
					  addType( current ) ;
				          current->lineNo = yyLineNr;
					  current->name  = yytext ;
					}
	YY_BREAK
case 23:
YY_RULE_SETUP
{ lineCount() ; BEGIN( SkipDefine ) ; }
	YY_BREAK
case 24:
YY_RULE_SETUP

	YY_BREAK
case 25:
YY_RULE_SETUP

	YY_BREAK
case 26:
YY_RULE_SETUP
{ yyLineNr++ ; }
	YY_BREAK
case 27:
YY_RULE_SETUP
{ 
					  yyLineNr++ ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 28:
YY_RULE_SETUP
{ 
					  current->type = "using " ;
					  BEGIN( Define ) ;
					}
	YY_BREAK
case 29:
YY_RULE_SETUP
{ 
					  current->type = "#define" ;
					  BEGIN( Define ) ;
					}
	YY_BREAK
case 30:
YY_RULE_SETUP
{ 
					  current->name = yytext ;
					  current->lineNo = yyLineNr;
					  BEGIN( DefineEnd ) ;
					}
	YY_BREAK
case 31:
YY_RULE_SETUP
{ BEGIN( DefineEnd ) ; }
	YY_BREAK
case 32:
YY_RULE_SETUP
{ 
					  current->args = yytext ;
					  BEGIN( DefineEnded ) ;
					}
	YY_BREAK
case 33:
YY_RULE_SETUP
{ yyLineNr++ ; }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ yyLineNr++ ; }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ 
					  if( current->done == onlyDocs )
					  {
					    current->section = MACRO_SEC ;
					    current->lineNo = yyLineNr;
					    msg( "found macro    ", current->name ) ;
					    current_root->addSubEntry( current ) ;
					    current = new Entry ;
					    current->protection = protection ;
					  }
					  else
					  {
					    current->name.clear() ;
					    current->type.clear() ;
					  }
					  yyLineNr++ ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 36:
YY_RULE_SETUP
{ 
					  current->name += yytext ; 
					  current->lineNo = yyLineNr;
					}
	YY_BREAK
case 37:
YY_RULE_SETUP
{ 
					  BEGIN( FindMembers ) ;
					  if( current->lineNo == 0 ) current->lineNo = yyLineNr + 1;
					  msg( "found variable ", current->name ) ;
					  if( current->done == onlyDocs )
					  {
					    if( current->section != TYPEDEF_SEC )
						    current->section = VARIABLE_SEC ;
					    current_root->addSubEntry( current ) ;
					    current = new Entry ;
					    current->protection = protection ;
					  }
					  else
					  {
					    current->section = EMPTY_SEC ;
					    current->name.clear() ;
					    current->type.clear() ;
					    current->args.clear() ;
					  }
					  if( *yytext == '=' )
					    BEGIN( NextSemi ) ;
					}
	YY_BREAK
case 38:
YY_RULE_SETUP
{ 
					  current->args += yytext ;
					  sharpCount=1;
					  BEGIN( Array ) ;
					}
	YY_BREAK
case 39:
YY_RULE_SETUP
{ 
					  current->args += *yytext ;
					  if( --sharpCount<=0 )
						BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 40:
YY_RULE_SETUP
{ 
					  current->args += *yytext ;
					  sharpCount++;	
					}
	YY_BREAK
case 41:
YY_RULE_SETUP
{ current->args += *yytext ; }
	YY_BREAK
case 42:
YY_RULE_SETUP
{ 
					  addType( current ) ;
					  current->type += *yytext ;
					  sharpCount=1;
					  BEGIN( Sharp ) ;
					}
	YY_BREAK
case 43:
YY_RULE_SETUP
{ 
					  current->type += *yytext ;
					  if (--sharpCount<=0)
	                                     BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 44:
YY_RULE_SETUP
{ 
					  current->type += *yytext ;
					  sharpCount++;	
					}
	YY_BREAK
case 45:
YY_RULE_SETUP
{ current->type += *yytext ; }
	YY_BREAK
case 46:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 47:
YY_RULE_SETUP
{ current->program += yytext ; ++yyLineNr ; }
	YY_BREAK
case 48:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  lastContext = Curly ;
					  BEGIN( Comment ) ;
					}
	YY_BREAK
case 50:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  ++yyLineNr ;
					  lastContext = Curly ;
					  BEGIN( Comment ) ;
					}
	YY_BREAK
case 51:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  ++bracketCount ;
					}
	YY_BREAK
case 52:
YY_RULE_SETUP
{ 
					  if( bracketCount > 0 )
					  {
						current->program += yytext ;
						--bracketCount ;
					  }
					  else
					  {
					    current->args += " {...}";

					    if( lastTContext ) 
					    {
					      BEGIN( TypedefName ) ;
					    }
					    else if( current->done == onlyDocs )
					    {
					      int section = current->section;
					      current_root->addSubEntry( current ) ;
					      current = new Entry ;
					      current->protection = protection ;
					      if( section == CLASS_SEC ) current->protection = GLOB ;
					      BEGIN( NextSemi ) ;
					    }
					    else
					    {
					      current->name.clear() ;
					      current->type.clear() ;
					      current->args.clear() ;
					      current->section = EMPTY_SEC ;
					      BEGIN( NextSemi ) ;
					    }
					  }
					}
	YY_BREAK
case 53:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 54:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ 
					  current->args = yytext ;
					  BEGIN( Round ) ;
					}
	YY_BREAK
case 56:
YY_RULE_SETUP
{ 
					  current->args += *yytext ;
					  ++bracketCount ;
					}
	YY_BREAK
case 57:
YY_RULE_SETUP
{ 
					  current->args += *yytext ;
					  if( bracketCount > 0 )
					    --bracketCount ;
					  else
					    BEGIN( Function ) ;
					}
	YY_BREAK
case 58:
YY_RULE_SETUP
{ lineCount() ; current->args += ", " ; }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ lineCount() ; current->args += " " ; }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ current->args += *yytext ; }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ lineCount() ; current->args += " const" ; }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ 
					  current->args += " throw(" ;
					  lineCount() ;
				  	  BEGIN( Round ) ;
					}
	YY_BREAK
case 63:
YY_RULE_SETUP
{ 
					  current->type += current->name ;
					  current->name  = current->args ;
					  current->args  = yytext ;
					  current->lineNo = yyLineNr;
					  BEGIN( Round ) ;
					}
	YY_BREAK
case 64:
YY_RULE_SETUP
{ 
					  msg( "found method   ", current->name ) ;
					  if( current->done == onlyDocs )
					  {
					    current->section = FUNCTION_SEC ;
					    current_root->addSubEntry(current);
					    current = new Entry ;
					    current->protection = protection ;
					  }
					  else
					  {
					    current->name.clear() ;
					    current->type.clear() ;
					    current->args.clear() ;
					  }
					  if( *yytext == '{' )
					      BEGIN( SkipCurly ) ;
					  else if( *yytext == ':' )
					      BEGIN( SkipInits ) ;
					  else
					      BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 65:
YY_RULE_SETUP
{ BEGIN( SkipCurly ) ; }
	YY_BREAK
case 66:
YY_RULE_SETUP
{ lineCount() ; }
	YY_BREAK
case 67:
YY_RULE_SETUP

	YY_BREAK
case 68:
YY_RULE_SETUP
{ ++bracketCount ; }
	YY_BREAK
case 69:
YY_RULE_SETUP
{ 
					  if( bracketCount > 0 )
					    --bracketCount ;
					  else
					    BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 70:
YY_RULE_SETUP
{ 
					  if( current->done == onlyDocs )
					  {
					    current->section = VARIABLE_SEC ;
					    current_root->addSubEntry(current);
					    current = new Entry ;
					    current->protection = protection ;
					  }
					  else
					  {
					    current->section = EMPTY_SEC ;
					    current->type.clear() ;
					    current->name.clear() ;
					    current->args.clear() ;
					  }
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 71:
YY_RULE_SETUP
{ 
					  if( !current->type.empty() && !current->name.empty() ) current->type += " " ;
					  current->type += current->name ;
				  	  current->name = yytext ;
					  current->lineNo = yyLineNr;
					}
	YY_BREAK
case 72:
YY_RULE_SETUP
{ 
					  current->args = " :" ;
					  BEGIN( Bases ) ;
					}
	YY_BREAK
case 73:
YY_RULE_SETUP
{ 
					  current->file = yyFileName ;
				  	  if( current->lineNo == 0 ) current->lineNo = yyLineNr;
					  current->startLine = yyLineNr ;
				  	  msg( "found name     ", current->name ) ;
				  	  BEGIN( Curly ) ;
					}
	YY_BREAK
case 74:
YY_RULE_SETUP
{ 
					  current->extends.append( new McString(yytext) ) ;
					  if( !current->args.empty() ) current->args += " " ;
					  current->args += yytext ;
					}
	YY_BREAK
case 75:
YY_RULE_SETUP
{ current->args += ',' ; }
	YY_BREAK
case 76:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 77:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 78:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  BEGIN( Curly ) ;
					}
	YY_BREAK
case 79:
YY_RULE_SETUP
{ 
					  if( !current->type.empty() && !current->name.empty() ) current->type += " " ;
					  current->type += current->name ;
				  	  current->name = yytext ;
					  current->lineNo = yyLineNr;
		
				          lastTContext = 0;
					  msg( "found name     ", current->name ) ;

				          int section = current->section;
					  current_root->addSubEntry( current ) ;
					  current = new Entry ;
					  current->protection = protection ;
					  if( section == CLASS_SEC ) current->protection = GLOB ;

					  BEGIN( NextSemi ) ;
					}
	YY_BREAK
case 80:
YY_RULE_SETUP
{
				          lastTContext = 0;
					  msg( "found name     ", current->name ) ;

					  int section = current->section;
					  current_root->addSubEntry( current ) ;
					  current = new Entry ;
					  current->protection = protection ;
					  if( section == CLASS_SEC ) current->protection = GLOB ;

				          if( *yytext == ',' )
					    BEGIN( NextSemi ) ;
					  else
					    BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 81:
YY_RULE_SETUP
{ 
					  lineCount() ;
					  if( current->doc.length() > 0
						  ||  current->memo.length() > 0 )
					  {
						msg( "found doc entry" ) ;
						current->lineNo = yyLineNr;
						current_root->addSubEntry( current ) ;
						current = new Entry ;
					  }
					  current->done = onlyDocs ;
					  BEGIN( Cxx_Memo ) ;
					}
	YY_BREAK
case 82:
YY_RULE_SETUP
{ current->memo += yytext ; }
	YY_BREAK
case 83:
YY_RULE_SETUP
{ 
					  yyLineNr++ ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 84:
YY_RULE_SETUP
{ lineCount() ; }
	YY_BREAK
case 85:
YY_RULE_SETUP
{ lineCount() ; }
	YY_BREAK
case 86:
YY_RULE_SETUP
{ lineCount() ; }
	YY_BREAK
case 87:
YY_RULE_SETUP
{ 
					  lineCount() ;
					  lastCContext = YY_START ;
					  BEGIN( SkipComment ) ;
					}
	YY_BREAK
case 88:
YY_RULE_SETUP
{ 
					  lineCount() ;
					  if( current->doc.length() > 0
					      ||  current->memo.length() > 0 )
					  {
					     msg( "found doc entry" ) ;
					     current->lineNo = yyLineNr;
					     current_root->addSubEntry( current ) ;
					     current = new Entry ;
					  }
					  current->done = onlyDocs ;
					  BEGIN( Doc ) ;
					}
	YY_BREAK
case 89:
YY_RULE_SETUP
{ yyLineNr++; BEGIN( FindMembers ) ; }
	YY_BREAK
case 90:
YY_RULE_SETUP
{ 
					  current->doc += yytext ;
					  BEGIN( VerbDoc ) ;
					}
	YY_BREAK
case 91:
YY_RULE_SETUP
{ 
					  current->doc += '\n' ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 92:
YY_RULE_SETUP
{ 
					  current->doc += yytext ;
					  BEGIN( Doc ) ;
					}
	YY_BREAK
case 93:
YY_RULE_SETUP

	YY_BREAK
case 94:
YY_RULE_SETUP
{ 
					  if( !current->doc.empty() ) current->doc += '\n' ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 95:
YY_RULE_SETUP
{ current->doc += *yytext ; }
	YY_BREAK
case 96:
YY_RULE_SETUP
{ current->doc += yytext ; }
	YY_BREAK
case 97:
YY_RULE_SETUP
{ current->doc += yytext ; }
	YY_BREAK
case 98:
YY_RULE_SETUP
{ BEGIN( FindMembers ) ; }
	YY_BREAK
case 99:
YY_RULE_SETUP
{ 
					  lineCount() ;
					  current->file = yyFileName ;
					  if( current->lineNo == 0 ) current->lineNo = yyLineNr;
					  current->startLine = yyLineNr ;
					  BEGIN( SubDoc ) ;
					}
	YY_BREAK
case 100:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  BEGIN( SubDocComment ) ;
					}
	YY_BREAK
case 101:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  BEGIN( SubDocCppComment ) ;
					}
	YY_BREAK
case 102:
YY_RULE_SETUP
{ current->program += *yytext ; }
	YY_BREAK
case 103:
YY_RULE_SETUP
{ 
					  current->program += *yytext ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 104:
YY_RULE_SETUP
{ 
					  lineCount() ;
					  current->program += yytext ;
					  ++bracketCount ;
					}
	YY_BREAK
case 105:
YY_RULE_SETUP
{ 
					  lineCount() ;
					  if( bracketCount > 0 )
					  {
					    current->program += yytext ;
					    --bracketCount ;
					  }
					  else
					  {
					    msg( "found doc subentry" ) ;
					              current->lineNo = yyLineNr;
					    current_root->addSubEntry( current ) ;
					    current = new Entry ;
					    current->protection = protection ;
					    BEGIN( FindMembers ) ;
					  }
					}
	YY_BREAK
case 106:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 107:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 108:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 109:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  ++yyLineNr ;
					}
	YY_BREAK
case 110:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  BEGIN( SubDoc ) ;
					}
	YY_BREAK
case 111:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 112:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  ++yyLineNr ;
					  BEGIN( SubDoc ) ;
					}
	YY_BREAK
case 113:
YY_RULE_SETUP
{ 
					  current->memo += yytext ;
					  current->doc  += yytext ; 
					}
	YY_BREAK
case 114:
YY_RULE_SETUP
{ 
					  BEGIN( CppDoc ) ;
                      			  lineCount();
					  current->doc  += yytext ; 
					}
	YY_BREAK
case 115:
YY_RULE_SETUP
{ 
					  current->doc  += *yytext ; 
	                  		  lineCount();
					}
	YY_BREAK
case 116:
YY_RULE_SETUP
{ current->memo += yytext ; }
	YY_BREAK
case 117:
YY_RULE_SETUP
{ current->doc  += yytext ; }
	YY_BREAK
case 118:
YY_RULE_SETUP
{
					  lineCount() ;
					  current->see.append( new McString ) ;
					  BEGIN( See ) ;
					}
	YY_BREAK
case 119:
YY_RULE_SETUP
{
					  lineCount() ;
					  BEGIN( Author ) ; }
	YY_BREAK
case 120:
YY_RULE_SETUP
{
					  lineCount() ;
					  BEGIN( Version ) ; }
	YY_BREAK
case 121:
YY_RULE_SETUP
{
					  lineCount() ;
					  current->param.append( new McString  ) ;
					  BEGIN( Param ) ;
					}
	YY_BREAK
case 122:
YY_RULE_SETUP
{
					  lineCount() ;
					  current->exception.append( new McString ) ;
					  BEGIN( Exception ) ;
					}
	YY_BREAK
case 123:
YY_RULE_SETUP
{
					  lineCount() ;
					  BEGIN( Return ) ; }
	YY_BREAK
case 124:
YY_RULE_SETUP
{
					  current->name.clear() ;
					  current->section = MANUAL_SEC ;
					  BEGIN( Name ) ;
					}
	YY_BREAK
case 125:
YY_RULE_SETUP
{
					  lineCount() ;
					  current->memo.clear() ;
					  BEGIN( Memo ) ;
					}
	YY_BREAK
case 126:
YY_RULE_SETUP
{
					  lineCount() ;
					  current->type.clear() ;
					  BEGIN( Type ) ;
					}
	YY_BREAK
case 127:
YY_RULE_SETUP
{
					  lineCount() ;
					  current->args.clear() ;
					  BEGIN( Args ) ;
					}
	YY_BREAK
case 128:
YY_RULE_SETUP
{ current->name = yytext ; }
	YY_BREAK
case 129:
YY_RULE_SETUP
{ ++yyLineNr ; BEGIN( CppDoc ) ; }
	YY_BREAK
case 130:
YY_RULE_SETUP
{ current->type = yytext ; }
	YY_BREAK
case 131:
YY_RULE_SETUP
{ ++yyLineNr ; BEGIN( CppDoc ) ; }
	YY_BREAK
case 132:
YY_RULE_SETUP
{ current->args = yytext ; }
	YY_BREAK
case 133:
YY_RULE_SETUP
{ ++yyLineNr ; BEGIN( CppDoc ) ; }
	YY_BREAK
case 134:
YY_RULE_SETUP
{ current->author += *yytext ; }
	YY_BREAK
case 135:
YY_RULE_SETUP
{ current->version += *yytext ; }
	YY_BREAK
case 136:
YY_RULE_SETUP
{ *(current->see.last()) += *yytext ; }
	YY_BREAK
case 137:
YY_RULE_SETUP
{ *(current->param.last()) += *yytext ; }
	YY_BREAK
case 138:
YY_RULE_SETUP
{ *(current->exception.last()) += *yytext ; }
	YY_BREAK
case 139:
YY_RULE_SETUP
{ current->memo += *yytext ; }
	YY_BREAK
case 140:
YY_RULE_SETUP
{ current->retrn += *yytext ; }
	YY_BREAK
case 141:
YY_RULE_SETUP
{ current->author  += '\n' ; lineCount() ; }
	YY_BREAK
case 142:
YY_RULE_SETUP
{ current->version += '\n' ; lineCount() ; }
	YY_BREAK
case 143:
YY_RULE_SETUP
{ *(current->see.last()) += '\n' ; lineCount() ; }
	YY_BREAK
case 144:
YY_RULE_SETUP
{ *(current->param.last()) += '\n' ; lineCount() ; }
	YY_BREAK
case 145:
YY_RULE_SETUP
{ *(current->exception.last()) += '\n' ; lineCount() ; }
	YY_BREAK
case 146:
YY_RULE_SETUP
{ current->memo += *yytext ; lineCount() ; }
	YY_BREAK
case 147:
YY_RULE_SETUP
{ current->retrn += *yytext ; lineCount() ; }
	YY_BREAK
case 148:
YY_RULE_SETUP

	YY_BREAK
case 149:
YY_RULE_SETUP
{ yyLineNr++ ; }
	YY_BREAK
case 150:
YY_RULE_SETUP
{ 
					  lastCContext = YY_START ;
					  BEGIN( SkipComment ) ;
					}
	YY_BREAK
case 151:
YY_RULE_SETUP
{ BEGIN( lastCContext ) ; }
	YY_BREAK
case 152:
YY_RULE_SETUP
{ 
					  lastCContext = YY_START ;
					  BEGIN( SkipCxxComment ) ;
					}
	YY_BREAK
case 153:
YY_RULE_SETUP
{ 
					  yyLineNr++ ;
					  BEGIN( lastCContext ) ;
					}
	YY_BREAK
case 154:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Cxx_Memo):
case YY_STATE_EOF(SubDoc):
case YY_STATE_EOF(SubDocComment):
case YY_STATE_EOF(SubDocCppComment):
case YY_STATE_EOF(Doc):
case YY_STATE_EOF(VerbDoc):
case YY_STATE_EOF(Define):
case YY_STATE_EOF(DefineEnd):
case YY_STATE_EOF(DefineEnded):
case YY_STATE_EOF(ClassName):
case YY_STATE_EOF(TypedefName):
case YY_STATE_EOF(Bases):
case YY_STATE_EOF(NextSemi):
case YY_STATE_EOF(FindMembers):
case YY_STATE_EOF(Function):
case YY_STATE_EOF(Operator):
case YY_STATE_EOF(Throws):
case YY_STATE_EOF(Array):
case YY_STATE_EOF(Round):
case YY_STATE_EOF(Curly):
case YY_STATE_EOF(SkipCurly):
case YY_STATE_EOF(SkipInits):
case YY_STATE_EOF(SkipDefine):
case YY_STATE_EOF(Sharp):
case YY_STATE_EOF(Comment):
case YY_STATE_EOF(SkipComment):
case YY_STATE_EOF(SkipCxxComment):
case YY_STATE_EOF(CppDoc):
case YY_STATE_EOF(CppMemo):
case YY_STATE_EOF(See):
case YY_STATE_EOF(Args):
case YY_STATE_EOF(Type):
case YY_STATE_EOF(Author):
case YY_STATE_EOF(Name):
case YY_STATE_EOF(Version):
case YY_STATE_EOF(Param):
case YY_STATE_EOF(Memo):
case YY_STATE_EOF(Return):
case YY_STATE_EOF(Exception):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_last_accepting_cpos;
				yy_current_state = yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 842 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 842 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 841);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif



/*@ ----------------------------------------------------------------------------
 */
void parseDoc(Entry* rt)
{
	if( rt->doc.length() )
	{
		Entry* _current = current ;
		rt->program = rt->doc ;
		rt->doc.clear() ;
		inputString   = rt->program ;
		inputPosition = 0 ;
		current = rt ;
		cpprestart( cppin ) ;
		if( rt->memo.length() > 0 )
			BEGIN( CppDoc ) ;
		else
			BEGIN( CppMemo ) ;
		cpplex() ;
		rt->program.clear() ;
		if( rt->memo.length()+2 >= rt->doc.length() )
			rt->doc.clear() ;
		current = _current ;
	}
}

void callcpplex()
{
	cpplex() ;
	if( (current->name.length()  ||  current->program.length()  ||
		current->memo.length()  ||  current->doc.length() )
		&&  current->done == onlyDocs )
	{
		if( current->section == EMPTY_SEC )
			current->section = VARIABLE_SEC ;
		current_root->addSubEntry( current ) ;
		current = new Entry ;
		current->protection = protection ;
	}
}

void parseCppClasses(Entry* rt)
{
    if( rt == 0 ) return ;
    for( Entry *cr = rt->sub ; cr ; cr = cr->next )
    {
		if( cr->program.length() > 0 )
		{
#ifdef _DEBUG
			if (verb)
				printf("Scanning substuff of (%s) %s\n",
				   (const char *)cr->type,
				   (const char *)cr->name);
#endif
			inputString   = cr->program ;
			inputPosition = 0 ;
			cpprestart( cppin ) ;
			BEGIN( FindMembers ) ;
			current_root = cr ;
			strcpy( yyFileName, cr->file ) ;
			yyLineNr = cr->startLine ;
			current->type.clear() ;
			current->name.clear() ;
			current->args.clear() ;
			current->section = EMPTY_SEC ;
			if( cr->section == CLASS_SEC )
				current->protection = protection = PRIV ;
			else if( cr->section == STRUCT_SEC )
				current->protection = protection = PUBL ;
			else if( cr->section == UNION_SEC )
				current->protection = protection = PUBL ;
			else if( cr->section == ENUM_SEC )
				current->protection = protection = PUBL ;
			else
				current->protection = protection = GLOB ;
			callcpplex() ;
			cr->program.clear() ;
		}
		parseCppClasses( cr ) ;
    }
    parseDoc( rt ) ;
}

void parseCpp(Entry* rt)
{
	current_root  = rt ;
	global_root   = rt ;
	protection    = GLOB ;
	current       = new Entry ;
	yyLineNr      = 1 ;
	yyFileName[0] = '\0' ;
	bracketCount  = 0 ;
	sharpCount    = 0 ;
	lastTContext  = 0 ;

	inputString   = rt->program ;
	inputPosition = 0 ;
	cpprestart( cppin ) ;
	BEGIN( FindMembers ) ;
	callcpplex() ;
	rt->program.clear() ;
	parseCppClasses( rt ) ;

	delete current;
}

extern "C" {
	int	cppwrap()	{ return 1 ; }
};
