#define yy_create_buffer cpp_create_buffer
#define yy_delete_buffer cpp_delete_buffer
#define yy_scan_buffer cpp_scan_buffer
#define yy_scan_string cpp_scan_string
#define yy_scan_bytes cpp_scan_bytes
#define yy_flex_debug cpp_flex_debug
#define yy_init_buffer cpp_init_buffer
#define yy_flush_buffer cpp_flush_buffer
#define yy_load_buffer_state cpp_load_buffer_state
#define yy_switch_to_buffer cpp_switch_to_buffer
#define yyin cppin
#define yyleng cppleng
#define yylex cpplex
#define yyout cppout
#define yyrestart cpprestart
#define yytext cpptext
#define yywrap cppwrap

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

typedef int FILE; //#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplusx
#define __cplusplusx
#endif
#endif


#ifdef __cplusplus

//#include <stdlib.h>
//#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
//#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 157
#define YY_END_OF_BUFFER 158
static yyconst short int yy_accept[785] =
    {   0,
        0,    0,   97,   97,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   26,   26,
        0,    0,    0,    0,    0,    0,   56,   56,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  133,  133,  131,  131,    0,    0,  129,  129,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      158,  149,  150,  149,   97,   98,   97,  110,  109,  108,
      110,  110,  110,  106,  110,   39,   40,   44,  149,  149,

      149,   83,   85,   82,  149,   86,   23,   93,   94,  149,
       87,   88,  149,    1,    3,  149,  150,  149,   45,   64,
       46,   28,  149,   52,   28,   48,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   24,  149,   30,  149,
       72,   73,  149,  149,   26,   26,   26,   51,   51,   50,
       49,   69,   68,   68,   65,   66,   67,   69,   56,   62,
       63,   63,   60,   61,  149,   77,   78,  149,   80,   81,
       75,   74,   33,  149,  149,  149,  149,  149,   55,   55,
       54,   53,   91,   90,   91,   91,  149,  149,  149,  149,
      150,  149,  116,  116,  116,  116,  114,  114,  115,  114,

      114,  137,  144,  137,  137,  133,  134,  133,  133,  131,
      132,  131,  131,  135,  142,  135,  135,  129,  130,  129,
      136,  143,  136,  136,  138,  145,  138,  138,  140,  147,
      140,  140,  141,  148,  141,  141,  139,  146,  139,  139,
      151,  155,   97,   97,   97,  109,  109,  113,  112,  111,
        0,    0,    0,    0,   39,    0,   41,   42,    0,    0,
       85,   82,   86,   83,    0,   85,    0,   84,   23,   93,
       94,    0,   87,    0,    2,    0,    0,   64,    0,    0,
        0,    0,   45,   64,   28,  151,  155,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,

       28,    0,   30,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   26,   26,   26,   68,   66,   67,   67,   56,
        0,   58,   59,  155,    0,   76,    0,   79,   31,    0,
       32,   35,    0,    0,    0,    0,    0,    0,   92,  151,
       89,    0,  154,  152,  153,    0,  156,  151,  155,  118,
      118,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      115,  117,  117,  144,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  142,  129,
      129,  129,  143,  145,  147,  148,  146,  109,  104,    0,

        0,   43,    0,    0,    0,    0,    0,  103,    0,    0,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,    0,    0,    0,    0,
        0,   59,    0,   57,   31,   35,    0,   36,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,    0,    0,
       83,    0,   95,   96,  103,  102,  101,    0,   99,    0,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  119,    0,    0,  133,  133,  133,  133,  133,
      133,  133,  119,  133,  133,  131,  131,  131,  131,  131,
      131,  131,  119,  131,  131,    0,    0,   95,   96,    0,
        0,  100,    0,    0,   28,   28,   28,   17,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,    0,
       34,    0,   70,    0,    0,    0,    0,  128,    0,    0,
      126,  125,    0,    0,  119,  127,    0,  128,  133,  133,
      126,  125,  133,  133,  119,  127,  133,  128,  131,  131,
      126,  125,  131,  131,  119,  127,  131,    0,    0,    0,

       28,   28,   15,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   18,    0,    0,    0,   70,    0,   71,   37,
       36,    0,  128,    0,    0,  126,  125,  122,    0,  127,
        0,  128,  133,  133,  126,  125,  122,  133,  127,  133,
      128,  131,  131,  126,  125,  122,  131,  127,  131,    0,
        0,    0,   28,   28,    0,    0,   27,   28,   28,   28,
       28,   28,    4,   16,   28,    0,    0,   21,    0,    0,
      120,    0,  122,  124,    0,  120,  133,  122,  124,  133,
      120,  131,  122,  124,  131,    0,    0,   47,   28,   28,
       19,   27,   28,   28,   28,    6,   28,   13,   38,    0,

      120,    0,  124,  121,  120,  133,  124,  121,  120,  131,
      124,  121,    0,    0,   28,   28,   28,   28,   20,   20,
       28,    0,    0,    0,    0,    0,    0,  121,  133,  121,
      131,  121,    0,    0,   28,   28,   14,   22,    5,    0,
        0,    0,    0,    0,  123,  123,  123,    0,    0,   28,
       25,    0,    0,    0,    0,    0,  123,  123,  123,    0,
        0,   28,    0,    0,    0,    0,   29,    0,    0,    0,
       10,   11,    0,    0,    0,  107,    7,    0,   12,    0,
        8,    9,  105,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    7,    1,    1,    8,    1,    9,
       10,   11,   12,   13,    1,   14,   15,   16,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   18,   19,   20,
       21,   22,    1,   23,   17,   17,   24,   17,   25,   17,
       17,   17,   17,   17,   17,   26,   17,   17,   17,   17,
       27,   17,   28,   17,   17,   17,   17,   29,   17,   17,
       30,   31,   32,    1,   33,    1,   34,   35,   36,   37,

       38,   39,   40,   41,   42,   17,   17,   43,   44,   45,
       46,   47,   17,   48,   49,   50,   51,   52,   53,   54,
       55,   17,   56,    1,   57,   58,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[59] =
    {   0,
        1,    2,    3,    4,    2,    5,    1,    6,    7,    1,
        8,    1,    1,    9,    5,   10,   10,   11,    1,   12,
        1,   12,    1,   10,   10,   10,   10,   10,   10,    6,
        1,    6,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,    5,    5,   13
    } ;

static yyconst short int yy_base[843] =
    {   0,
        0,    1,    2,    3,    8,   10,   17,   19,   50,    0,
      107,  112,  108,  110,  143,  201,  259,  317,  375,  433,
      491,  549,  169,  170,  607,   22,  664,  719,   28,  115,
       23,   30,  139,  164,  225,  239,  230,  285,  289,  293,
      125,  348,  291,  349,  178,  236,   32,  397,  175,  340,
      274,  290,  350,  404,  117,  165,  183,  310,  356,  406,
      294,  388,  299,  446,  398,  447,  411,  456,  413,  415,
      457,  460,  462,  463,  465,  502,  470,  504,  473,  505,
     2343, 2344, 2344,   25,    0, 2344,   31, 2344,  245, 2344,
     2327,  118, 2306,  381, 2302,    0, 2344, 2344, 2329,    4,

      513, 2320,  364, 2344, 2315, 2344,    0,    0,  199,  541,
        0, 2344, 2330, 2344, 2344,  573,  581,  589,  414,  531,
     2344,    0,  176, 2344, 2306, 2344, 2301, 2290,  106, 2287,
     2297, 2283,  376, 2279, 2273,  258, 2344,  682,  666,  537,
     2344, 2344, 2281, 2285,    0,    0,  515, 2344,  526, 2344,
     2344, 2344,  713,  737, 2344, 2344,  597,  529,    0, 2344,
     2319,  659, 2344, 2344, 2318, 2344, 2344, 2317, 2344, 2344,
     2344, 2344, 2344,  661,  690,  666,  673,  660, 2344,  690,
     2344, 2344, 2311, 2344,  695,  696, 2315, 2305,  698, 2316,
     2344,  716, 2344, 2344,  714,  742, 2344, 2344,  741,  721,

        0, 2344,  749,  745,    0,    0, 2344,  746,  761,    0,
     2344,  747,  780, 2344,  761,  756,    0,    0, 2344,  757,
     2344,  779,  759,    0, 2344,  798,  762,    0, 2344,  817,
      782,    0, 2344,  831,  801,    0, 2344,  835,  830,    0,
     2344, 2344,    0,    0,    0,  841,  842, 2344, 2344, 2344,
     2280,  849,  844, 2272,    0, 2306, 2344, 2344, 2312,  856,
      439, 2344, 2344, 2296, 2295,  479, 2290, 2289,    0,    0,
      218,  860,    0, 2304, 2344,  867,  881,  889,  852,  895,
      904,  853,  505,  918,    0, 2298, 2293, 2282,  529, 2272,
     2254, 2254, 2253, 2258, 2263,  831, 2265, 2251, 2251, 2255,

     2254,  922,  909,  913, 2257, 2251, 2254,  928, 2246, 2250,
     2245, 2241,    0,    0,    0,  939, 2344,  951,  955,    0,
     2282, 2344, 2276, 2283, 2279, 2344, 2278, 2344,    0,  963,
     2344,    0,  728,  863, 2238, 2243, 2270,  917, 2269,  923,
     2268, 2272, 2344, 2344, 2344, 2274, 2344, 2273, 2272, 2344,
     2344,  523, 2220, 2235, 2238, 2237, 2232, 2231, 2213, 2229,
      967, 2344, 2344,  971,    0,    0,    0,  648, 2212, 2227,
     2230, 2229, 2224, 2223, 2205, 2221,    0,    0,    0,  737,
     2204, 2219, 2222, 2221, 2216, 2215, 2197, 2213,  977,    0,
        0,    0,  981,  985,  989,  993,  997,  802, 2344, 2210,

     2212, 2344,    0,  924, 2237, 2232, 2231, 1001, 2242, 2229,
     2219, 2192, 2203, 2191, 2195, 2200, 2199, 2198, 2187, 2182,
     2183, 2189, 2180, 2192, 2183, 2183, 2188,   77, 2221, 2176,
     2178, 2212, 2219, 2344,    0,    0, 2184,  238, 2180, 2169,
     2182, 2173, 2172, 2167, 2164, 2175, 2165, 2163, 2170, 2159,
     2172, 2163, 2162, 2157, 2154, 2165, 2155, 2152, 2156, 2145,
     2158, 2149, 2148, 2143, 2125, 2133, 2123, 2121, 2126, 2111,
     2148, 2148, 1002, 1006,  876,  925, 2344, 2156, 2344, 1007,
     2153, 2107, 2120, 2076, 1021, 2075, 2063, 2049, 2025, 2012,
     1995, 1965, 1958, 1944, 1923, 1915, 1902, 1903, 1895, 1909,

     1861, 1854, 1860, 1862, 1859, 1845, 1841, 1839, 1829, 1809,
     1471, 1453, 1025, 1465, 1453, 1452, 1459, 1461, 1451, 1458,
     1461, 1443, 1029, 1455, 1443, 1442, 1449, 1451, 1442, 1449,
     1451, 1433, 1033, 1445, 1433, 1436, 1428,  821,  943,  998,
     1476, 2344, 1036, 1449, 1428, 1432, 1038, 1042, 1429, 1434,
     1425, 1421, 1420, 1433, 1432, 1417, 1428, 1050, 1054, 1420,
     2344, 1434, 1058, 1062, 1424, 1423, 1423, 1070, 1414, 1412,
     1074, 1013, 1414, 1409, 1078, 1082, 1414, 1086, 1312, 1309,
     1090, 1094, 1311, 1297, 1098, 1102, 1298, 1106, 1293, 1291,
     1110, 1114, 1276, 1271, 1118, 1122, 1272, 1253, 1264, 1274,

     1242, 1234, 1126, 1130, 1218, 1208, 1195, 1186, 1158, 1189,
     1134, 1149, 1138, 1142, 1149, 1153, 1146, 1150, 2344, 2344,
     2344, 1117, 1160, 1086, 1083, 1164, 1155, 1168, 1073, 1172,
     1071, 1176, 1050, 1047, 1180, 1184, 1188, 1025, 1192, 1023,
     1196, 1020, 1000, 1200, 1204, 1208, 1004, 1212, 1002,  968,
      971,  988,  942,  916, 1216, 1220, 1221,  926,  925,  869,
      885,  864,    0, 1225, 1229,  309, 1234,  455, 1238,  893,
     1242,  847, 1246, 1252,  843, 1256,  845, 1260, 1264,  821,
     1268,  814, 1272, 1276,  805,  811,  813, 2344,  791,  793,
     2344, 1280,  779,  777, 1285,    0,  761, 1308, 1316,  792,

     1320,  733, 1324, 1328, 1332,  732, 1345, 1349, 1358,  713,
     1362, 1366,  701,  714,  662,  654, 1370, 1374, 2344,    0,
      670,  560,  550,  539,  520,  542,  493, 1378,  484, 1382,
      479, 1386,  476,  452,  449,  473, 1390, 1394,    0,  433,
      406,  375,  375,  376, 1398, 1402, 1406,  338,  325,  237,
     2344,  295,  291,  283,  265,  286, 1410, 1414, 1418,  234,
      232,  222,  204, 1422,  181,  147, 2344,  135,  113, 1426,
     1430, 2344,  109, 1434,   93, 2344, 1438, 1442, 1446,   79,
     1450, 2344, 2344, 2344, 1506, 1519, 1532, 1545, 1558, 1571,
     1584, 1597, 1610, 1623, 1636, 1649, 1662, 1675, 1688, 1701,

     1714, 1727, 1740, 1753, 1766, 1779, 1792, 1805, 1818, 1831,
     1844, 1849, 1860, 1868, 1879, 1887, 1893, 1896, 1908, 1913,
     1926, 1939, 1952, 1965, 1978, 1991, 2004, 2017, 2030, 2043,
     2056, 2069, 2082, 2095, 2108, 2116, 2126, 2139, 2151, 2163,
     2176, 2188
    } ;

static yyconst short int yy_def[843] =
    {   0,
      785,  785,  786,  786,  787,  787,  787,  787,  784,    9,
      785,  785,  785,  785,  788,  788,  789,  789,  790,  790,
      791,  791,  785,  785,  784,   25,  785,  785,  792,  792,
      785,  785,  793,  793,  794,  794,  795,  795,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  796,  796,
      797,  797,  785,  785,  798,  798,  799,  799,  800,  800,
      801,  801,  802,  802,  803,  803,  804,  804,  805,  805,
      806,  806,  807,  807,  808,  808,  809,  809,  810,  810,
      784,  784,  784,  784,  811,  784,  811,  784,  784,  784,
      784,  784,  784,  784,  784,  812,  784,  784,  813,  784,

      784,  814,  784,  784,  815,  784,  816,  817,  784,  784,
      818,  784,  819,  784,  784,  784,  784,  784,  784,  784,
      784,  820,  784,  784,  820,  784,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  784,  784,  784,  784,
      784,  784,  784,  784,  821,  821,  821,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  822,  784,
      823,  784,  784,  784,  824,  784,  784,  825,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  826,  784,  826,  826,  827,  784,  784,  828,
      784,  828,  784,  784,  784,  784,  784,  784,  784,  784,

      196,  784,  784,  784,  196,  829,  784,  829,  829,  830,
      784,  830,  830,  784,  784,  784,  196,  831,  784,  831,
      784,  784,  784,  196,  784,  784,  784,  196,  784,  784,
      784,  196,  784,  784,  784,  196,  784,  784,  784,  196,
      784,  784,  811,  811,  811,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  812,  813,  784,  784,  784,  784,
      784,  784,  784,  814,  784,  784,  815,  815,  816,  817,
      784,  784,  818,  819,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  820,  784,  832,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,

      820,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  821,  821,  821,  784,  784,  784,  784,  822,
      823,  784,  784,  833,  824,  784,  825,  784,  834,  784,
      784,  835,  784,  784,  784,  784,  826,  826,  826,  826,
      826,  827,  784,  784,  784,  828,  784,  828,  828,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  784,  831,
      831,  831,  784,  784,  784,  784,  784,  784,  784,  784,

      784,  784,  836,  784,  784,  832,  832,  784,  837,  784,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  784,  784,  784,  784,
      784,  784,  833,  784,  834,  835,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  784,  784,
      836,  832,  784,  784,  784,  784,  784,  837,  784,  838,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  784,  784,  784,  784,

      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  784,  784,  784,  784,  784,
      838,  784,  838,  784,  820,  820,  820,  784,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  784,  784,  784,

      820,  820,  839,  840,  820,  820,  820,  820,  820,  820,
      820,  820,  784,  841,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  784,
      784,  784,  820,  820,  839,  842,  840,  820,  820,  820,
      820,  820,  820,  839,  820,  841,  841,  841,  784,  784,
      784,  784,  784,  784,  784,  829,  829,  829,  829,  829,
      830,  830,  830,  830,  830,  784,  784,  784,  820,  820,
      784,  842,  820,  820,  820,  820,  820,  784,  784,  784,

      784,  784,  784,  784,  829,  829,  829,  829,  830,  830,
      830,  830,  784,  784,  820,  820,  820,  820,  784,  820,
      820,  784,  784,  784,  784,  784,  784,  784,  829,  829,
      830,  830,  784,  784,  820,  820,  784,  784,  820,  784,
      784,  784,  784,  784,  784,  829,  830,  784,  784,  820,
      784,  784,  784,  784,  784,  784,  784,  829,  830,  784,
      784,  820,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,    0,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,

      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784
    } ;

static yyconst short int yy_nxt[2403] =
    {   0,
      784,  784,   83,   83,   86,   86,  258,  259,  784,  784,
       89,   90,   89,   90,   84,   84,   87,   87,   91,   94,
       91,   94,   92,  138,   92,   83,  138,   91,  139,   91,
      146,   92,   83,   92,   83,  241,   82,   84,   93,  242,
       93,  244,  147,  784,   84,  245,  176,   95,  784,   95,
       82,   82,   83,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   96,   84,   96,   96,   96,   82,   82,
       82,   82,   82,   96,   96,   96,   96,   96,   96,   82,
       82,   82,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,

       96,   96,   96,   96,   96,   82,   82,   82,   97,   98,
       98,   97,   98,   97,   98,   99,   97,  146,  498,  191,
       99,   84,   84,   82,   84,  499,   84,   83,  249,  147,
      168,  192,  250,  169,  170,  783,  780,  100,  100,   84,
      100,   83,  100,   82,  101,   83,   82,  101,   82,   82,
      291,   82,   82,  149,   82,   82,   82,   84,  778,  292,
      103,  104,  105,   82,   82,   82,   83,  191,  150,  776,
      151,   83,   83,   82,  113,  113,  775,   83,  149,  192,
      173,  114,  114,   84,   84,  194,  286,  114,  114,  180,
      287,  774,  174,  150,  181,  151,  182,  195,  106,   82,

       82,   82,  101,   83,   82,  101,   82,   82,  175,   82,
       82,  271,   82,   82,   82,   84,  773,  271,  103,  104,
      105,   82,   82,   82,  115,  115,  153,  154,  153,  153,
      271,   82,  160,  155,  156,  161,  271,  157,  173,  158,
      153,  154,  153,  153,  162,  751,  246,  155,  156,  246,
      174,  157,  770,  158,  736,  247,  106,   82,   82,   82,
       82,   83,   82,   82,   82,   82,  175,   82,   82,  762,
       82,   82,   82,   84,  504,  769,  184,   82,   82,   82,
       82,   82,  505,  768,  185,  163,  164,  160,  186,   82,
      161,   83,  184,   83,  165,   83,  203,  767,  165,  162,

      185,  207,  300,   84,  186,   84,  301,   84,  204,  171,
      766,  784,  194,  208,   82,   82,   82,   82,   82,   83,
       82,   82,   82,   82,  195,   82,   82,  668,   82,   82,
       82,   84,  196,  765,  764,   82,   82,   82,   82,   82,
      163,  164,   83,  763,  166,  167,  172,   82,  166,  167,
       83,   83,   83,  168,  180,  187,  169,  170,  198,  181,
      188,  182,   84,   84,  189,  266,  761,  171,  266,  199,
      200,  760,   82,   82,   82,   82,   82,   83,   82,   82,
       82,   82,  252,   82,   82,  252,   82,  109,   82,   84,
      203,  253,   82,  109,   82,   82,   82,   82,  177,   83,

      211,  177,  204,  178,  172,   82,   83,  756,  198,  187,
      205,  176,  212,  215,  188,  219,  755,  219,  189,  199,
      200,  283,  754,  296,  283,  216,  297,  220,  201,  220,
       82,   82,   82,   82,   82,   83,   82,   82,   82,   82,
      266,   82,   82,  266,   82,  109,   82,   84,  207,  211,
       82,  109,   82,   82,   82,   82,  753,  784,  215,  222,
      208,  212,  222,   82,  226,  226,  752,  230,  209,  213,
      216,  223,  234,  668,  223,  238,  227,  227,  217,  231,
      266,  751,  224,  266,  235,  228,  750,  239,   82,   82,
       82,   82,  110,   83,   82,  110,   82,   82,   82,   82,

       82,  749,   82,  112,  230,   84,  234,  238,   82,  104,
      748,   82,  283,   82,  260,  283,  231,  260,  235,  239,
       82,   82,   82,  747,  232,  314,  236,  240,  746,  315,
      261,  262,  284,  284,  284,  284,  241,  745,  308,  241,
      242,  308,  272,  242,  744,  272,  106,   82,   82,   82,
      110,   83,   82,  110,   82,   82,   82,   82,   82,  262,
       82,  112,  412,   84,  743,  413,   82,  104,  263,   82,
      439,   82,  309,  440,  276,  277,  277,  276,   82,   82,
       82,  278,  280,  281,  281,  280,  310,  279,  742,  278,
      280,  281,  281,  280,  741,  282,  263,  278,  319,  319,

      319,  319,  740,  282,  106,   82,   82,   82,  116,  117,
      118,  116,   82,   82,  119,  120,   82,  119,   82,  121,
      122,  123,  122,  122,  122,  121,  124,  121,   82,   82,
      122,  125,  122,  122,  122,  122,  126,   82,   82,  127,
      122,  122,  128,  122,  129,  122,  122,  122,  130,  122,
      122,  131,  132,  133,  122,  134,  135,  136,  122,  122,
      122,  122,   82,  137,  122,  140,   83,  304,  140,  323,
      304,  241,  141,  324,  333,  329,  241,  333,   84,  334,
      332,  142,  142,  302,  277,  277,  302,  739,  303,  736,
      278,  330,  331,  330,  330,  449,  279,  335,  450,  143,

      241,  336,  305,  306,  242,  338,  340,  307,  241,  339,
      341,  735,  345,  144,  316,  316,  316,  316,  347,  142,
      140,   83,  317,  140,  350,  318,  348,  141,  351,  333,
      349,  362,  333,   84,  334,  363,  142,  142,  316,  316,
      316,  316,  361,  361,  361,  361,  317,  734,  733,  318,
      364,  364,  364,  364,  143,  241,  366,  378,  731,  242,
      367,  379,  389,  389,  389,  389,  241,  391,  144,  241,
      242,  392,  241,  242,  142,  352,  242,  729,  727,  353,
      393,  393,  393,  393,  459,  354,  355,  460,  356,  357,
      358,  359,  241,  360,  368,  726,  242,  721,  369,  394,

      394,  394,  394,  398,  370,  371,  398,  372,  373,  374,
      375,  241,  376,  380,  718,  242,  717,  381,  395,  395,
      395,  395,  538,  382,  383,  538,  384,  385,  386,  387,
      716,  388,  396,  396,  396,  396,  397,  397,  397,  397,
      241,  715,  246,  398,  242,  246,  398,  714,  713,  712,
      252,  247,  247,  252,  253,  710,  399,  260,  399,  253,
      260,  272,  405,  405,  272,  708,  406,  407,  276,  277,
      277,  276,  420,  261,  262,  278,  421,  475,  262,  475,
      475,  279,  277,  277,  277,  277,  706,  704,  702,  278,
      284,  284,  284,  284,  700,  404,  280,  277,  277,  280,

      335,  697,  696,  278,  336,  280,  281,  281,  280,  282,
      304,  263,  278,  304,  304,  263,  695,  304,  282,  284,
      284,  284,  284,  302,  277,  277,  302,  338,  303,  308,
      278,  339,  308,  338,  405,  540,  279,  339,  472,  477,
      316,  316,  316,  316,  539,  305,  306,  539,  317,  305,
      307,  318,  319,  319,  319,  319,  319,  319,  319,  319,
      694,  693,  690,  309,  330,  331,  330,  330,  361,  361,
      361,  361,  364,  364,  364,  364,  689,  310,  389,  389,
      389,  389,  393,  393,  393,  393,  394,  394,  394,  394,
      395,  395,  395,  395,  396,  396,  396,  396,  397,  397,

      397,  397,  475,  538,  475,  475,  538,  539,  540,  542,
      539,  476,  477,  688,  627,  477,  480,  627,  687,  686,
      480,  543,  548,  548,  548,  548,  575,  575,  575,  575,
      585,  575,  585,  585,  595,  575,  595,  595,  542,  603,
      603,  603,  603,  548,  548,  548,  548,  685,  684,  682,
      543,  613,  613,  613,  613,  614,  614,  614,  614,  617,
      617,  617,  617,  618,  618,  618,  618,  681,  680,  679,
      619,  623,  623,  623,  623,  626,  626,  626,  626,  575,
      575,  575,  575,  630,  630,  630,  630,  632,  623,  632,
      632,  635,  626,  635,  635,  636,  677,  676,  636,  585,

      575,  585,  585,  639,  630,  639,  639,  641,  623,  641,
      641,  644,  626,  644,  644,  645,  675,  674,  645,  595,
      575,  595,  595,  648,  630,  648,  648,  603,  603,  603,
      603,  656,  672,  671,  656,  664,  664,  664,  664,  613,
      613,  613,  613,  667,  614,  667,  667,  617,  617,  617,
      617,  618,  618,  618,  618,  621,  627,  670,  619,  627,
      668,  623,  623,  623,  623,  626,  626,  626,  626,  673,
      673,  673,  673,  630,  630,  630,  630,  632,  623,  632,
      632,  635,  626,  635,  635,  636,  669,  665,  636,  678,
      673,  678,  678,  639,  630,  639,  639,  641,  623,  641,

      641,  644,  626,  644,  644,  645,  663,  662,  645,  683,
      673,  683,  683,  648,  630,  648,  648,  784,  784,  784,
      784,  656,  784,  661,  656,  784,  664,  664,  664,  664,
      698,  698,  698,  698,  691,  667,  614,  667,  667,  699,
      660,  659,  699,  701,  701,  701,  701,  673,  673,  673,
      673,  658,  668,  703,  703,  703,  703,  705,  701,  705,
      705,  678,  673,  678,  678,  707,  703,  707,  707,  709,
      701,  709,  709,  683,  673,  683,  683,  711,  703,  711,
      711,  784,  654,  653,  784,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  720,  719,

      652,  651,  720,  719,  719,  719,  719,  719,  650,  698,
      698,  698,  698,  649,  719,  719,  719,  699,  647,  646,
      699,  701,  701,  701,  701,  703,  703,  703,  703,  728,
      728,  728,  728,  705,  701,  705,  705,  643,  642,  640,
      719,  719,  720,  722,  638,  723,  707,  703,  707,  707,
      730,  728,  730,  730,  637,  634,  724,  633,  725,  709,
      701,  709,  709,  711,  703,  711,  711,  732,  728,  732,
      732,  737,  737,  737,  737,  738,  738,  738,  738,  728,
      728,  728,  728,  730,  728,  730,  730,  732,  728,  732,
      732,  737,  737,  737,  737,  738,  738,  738,  738,  757,

      757,  757,  757,  758,  757,  758,  758,  759,  757,  759,
      759,  757,  757,  757,  757,  758,  757,  758,  758,  759,
      757,  759,  759,  771,  771,  771,  771,  777,  777,  777,
      777,  771,  771,  771,  771,  779,  779,  779,  779,  777,
      777,  777,  777,  781,  781,  781,  781,  779,  779,  779,
      779,  781,  781,  781,  781,  631,  629,  628,  625,  624,
      622,  621,  620,  616,  615,  612,  611,  610,  609,  608,
      607,  606,  605,  604,  602,  601,  600,  772,  542,  599,
      598,  597,  596,  594,  593,  772,  592,  591,  590,  589,
      588,  587,  586,  584,  583,  582,  581,  782,  580,  579,

      578,  577,  576,  574,  573,  782,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  145,  145,  145,

      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,

      193,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  225,  225,  225,  225,  225,  225,  225,  225,

      225,  225,  225,  225,  225,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  243,  243,  572,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  255,  255,  255,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  264,  571,  264,  570,  264,  264,  267,
      267,  569,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  269,  568,  269,  567,  269,  269,  270,  566,

      270,  565,  270,  273,  273,  273,  564,  273,  274,  274,
      563,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  285,  285,  285,  562,  285,  313,  313,  313,  313,
      313,  313,  561,  313,  313,  313,  313,  313,  313,  320,
      320,  561,  320,  560,  320,  320,  320,  320,  320,  320,
      320,  320,  321,  321,  559,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  325,  325,  558,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  327,  327,
      557,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  337,  337,  556,  337,  337,  337,  337,  337,  337,

      337,  337,  337,  337,  342,  342,  555,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      365,  365,  554,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  377,  377,  553,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  390,  390,  552,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  435,  435,  551,  435,  435,

      435,  435,  435,  435,  435,  435,  435,  435,  436,  436,
      550,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  471,  549,  471,  547,  471,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  655,  655,  655,  546,  545,  544,  479,  655,
      655,  655,  410,  655,  657,  265,  537,  536,  535,  534,
      533,  657,  657,  657,  532,  657,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  692,
      531,  530,  529,  528,  527,  526,  692,  692,  692,  525,

      692,  524,  523,  522,  521,  520,  519,  518,  517,  516,
      515,  514,  513,  512,  511,  510,  509,  508,  507,  506,
      503,  434,  432,  502,  501,  500,  497,  496,  495,  494,
      493,  492,  491,  490,  489,  488,  487,  486,  485,  484,
      483,  482,  481,  480,  479,  474,  473,  408,  470,  469,
      468,  467,  466,  465,  464,  463,  462,  461,  458,  457,
      456,  455,  454,  453,  452,  451,  448,  447,  446,  445,
      444,  443,  442,  441,  347,  347,  347,  343,  338,  338,
      338,  438,  437,  328,  326,  434,  432,  322,  431,  430,
      312,  311,  429,  428,  427,  426,  425,  424,  423,  422,

      419,  418,  417,  416,  415,  414,  411,  410,  408,  275,
      268,  268,  403,  265,  402,  257,  401,  400,  347,  344,
      343,  338,  328,  326,  322,  312,  311,  299,  298,  295,
      294,  293,  290,  289,  288,  275,  268,  265,  257,  254,
      251,  248,  784,   81,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,

      784,  784
    } ;

static yyconst short int yy_chk[2403] =
    {   0,
        0,    0,    1,    2,    3,    4,  100,  100,    0,    0,
        5,    5,    6,    6,    1,    2,    3,    4,    5,    7,
        6,    8,    5,   26,    6,   31,   26,    7,   26,    8,
       29,    7,   32,    8,   47,   84,   29,   31,    5,   84,
        6,   87,   29,    0,   32,   87,   47,    7,    0,    8,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,   11,   11,
       13,   11,   14,   12,   12,   11,   12,   30,  428,   55,
       12,   11,   13,   30,   14,  428,   12,   41,   92,   30,
       41,   55,   92,   41,   41,  780,  775,   11,   13,   41,
       14,   33,   12,   15,   15,   15,   15,   15,   15,   15,
      129,   15,   15,   33,   15,   15,   15,   15,  773,  129,
       15,   15,   15,   15,   15,   15,   34,   56,   33,  769,
       33,   23,   24,   15,   23,   24,  768,   49,   34,   56,
       45,   23,   24,   23,   24,   57,  123,   23,   24,   49,
      123,  766,   45,   34,   49,   34,   49,   57,   15,   15,

       15,   16,   16,   16,   16,   16,   16,   16,   45,   16,
       16,  109,   16,   16,   16,   16,  765,  109,   16,   16,
       16,   16,   16,   16,   23,   24,   35,   35,   35,   35,
      271,   16,   37,   35,   35,   37,  271,   35,   46,   35,
       36,   36,   36,   36,   37,  750,   89,   36,   36,   89,
       46,   36,  763,   36,  762,   89,   16,   16,   16,   17,
       17,   17,   17,   17,   17,   17,   46,   17,   17,  750,
       17,   17,   17,   17,  438,  761,   51,   17,   17,   17,
       17,   17,  438,  760,   51,   37,   37,   38,   51,   17,
       38,   39,   52,   43,   39,   40,   61,  756,   40,   38,

       52,   63,  136,   39,   52,   43,  136,   40,   61,   43,
      755,  666,   58,   63,   17,   17,   17,   18,   18,   18,
       18,   18,   18,   18,   58,   18,   18,  666,   18,   18,
       18,   18,   58,  754,  753,   18,   18,   18,   18,   18,
       38,   38,   50,  752,   39,   39,   43,   18,   40,   40,
       42,   44,   53,   42,   50,   53,   42,   42,   59,   50,
       53,   50,   42,   44,   53,  103,  749,   44,  103,   59,
       59,  748,   18,   18,   18,   19,   19,   19,   19,   19,
       19,   19,   94,   19,   19,   94,   19,   19,   19,   19,
       62,   94,   19,   19,   19,   19,   19,   19,   48,   48,

       65,   48,   62,   48,   44,   19,   54,  744,   60,   54,
       62,   48,   65,   67,   54,   69,  743,   70,   54,   60,
       60,  119,  742,  133,  119,   67,  133,   69,   60,   70,
       19,   19,   19,   20,   20,   20,   20,   20,   20,   20,
      261,   20,   20,  261,   20,   20,   20,   20,   64,   66,
       20,   20,   20,   20,   20,   20,  741,  668,   68,   71,
       64,   66,   72,   20,   73,   74,  740,   75,   64,   66,
       68,   71,   77,  668,   72,   79,   73,   74,   68,   75,
      266,  736,   72,  266,   77,   74,  735,   79,   20,   20,
       20,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,  734,   21,   21,   76,   21,   78,   80,   21,   21,
      733,   21,  283,   21,  101,  283,   76,  101,   78,   80,
       21,   21,   21,  731,   76,  147,   78,   80,  729,  147,
      101,  101,  120,  120,  120,  120,  149,  727,  140,  158,
      149,  140,  110,  158,  726,  110,   21,   21,   21,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,  110,
       22,   22,  289,   22,  725,  289,   22,   22,  101,   22,
      352,   22,  140,  352,  116,  116,  116,  116,   22,   22,
       22,  116,  117,  117,  117,  117,  140,  116,  724,  117,
      118,  118,  118,  118,  723,  117,  110,  118,  157,  157,

      157,  157,  722,  118,   22,   22,   22,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   27,   27,  139,   27,  162,
      139,  174,   27,  162,  177,  174,  176,  177,   27,  177,
      176,   27,   27,  138,  138,  138,  138,  721,  138,  716,
      138,  175,  175,  175,  175,  368,  138,  178,  368,   27,

      180,  178,  139,  139,  180,  185,  186,  139,  189,  185,
      186,  715,  189,   27,  153,  153,  153,  153,  192,   27,
       28,   28,  153,   28,  195,  153,  192,   28,  195,  333,
      192,  200,  333,   28,  333,  200,   28,   28,  154,  154,
      154,  154,  199,  199,  199,  199,  154,  714,  713,  154,
      203,  203,  203,  203,   28,  204,  208,  212,  710,  204,
      208,  212,  215,  215,  215,  215,  216,  220,   28,  223,
      216,  220,  227,  223,   28,  196,  227,  706,  702,  196,
      222,  222,  222,  222,  380,  196,  196,  380,  196,  196,
      196,  196,  231,  196,  209,  700,  231,  697,  209,  226,

      226,  226,  226,  398,  209,  209,  398,  209,  209,  209,
      209,  235,  209,  213,  694,  235,  693,  213,  230,  230,
      230,  230,  538,  213,  213,  538,  213,  213,  213,  213,
      690,  213,  234,  234,  234,  234,  238,  238,  238,  238,
      239,  689,  246,  247,  239,  246,  247,  687,  686,  685,
      252,  246,  247,  252,  253,  682,  247,  260,  253,  252,
      260,  272,  279,  282,  272,  680,  279,  282,  276,  276,
      276,  276,  296,  260,  260,  276,  296,  475,  272,  475,
      475,  276,  277,  277,  277,  277,  677,  675,  672,  277,
      278,  278,  278,  278,  670,  277,  280,  280,  280,  280,

      334,  662,  661,  280,  334,  281,  281,  281,  281,  280,
      303,  260,  281,  303,  304,  272,  660,  304,  281,  284,
      284,  284,  284,  302,  302,  302,  302,  338,  302,  308,
      302,  338,  308,  340,  404,  476,  302,  340,  404,  476,
      316,  316,  316,  316,  539,  303,  303,  539,  316,  304,
      303,  316,  318,  318,  318,  318,  319,  319,  319,  319,
      659,  658,  654,  308,  330,  330,  330,  330,  361,  361,
      361,  361,  364,  364,  364,  364,  653,  308,  389,  389,
      389,  389,  393,  393,  393,  393,  394,  394,  394,  394,
      395,  395,  395,  395,  396,  396,  396,  396,  397,  397,

      397,  397,  408,  473,  408,  408,  473,  474,  540,  480,
      474,  408,  540,  652,  572,  408,  473,  572,  651,  650,
      474,  480,  485,  485,  485,  485,  513,  513,  513,  513,
      523,  523,  523,  523,  533,  533,  533,  533,  543,  547,
      547,  547,  547,  548,  548,  548,  548,  649,  647,  643,
      543,  558,  558,  558,  558,  559,  559,  559,  559,  563,
      563,  563,  563,  564,  564,  564,  564,  642,  640,  638,
      564,  568,  568,  568,  568,  571,  571,  571,  571,  575,
      575,  575,  575,  576,  576,  576,  576,  578,  578,  578,
      578,  581,  581,  581,  581,  582,  634,  633,  582,  585,

      585,  585,  585,  586,  586,  586,  586,  588,  588,  588,
      588,  591,  591,  591,  591,  592,  631,  629,  592,  595,
      595,  595,  595,  596,  596,  596,  596,  603,  603,  603,
      603,  604,  625,  624,  604,  611,  611,  611,  611,  613,
      613,  613,  613,  614,  614,  614,  614,  617,  617,  617,
      617,  618,  618,  618,  618,  622,  627,  616,  618,  627,
      614,  623,  623,  623,  623,  626,  626,  626,  626,  628,
      628,  628,  628,  630,  630,  630,  630,  632,  632,  632,
      632,  635,  635,  635,  635,  636,  615,  612,  636,  637,
      637,  637,  637,  639,  639,  639,  639,  641,  641,  641,

      641,  644,  644,  644,  644,  645,  610,  609,  645,  646,
      646,  646,  646,  648,  648,  648,  648,  655,  655,  655,
      655,  656,  657,  608,  656,  657,  664,  664,  664,  664,
      665,  665,  665,  665,  655,  667,  667,  667,  667,  669,
      607,  606,  669,  671,  671,  671,  671,  673,  673,  673,
      673,  605,  667,  674,  674,  674,  674,  676,  676,  676,
      676,  678,  678,  678,  678,  679,  679,  679,  679,  681,
      681,  681,  681,  683,  683,  683,  683,  684,  684,  684,
      684,  692,  602,  601,  692,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,

      600,  599,  695,  695,  695,  695,  695,  695,  598,  698,
      698,  698,  698,  597,  695,  695,  695,  699,  594,  593,
      699,  701,  701,  701,  701,  703,  703,  703,  703,  704,
      704,  704,  704,  705,  705,  705,  705,  590,  589,  587,
      695,  695,  695,  698,  584,  698,  707,  707,  707,  707,
      708,  708,  708,  708,  583,  580,  698,  579,  698,  709,
      709,  709,  709,  711,  711,  711,  711,  712,  712,  712,
      712,  717,  717,  717,  717,  718,  718,  718,  718,  728,
      728,  728,  728,  730,  730,  730,  730,  732,  732,  732,
      732,  737,  737,  737,  737,  738,  738,  738,  738,  745,

      745,  745,  745,  746,  746,  746,  746,  747,  747,  747,
      747,  757,  757,  757,  757,  758,  758,  758,  758,  759,
      759,  759,  759,  764,  764,  764,  764,  770,  770,  770,
      770,  771,  771,  771,  771,  774,  774,  774,  774,  777,
      777,  777,  777,  778,  778,  778,  778,  779,  779,  779,
      779,  781,  781,  781,  781,  577,  574,  573,  570,  569,
      567,  566,  565,  562,  560,  557,  556,  555,  554,  553,
      552,  551,  550,  549,  546,  545,  544,  764,  541,  537,
      536,  535,  534,  532,  531,  771,  530,  529,  528,  527,
      526,  525,  524,  522,  521,  520,  519,  778,  518,  517,

      516,  515,  514,  512,  511,  781,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  792,  792,  792,

      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,

      799,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  801,  801,  801,  801,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  805,  805,  805,  805,
      805,  805,  805,  805,  805,  805,  805,  805,  805,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  807,  807,  807,  807,  807,  807,  807,  807,

      807,  807,  807,  807,  807,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  811,  811,  510,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  812,  812,  812,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  814,  509,  814,  508,  814,  814,  815,
      815,  507,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  816,  506,  816,  505,  816,  816,  817,  504,

      817,  503,  817,  818,  818,  818,  502,  818,  819,  819,
      501,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  820,  820,  820,  500,  820,  821,  821,  821,  821,
      821,  821,  499,  821,  821,  821,  821,  821,  821,  822,
      822,  498,  822,  497,  822,  822,  822,  822,  822,  822,
      822,  822,  823,  823,  496,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  824,  824,  495,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  825,  825,
      494,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  826,  826,  493,  826,  826,  826,  826,  826,  826,

      826,  826,  826,  826,  827,  827,  492,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      829,  829,  491,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  830,  830,  490,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  831,  831,  489,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  833,  834,  834,  488,  834,  834,

      834,  834,  834,  834,  834,  834,  834,  834,  835,  835,
      487,  835,  835,  835,  835,  835,  835,  835,  835,  835,
      835,  836,  486,  836,  484,  836,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  839,  839,  839,  483,  482,  481,  478,  839,
      839,  839,  472,  839,  840,  471,  470,  469,  468,  467,
      466,  840,  840,  840,  465,  840,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  842,
      464,  463,  462,  461,  460,  459,  842,  842,  842,  458,

      842,  457,  456,  455,  454,  453,  452,  451,  450,  449,
      448,  447,  446,  445,  444,  443,  442,  441,  440,  439,
      437,  433,  432,  431,  430,  429,  427,  426,  425,  424,
      423,  422,  421,  420,  419,  418,  417,  416,  415,  414,
      413,  412,  411,  410,  409,  407,  406,  405,  401,  400,
      388,  387,  386,  385,  384,  383,  382,  381,  376,  375,
      374,  373,  372,  371,  370,  369,  360,  359,  358,  357,
      356,  355,  354,  353,  349,  348,  346,  342,  341,  339,
      337,  336,  335,  327,  325,  324,  323,  321,  312,  311,
      310,  309,  307,  306,  305,  301,  300,  299,  298,  297,

      295,  294,  293,  292,  291,  290,  288,  287,  286,  274,
      268,  267,  265,  264,  259,  256,  254,  251,  190,  188,
      187,  183,  168,  165,  161,  144,  143,  135,  134,  132,
      131,  130,  128,  127,  125,  113,  105,  102,   99,   95,
       93,   91,   81,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,

      784,  784
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#define INITIAL 0
/*************************************************************************

    CPP lexer

    This file is derived from the DOC++ source by Roland Wunderling
    and Malte Zoeckler.

    Better handling of typedefs, linenumbers, formatting, comments
    and various other improvements was made. Still a lot to be done
    to handle all modern C++ constructs. <bjarke@viksoe.dk>

 *************************************************************************/

#pragma code_seg( "MISC" )

/*
 *	Includes
 */

#include "CppTypes.h"


/* -----------------------------------------------------------------
 *
 *	statics
 */
static const char*	inputString ;
static int		inputPosition ;
static int		lastContext ;
static int		lastCContext ;
static int		lastTContext;
static int		protection   = GLOB ;
static int		bracketCount = 0 ;
static int		sharpCount   = 0 ;
static int		elseCount    = 0 ;
static Entry*		current_root = 0 ;
static Entry*		current      = 0 ;
static Entry*		previous     = 0 ;
static McString         nmspc        = "";

static int		yyLineNr = 1 ;

static void msg( const char* str, const char* str2=NULL )
{
#ifdef _DEBUG
	if( verb )
	{
		printf( "%d:\t%s", yyLineNr, str ) ;
		if( str2 ) printf( "%s", str2 ) ;
		printf( "\n" ) ;
	}
#endif
}

static void lineCount()
{
	for( const char* c = yytext ; *c ; ++c )
		yyLineNr += (*c == '\n') ;
}


static void addType( Entry* current )
{
   if( !current->name.empty() ) {
      if( !current->type.empty() ) current->type += ' ' ;
      current->type += current->name ;
      current->name.clear() ;
   }
   if( !current->args.empty() ) {
      if( !current->type.empty() ) current->type += ' ' ;
      current->type += current->args ;
      current->args.clear() ;
   }
}

/* -----------------------------------------------------------------
 */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result = yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
	int c = 0;
	while( c < max_size && inputString[inputPosition] )
	{
		*buf = inputString[inputPosition++] ;
		c++; buf++;
	}
	return c;
}

#define Cxx_Memo 1

#define Doc 2

#define VerbDoc 3

#define Define 4

#define DefineEnd 5

#define DefineEnded 6

#define ClassName 7

#define NamespaceName 8

#define TypedefName 9

#define Bases 10

#define NextSemi 11

#define FindMembers 12

#define Function 13

#define Operator 14

#define Throws 15

#define Array 16

#define Round 17

#define Curly 18

#define SkipCurly 19

#define SkipRound 20

#define SkipInits 21

#define SkipDefine 22

#define SkipElse 23

#define Sharp 24

#define Comment 25

#define SkipComment 26

#define SkipCxxComment 27

#define CppDoc 28

#define CppMemo 29

#define See 30

#define Args 31

#define Type 32

#define Author 33

#define Name 34

#define Version 35

#define Param 36

#define Memo 37

#define Return 38

#define Exception 39


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplusx
//#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;




	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 785 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 784 );
		yy_cp = yy_last_accepting_cpos;
		yy_current_state = yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{ BEGIN( FindMembers ) ; }
	YY_BREAK
case 2:
YY_RULE_SETUP

	YY_BREAK
case 3:
YY_RULE_SETUP
{ BEGIN( SkipCurly ) ; }
	YY_BREAK
case 4:
YY_RULE_SETUP
{ 
					  current->protection = protection = PUBL ;
					  lineCount() ;
					}
	YY_BREAK
case 5:
YY_RULE_SETUP
{ 
					  current->protection = protection = PROT ;
					  lineCount() ;
					}
	YY_BREAK
case 6:
YY_RULE_SETUP
{ 
					  current->protection = protection = PRIV ;
					  lineCount() ;
					}
	YY_BREAK
case 7:
YY_RULE_SETUP
{
					  msg( "found class      ", current->name ) ;
					  current->section = TYPEDEF_SEC ;
					  current->lineNo = yyLineNr ;
					  current->type = "typedef class" ;
					  current->name.clear() ;
					  lineCount() ;
					}
	YY_BREAK
case 8:
YY_RULE_SETUP
{
					  msg( "found struct     ", current->name ) ;
					  current->section = STRUCT_SEC ;
					  current->lineNo = yyLineNr ;
					  current->type = "typedef struct" ;
					  current->name.clear() ;
					  lastTContext = 1;
					  lineCount() ;
				  	  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 9:
YY_RULE_SETUP
{
					  msg( "found struct     ", current->name ) ;
					  current->section = STRUCT_SEC ;
					  current->lineNo = yyLineNr ;
					  current->type = "typedef struct" ;
					  current->name.clear() ;
					  lineCount() ;
					  current->startLine = yyLineNr ;
					  lastTContext = 1;
				  	  BEGIN( Curly ) ;
					}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
					  msg( "found enum       ", current->name ) ;
					  current->section = TYPEDEF_SEC ;
					  current->lineNo = yyLineNr ;
					  current->type = "typedef enum" ;
					  current->name.clear() ;
					  lineCount() ;
					  current->startLine = yyLineNr ;
					  lastTContext = 1;
				  	  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
					  msg( "found struct     ", current->name ) ;
					  current->section = TYPEDEF_SEC ;
					  current->lineNo = yyLineNr ;
					  current->type = "typedef enum" ;
					  current->name.clear() ;
					  lineCount() ;
					  current->startLine = yyLineNr ;
					  lastTContext = 1;
				  	  BEGIN( Curly ) ;
					}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
					  msg( "found union      ", current->name ) ;
					  current->section = UNION_SEC ;
					  current->lineNo = yyLineNr ;
					  current->type = "typedef union" ;
					  current->name.clear() ;
					  lineCount() ;
					  current->startLine = yyLineNr ;
					  lastTContext = 1;
				  	  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
					  msg( "found typedef    ", current->name ) ;
					  current->section = TYPEDEF_SEC ;
					  current->lineNo = yyLineNr ;
					  current->type = "typedef" ;
					  current->name.clear() ;
					  lineCount() ;
					  current->startLine = yyLineNr ;
					  lastTContext = 1;
				  	  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 14:
YY_RULE_SETUP
{ 
					  current->section = CLASS_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr ;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "interface" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 15:
YY_RULE_SETUP
{ 
					  msg( "found class       ", current->name ) ;
					  current->section = CLASS_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr ;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "class" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 16:
YY_RULE_SETUP
{ 
					  msg( "found struct      ", current->name ) ;
					  current->section = STRUCT_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr ;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "struct" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 17:
YY_RULE_SETUP
{ 
					  msg( "found enum      ", current->name ) ;
					  current->section = TYPEDEF_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr ;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "enum" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 18:
YY_RULE_SETUP
{ 
					  current->section = UNION_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr ;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "union" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 19:
YY_RULE_SETUP
{ 
					  msg( "found forward declare" ) ;
					  lineCount() ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 20:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ 
					  addType( current ) ;
					  current->lineNo = yyLineNr ;
					  current->name  = yytext ;
					  BEGIN( Operator ) ;
					}
	YY_BREAK
case 21:
YY_RULE_SETUP
{
					  msg( "found using namespace" ) ;
					  lineCount() ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 22:
YY_RULE_SETUP
{
					  msg( "found namespace" ) ;
					  lineCount() ;
					  BEGIN( NamespaceName ) ;
					}
	YY_BREAK
case 23:
YY_RULE_SETUP
{ 
				  	  msg( "  has name       ", yytext ) ;
					  if( !nmspc.empty() ) nmspc += "::" ;
					  nmspc += yytext ;
				  	  current->name = yytext ;
					  current->lineNo = yyLineNr ;
					  current->startLine = yyLineNr ;
					  current->section = NAMESPACE_SEC;
					  current_root->addSubEntry( current ) ;
					  current = new Entry ;
					  current->protection = protection ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 24:
YY_RULE_SETUP
{
					  if( !nmspc.empty() ) {
					    if( nmspc.find("::") != McString::npos ) nmspc = nmspc.substr(0, nmspc.find_last_of(":")-2).c_str();
					    else nmspc = "";
					  }
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 25:
YY_RULE_SETUP
{ 
					  BEGIN( SkipRound ) ;
					}
	YY_BREAK
case 26:
YY_RULE_SETUP
{ 
					  current->name += yytext ;
					  current->lineNo = yyLineNr ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 27:
YY_RULE_SETUP
{ 
					  addType( current ) ;
					  current->lineNo = yyLineNr ;
					  current->name  = yytext ;
					}
	YY_BREAK
case 28:
YY_RULE_SETUP
{ 
					  addType( current ) ;
					  current->lineNo = yyLineNr ;
					  current->namespc = nmspc;
					  current->name  = yytext ;
					}
	YY_BREAK
case 29:
YY_RULE_SETUP
{ 
					  msg( "found #if0" ) ;
					  lineCount() ; 
					  BEGIN( SkipElse ) ; 
					}
	YY_BREAK
case 30:
YY_RULE_SETUP
{ 
					  msg( "found compiler-directive" ) ;
					  lineCount() ; 
					  BEGIN( SkipDefine ) ; 
					}
	YY_BREAK
case 31:
YY_RULE_SETUP

	YY_BREAK
case 32:
YY_RULE_SETUP
{ yyLineNr++ ; }
	YY_BREAK
case 33:
YY_RULE_SETUP
{ 
					  yyLineNr++ ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 34:
YY_RULE_SETUP
{ 
					  msg( "found #ELSE" ) ; 
					  BEGIN( SkipElse ) ; 
					}
	YY_BREAK
case 35:
YY_RULE_SETUP

	YY_BREAK
case 36:
YY_RULE_SETUP
{ elseCount++ ; }
	YY_BREAK
case 37:
YY_RULE_SETUP
{ if( elseCount > 0 )
					    --elseCount ;
					  else
					    BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 38:
YY_RULE_SETUP
{ 
					  current->type = "#define" ;
					  BEGIN( Define ) ;
					}
	YY_BREAK
case 39:
YY_RULE_SETUP
{ 
					  current->name = yytext ;
					  current->lineNo = yyLineNr ;
					  BEGIN( DefineEnd ) ;
					}
	YY_BREAK
case 40:
YY_RULE_SETUP
{ BEGIN( DefineEnd ) ; }
	YY_BREAK
case 41:
YY_RULE_SETUP
{ 
					  current->args = yytext ;
					  BEGIN( DefineEnded ) ;
					}
	YY_BREAK
case 42:
YY_RULE_SETUP
{ yyLineNr++ ; }
	YY_BREAK
case 43:
YY_RULE_SETUP
{ yyLineNr++ ; }
	YY_BREAK
case 44:
YY_RULE_SETUP
{ 
					  current->section = MACRO_SEC ;
					  current->lineNo = yyLineNr ;
					  msg( "found macro      ", current->name ) ;
					  current_root->addSubEntry( current ) ;
					  current = new Entry ;
					  current->protection = protection ;
					  yyLineNr++ ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 45:
YY_RULE_SETUP
{ 
					  current->name += yytext ; 
					  current->lineNo = yyLineNr ;
					}
	YY_BREAK
case 46:
YY_RULE_SETUP
{ 
					  BEGIN( FindMembers ) ;
					  if( current->lineNo == 0 )
					    current->lineNo = yyLineNr + 1;
					  msg( "found variable   ", current->name ) ;
					  if( current->section != TYPEDEF_SEC )
					    current->section = VARIABLE_SEC ;
					  if( current_root->section == TYPEDEF_SEC && current_root->type.find("enum") != McString::npos )
					    current->section = ENUM_SEC ;
					  if( *yytext == '=' && current->section == VARIABLE_SEC && current->name.find("::") != McString::npos )
					    current->section = IMPL_SEC ;
				          current_root->addSubEntry( current ) ;
					  current = new Entry ;
					  current->protection = protection ;
					  if( *yytext == '=' )
					    BEGIN( NextSemi ) ;
					}
	YY_BREAK
case 47:
YY_RULE_SETUP
{ 
				  	  msg( "found embedded sql" ) ;
					  BEGIN( NextSemi ) ;
					}
	YY_BREAK
case 48:
YY_RULE_SETUP
{ 
					  current->args += yytext ;
					  BEGIN( Array ) ;
					}
	YY_BREAK
case 49:
YY_RULE_SETUP
{ 
					  current->args += *yytext ;
					  if( sharpCount > 0 )
					    --sharpCount ;
					  else
					    BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 50:
YY_RULE_SETUP
{ 
					  current->args += *yytext ;
					  ++sharpCount ;	
					}
	YY_BREAK
case 51:
YY_RULE_SETUP
{ current->args += *yytext ; }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ 
					  addType( current ) ;
					  current->type += *yytext ;
					  BEGIN( Sharp ) ;
					}
	YY_BREAK
case 53:
YY_RULE_SETUP
{ 
					  current->type += *yytext ;
					  if( sharpCount > 0 )
					    --sharpCount ;
					  else
					    BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 54:
YY_RULE_SETUP
{ 
					  current->type += *yytext ;
					  ++sharpCount ;
					}
	YY_BREAK
case 55:
YY_RULE_SETUP
{ current->type += *yytext ; }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 57:
YY_RULE_SETUP
{ current->program += yytext ; ++yyLineNr ; }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  lastContext = Curly ;
					  BEGIN( Comment ) ;
					}
	YY_BREAK
case 60:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  ++bracketCount ;
					}
	YY_BREAK
case 61:
YY_RULE_SETUP
{ 
					  if( bracketCount > 0 )
					  {
					    current->program += yytext ;
					    --bracketCount ;
					  }
					  else
					  {
					    current->args += " {...}";

					    if( lastTContext != 0 ) 
					    {
					      BEGIN( TypedefName ) ;
					    }
					    else
					    {
					      int section = current->section;
					      current_root->addNextEntry( current ) ;
					      current = new Entry ;
					      current->protection = protection ;
					      if( section == CLASS_SEC ) current->protection = GLOB ;
					      BEGIN( NextSemi ) ;
					    }
					  }
					}
	YY_BREAK
case 62:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 63:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 64:
YY_RULE_SETUP
{ 
					  lineCount() ; 
					  current->args = "(" ;
					  BEGIN( Round ) ;
					}
	YY_BREAK
case 65:
YY_RULE_SETUP
{ 
					  current->args += *yytext ;
					  ++bracketCount ;
					}
	YY_BREAK
case 66:
YY_RULE_SETUP
{ 
					  lineCount() ; 
					  current->args += ')' ;
					  if( bracketCount > 0 )
					    --bracketCount ;
					  else
					    BEGIN( Function ) ;
					}
	YY_BREAK
case 67:
YY_RULE_SETUP
{ lineCount() ; current->args += ", " ; }
	YY_BREAK
case 68:
YY_RULE_SETUP
{ lineCount() ; current->args += " " ; }
	YY_BREAK
case 69:
YY_RULE_SETUP
{ current->args += *yytext ; }
	YY_BREAK
case 70:
YY_RULE_SETUP
{ lineCount() ; current->args += " const" ; }
	YY_BREAK
case 71:
YY_RULE_SETUP
{ 
					  current->args += " throw(" ;
					  lineCount() ;
				  	  BEGIN( Round ) ;
					}
	YY_BREAK
case 72:
YY_RULE_SETUP
{ 
					  current->type += current->name ;
					  current->name  = current->args ;
					  current->args  = yytext ;
					  current->lineNo = yyLineNr ;
					  BEGIN( Round ) ;
					}
	YY_BREAK
case 73:
YY_RULE_SETUP
{ 
					  msg( "found method     ", current->name ) ;
					  current->section = FUNCTION_SEC ;
					  if( *yytext == '{' && current->protection == GLOB ) current->section = IMPL_SEC ;
					  current_root->addSubEntry(current);
					  current = new Entry ;
					  current->protection = protection ;
					  if( *yytext == '{' )
					    BEGIN( SkipCurly ) ;
					  else if( *yytext == ':' )
					    BEGIN( SkipInits ) ;
					  else
					    BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 74:
YY_RULE_SETUP
{ BEGIN( SkipCurly ) ; }
	YY_BREAK
case 75:
YY_RULE_SETUP
{ BEGIN( FindMembers ) ; }
	YY_BREAK
case 76:
YY_RULE_SETUP

	YY_BREAK
case 77:
YY_RULE_SETUP
{ ++bracketCount ; }
	YY_BREAK
case 78:
YY_RULE_SETUP
{ 
					  if( bracketCount > 0 )
					    --bracketCount ;
					  else
					    BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 79:
YY_RULE_SETUP

	YY_BREAK
case 80:
YY_RULE_SETUP
{ ++bracketCount ; }
	YY_BREAK
case 81:
YY_RULE_SETUP
{ 
					  if( bracketCount > 0 )
					    --bracketCount ;
					  else
					    BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 82:
YY_RULE_SETUP
{ 
					  current_root->addSubEntry(current);
					  current = new Entry ;
					  current->protection = protection ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 83:
YY_RULE_SETUP
{ 
					  if( !current->type.empty() && !current->name.empty() ) current->type += " " ;
					  current->type += current->name ;
				  	  current->name = yytext ;
					  current->namespc = nmspc;
					  current->lineNo = yyLineNr ;
					}
	YY_BREAK
case 84:
YY_RULE_SETUP
{
					  current->name += yytext;
					}
	YY_BREAK
case 85:
YY_RULE_SETUP
{ 
					  current->args = " :" ;
					  BEGIN( Bases ) ;
					}
	YY_BREAK
case 86:
YY_RULE_SETUP
{ 
				  	  if( current->lineNo == 0 ) current->lineNo = yyLineNr ;
					  current->startLine = yyLineNr ;
				  	  msg( "  has name       ", current->name ) ;
				  	  BEGIN( Curly ) ;
					}
	YY_BREAK
case 87:
YY_RULE_SETUP
{ 
					  //current->extends += yytext ;
					  if( !current->args.empty() ) current->args += " " ;
					  current->args += yytext ;
					}
	YY_BREAK
case 88:
YY_RULE_SETUP
{ current->args += ',' ; }
	YY_BREAK
case 89:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 90:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 91:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 92:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  BEGIN( Curly ) ;
					}
	YY_BREAK
case 93:
YY_RULE_SETUP
{ 
					  if( !current->type.empty() && !current->name.empty() ) current->type += " " ;
					  current->type += current->name ;
				  	  current->name = yytext ;
					  current->lineNo = yyLineNr ;
		
					  lastTContext = 0;
					  msg( "  has name       ", current->name ) ;

					  int section = current->section;
					  current_root->addNextEntry( current ) ;
					  current = new Entry ;
					  current->protection = protection ;

					  BEGIN( NextSemi ) ;
					}
	YY_BREAK
case 94:
YY_RULE_SETUP
{
					  lastTContext = 0;
					  msg( "  has name       ", current->name ) ;

					  int section = current->section;
					  current_root->addNextEntry( current ) ;
					  current = new Entry ;
					  current->protection = protection ;

					  if( *yytext == ',' )
					    BEGIN( NextSemi ) ;
					  else
					    BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 95:
YY_RULE_SETUP
{ 
					  lineCount() ;
					  previous = current;
					  if( current_root->sub ) previous = current_root->sub;
					  if( !current->doc.empty()
					      || !current->memo.empty() )
					  {
					    msg( "found doc entry" ) ;
					    current->lineNo = yyLineNr ;
					    current_root->addSubEntry( current ) ;
					    current = new Entry ;
					  }
					  BEGIN( Cxx_Memo ) ;
					}
	YY_BREAK
case 96:
YY_RULE_SETUP
{ 
					  lineCount() ;
					  if( !current->doc.empty()
					      || !current->memo.empty() )
					  {
					    msg( "found doc entry" ) ;
					    current->lineNo = yyLineNr ;
					    current_root->addSubEntry( current ) ;
					    current = new Entry ;
					  }
					  previous = current;
					  BEGIN( Cxx_Memo ) ;
					}
	YY_BREAK
case 97:
YY_RULE_SETUP
{ previous->memo += yytext ; }
	YY_BREAK
case 98:
YY_RULE_SETUP
{ 
					  yyLineNr++ ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 99:
YY_RULE_SETUP
{ lineCount() ; }
	YY_BREAK
case 100:
YY_RULE_SETUP
{ lineCount() ; }
	YY_BREAK
case 101:
YY_RULE_SETUP
{ lineCount() ; }
	YY_BREAK
case 102:
YY_RULE_SETUP
{ 
					  lineCount() ;
					  lastCContext = YY_START ;
					  BEGIN( SkipComment ) ;
					}
	YY_BREAK
case 103:
YY_RULE_SETUP
{ 
					  lineCount() ;
					  if( !current->doc.empty() 
					      ||  !current->memo.empty() )
					  {
					    msg( "found doc entry" ) ;
					    current->lineNo = yyLineNr ;
					    current_root->addSubEntry( current ) ;
					    current = new Entry ;
					  }
					  BEGIN( Doc ) ;
					}
	YY_BREAK
case 104:
YY_RULE_SETUP
{ 
					  yyLineNr++; 
					  BEGIN( FindMembers ) ; 
					}
	YY_BREAK
case 105:
YY_RULE_SETUP
{ 
					  current->doc += yytext ;
					  BEGIN( VerbDoc ) ;
					}
	YY_BREAK
case 106:
YY_RULE_SETUP
{ 
					  current->doc += '\n' ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 107:
YY_RULE_SETUP
{ 
					  current->doc += yytext ;
					  BEGIN( Doc ) ;
					}
	YY_BREAK
case 108:
YY_RULE_SETUP

	YY_BREAK
case 109:
YY_RULE_SETUP
{ 
					  if( !current->doc.empty() ) current->doc += '\n' ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 110:
YY_RULE_SETUP
{ current->doc += *yytext ; }
	YY_BREAK
case 111:
YY_RULE_SETUP
{ current->doc += yytext ; }
	YY_BREAK
case 112:
YY_RULE_SETUP
{ current->doc += yytext ; }
	YY_BREAK
case 113:
YY_RULE_SETUP
{ BEGIN( FindMembers ) ; }
	YY_BREAK
case 114:
YY_RULE_SETUP
{ 
					  current->memo += yytext ;
					  current->doc  += yytext ; 
					}
	YY_BREAK
case 115:
YY_RULE_SETUP
{ 
					  BEGIN( CppDoc ) ;
					  lineCount();
					  current->doc  += yytext ; 
					}
	YY_BREAK
case 116:
YY_RULE_SETUP
{ 
					  current->doc  += *yytext ; 
					  lineCount();
					}
	YY_BREAK
case 117:
YY_RULE_SETUP
{ current->memo += yytext ; }
	YY_BREAK
case 118:
YY_RULE_SETUP
{ current->doc  += yytext ; }
	YY_BREAK
case 119:
YY_RULE_SETUP
{
					  lineCount() ;
					  BEGIN( See ) ;
					}
	YY_BREAK
case 120:
YY_RULE_SETUP
{
					  lineCount() ;
					  BEGIN( Author ) ; }
	YY_BREAK
case 121:
YY_RULE_SETUP
{
					  lineCount() ;
					  BEGIN( Version ) ; }
	YY_BREAK
case 122:
YY_RULE_SETUP
{
					  lineCount() ;
					  BEGIN( Param ) ;
					}
	YY_BREAK
case 123:
YY_RULE_SETUP
{
					  lineCount() ;
					  BEGIN( Exception ) ;
					}
	YY_BREAK
case 124:
YY_RULE_SETUP
{
					  lineCount() ;
					  BEGIN( Return ) ; }
	YY_BREAK
case 125:
YY_RULE_SETUP
{
					  current->name.clear() ;
					  current->section = MANUAL_SEC ;
					  BEGIN( Name ) ;
					}
	YY_BREAK
case 126:
YY_RULE_SETUP
{
					  lineCount() ;
					  current->memo.clear() ;
					  BEGIN( Memo ) ;
					}
	YY_BREAK
case 127:
YY_RULE_SETUP
{
					  lineCount() ;
					  current->type.clear() ;
					  BEGIN( Type ) ;
					}
	YY_BREAK
case 128:
YY_RULE_SETUP
{
					  lineCount() ;
					  current->args.clear() ;
					  BEGIN( Args ) ;
					}
	YY_BREAK
case 129:
YY_RULE_SETUP
{ current->name = yytext ; }
	YY_BREAK
case 130:
YY_RULE_SETUP
{ ++yyLineNr ; BEGIN( CppDoc ) ; }
	YY_BREAK
case 131:
YY_RULE_SETUP
{ current->type = yytext ; }
	YY_BREAK
case 132:
YY_RULE_SETUP
{ ++yyLineNr ; BEGIN( CppDoc ) ; }
	YY_BREAK
case 133:
YY_RULE_SETUP
{ current->args = yytext ; }
	YY_BREAK
case 134:
YY_RULE_SETUP
{ ++yyLineNr ; BEGIN( CppDoc ) ; }
	YY_BREAK
case 135:
YY_RULE_SETUP
{ current->author += *yytext ; }
	YY_BREAK
case 136:
YY_RULE_SETUP
{ current->version += *yytext ; }
	YY_BREAK
case 137:
YY_RULE_SETUP
{ *(current->see.last()) += *yytext ; }
	YY_BREAK
case 138:
YY_RULE_SETUP
{ *(current->param.last()) += *yytext ; }
	YY_BREAK
case 139:
YY_RULE_SETUP
{ *(current->exception.last()) += *yytext ; }
	YY_BREAK
case 140:
YY_RULE_SETUP
{ current->memo += *yytext ; }
	YY_BREAK
case 141:
YY_RULE_SETUP
{ current->retrn += *yytext ; }
	YY_BREAK
case 142:
YY_RULE_SETUP
{ current->author  += '\n' ; lineCount() ; }
	YY_BREAK
case 143:
YY_RULE_SETUP
{ current->version += '\n' ; lineCount() ; }
	YY_BREAK
case 144:
YY_RULE_SETUP
{ *(current->see.last()) += '\n' ; lineCount() ; }
	YY_BREAK
case 145:
YY_RULE_SETUP
{ *(current->param.last()) += '\n' ; lineCount() ; }
	YY_BREAK
case 146:
YY_RULE_SETUP
{ *(current->exception.last()) += '\n' ; lineCount() ; }
	YY_BREAK
case 147:
YY_RULE_SETUP
{ current->memo += *yytext ; lineCount() ; }
	YY_BREAK
case 148:
YY_RULE_SETUP
{ current->retrn += *yytext ; lineCount() ; }
	YY_BREAK
case 149:
YY_RULE_SETUP

	YY_BREAK
case 150:
YY_RULE_SETUP
{ yyLineNr++ ; }
	YY_BREAK
case 151:
YY_RULE_SETUP
{ 
					  lastCContext = YY_START ;
					  BEGIN( SkipComment ) ;
					}
	YY_BREAK
case 152:
YY_RULE_SETUP
{ BEGIN( lastCContext ) ; }
	YY_BREAK
case 153:
YY_RULE_SETUP

	YY_BREAK
case 154:
YY_RULE_SETUP

	YY_BREAK
case 155:
YY_RULE_SETUP
{ 
					  lastCContext = YY_START ;
					  BEGIN( SkipCxxComment ) ;
					}
	YY_BREAK
case 156:
YY_RULE_SETUP
{ 
					  yyLineNr++ ;
					  BEGIN( lastCContext ) ;
					}
	YY_BREAK
case 157:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Cxx_Memo):
case YY_STATE_EOF(Doc):
case YY_STATE_EOF(VerbDoc):
case YY_STATE_EOF(Define):
case YY_STATE_EOF(DefineEnd):
case YY_STATE_EOF(DefineEnded):
case YY_STATE_EOF(ClassName):
case YY_STATE_EOF(NamespaceName):
case YY_STATE_EOF(TypedefName):
case YY_STATE_EOF(Bases):
case YY_STATE_EOF(NextSemi):
case YY_STATE_EOF(FindMembers):
case YY_STATE_EOF(Function):
case YY_STATE_EOF(Operator):
case YY_STATE_EOF(Throws):
case YY_STATE_EOF(Array):
case YY_STATE_EOF(Round):
case YY_STATE_EOF(Curly):
case YY_STATE_EOF(SkipCurly):
case YY_STATE_EOF(SkipRound):
case YY_STATE_EOF(SkipInits):
case YY_STATE_EOF(SkipDefine):
case YY_STATE_EOF(SkipElse):
case YY_STATE_EOF(Sharp):
case YY_STATE_EOF(Comment):
case YY_STATE_EOF(SkipComment):
case YY_STATE_EOF(SkipCxxComment):
case YY_STATE_EOF(CppDoc):
case YY_STATE_EOF(CppMemo):
case YY_STATE_EOF(See):
case YY_STATE_EOF(Args):
case YY_STATE_EOF(Type):
case YY_STATE_EOF(Author):
case YY_STATE_EOF(Name):
case YY_STATE_EOF(Version):
case YY_STATE_EOF(Param):
case YY_STATE_EOF(Memo):
case YY_STATE_EOF(Return):
case YY_STATE_EOF(Exception):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_last_accepting_cpos;
				yy_current_state = yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 785 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 785 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 784);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif



/*@ ----------------------------------------------------------------------------
 */
void parseDoc(Entry* rt)
{
	if( !rt->doc.empty() )
	{
		Entry* _current = current ;
		rt->program = rt->doc ;
		rt->doc.clear() ;
		inputString   = rt->program ;
		inputPosition = 0 ;
		current = rt ;
		cpprestart( cppin ) ;
		if( !rt->memo.empty() )
			BEGIN( CppDoc ) ;
		else
			BEGIN( CppMemo ) ;
		cpplex() ;
		rt->program.clear() ;
		if( rt->memo.length()+2 >= rt->doc.length() )
			rt->doc.clear() ;
		current = _current ;
	}
}

void callcpplex()
{
	cpplex() ;
	if( ( !current->name.empty()  ||  !current->program.empty()  ||
		  !current->memo.empty()  ||  !current->doc.empty() ) )
	{
		if( current->section == EMPTY_SEC )
			current->section = VARIABLE_SEC ;
		current_root->addSubEntry( current ) ;
		current = new Entry ;
		current->protection = protection ;
	}
}

void parseCppClasses(Entry* rt)
{
    if( rt == 0 ) return ;
    for( Entry *cr = rt ; cr ; cr = cr->next )
    {
		if( !cr->program.empty() )
		{
#ifdef _DEBUG
			if (verb)
				printf("Scanning substuff of (%s) %s\n",
				   (const char *)cr->type,
				   (const char *)cr->name);
#endif
			inputString   = cr->program ;
			inputPosition = 0 ;
			cpprestart( cppin ) ;
			BEGIN( FindMembers ) ;
			current_root = cr ;
			yyLineNr = cr->startLine ;
			current->type.clear() ;
			current->name.clear() ;
			current->args.clear() ;
			current->section = EMPTY_SEC ;
			if( cr->section == CLASS_SEC )
				current->protection = protection = PRIV ;
			else if( cr->section == TYPEDEF_SEC && !cr->name.empty() )
				current->protection = protection = PUBL ;
			else if( cr->section == STRUCT_SEC )
				current->protection = protection = PUBL ;
			else if( cr->section == UNION_SEC )
				current->protection = protection = PUBL ;
			else
				current->protection = protection = cr->protection ;
			callcpplex() ;
			cr->program.clear() ;
		}
    }
    parseDoc( rt ) ;
}

void parseCpp(Entry* rt)
{
	current_root  = rt ;
	protection    = GLOB ;
	current       = new Entry ;
	yyLineNr      = 1 ;
	bracketCount  = 0 ;
	sharpCount    = 0 ;
	elseCount     = 0 ;
	lastTContext  = 0 ;
	lastCContext  = 0 ;
	lastContext   = 0 ;
	nmspc         = "" ;

	inputString   = rt->program ;
	inputPosition = 0 ;
	cpprestart( cppin ) ;
	BEGIN( FindMembers ) ;
	callcpplex() ;
	rt->program.clear() ;
	parseCppClasses( rt ) ;

	delete current;
}

extern "C" {
	int	cppwrap()	{ return 1 ; }
};
