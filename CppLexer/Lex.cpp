#define yy_create_buffer cpp_create_buffer
#define yy_delete_buffer cpp_delete_buffer
#define yy_scan_buffer cpp_scan_buffer
#define yy_scan_string cpp_scan_string
#define yy_scan_bytes cpp_scan_bytes
#define yy_flex_debug cpp_flex_debug
#define yy_init_buffer cpp_init_buffer
#define yy_flush_buffer cpp_flush_buffer
#define yy_load_buffer_state cpp_load_buffer_state
#define yy_switch_to_buffer cpp_switch_to_buffer
#define yyin cppin
#define yyleng cppleng
#define yylex cpplex
#define yyout cppout
#define yyrestart cpprestart
#define yytext cpptext
#define yywrap cppwrap

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

typedef int FILE; //#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplusx
#define __cplusplusx
#endif
#endif


#ifdef __cplusplus

//#include <stdlib.h>
//#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
//#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 140
#define YY_END_OF_BUFFER 141
static yyconst short int yy_accept[795] =
    {   0,
        0,    0,   82,   82,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   20,   20,    0,    0,
        0,    0,    0,    0,   46,   46,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  118,  118,  116,  116,
        0,    0,  114,  114,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  141,  134,  134,  135,  134,   82,
       82,   83,   82,   95,   95,   94,   93,   95,   95,   95,
       91,   95,   30,   31,   35,  134,  134,  134,   71,   72,

       70,   73,   79,   80,  134,   74,   75,  134,  134,    2,
        4,  134,  135,  134,   36,   55,   37,   22,  134,   42,
       38,   22,   22,   22,   22,   22,   22,   22,   22,  134,
       23,   22,  134,   63,   64,  134,  134,   20,   20,   20,
       20,   41,   41,   41,   40,   39,   60,   60,   59,   59,
       56,   57,   58,   60,   46,   46,   53,   54,   54,   51,
       52,  134,  135,  134,  134,   68,   69,   65,   24,   24,
       27,   24,   24,   45,   45,   45,   44,   43,   77,   77,
       76,   77,   77,  134,  134,  134,  135,  134,  101,  101,
      101,  101,  101,   99,   99,   99,  100,   99,   99,  122,

      122,  129,  122,  122,  118,  118,  119,  118,  118,  116,
      116,  117,  116,  116,  120,  120,  127,  120,  120,  114,
      114,  115,  114,  121,  121,  128,  121,  121,  123,  123,
      130,  123,  123,  125,  125,  132,  125,  125,  126,  126,
      133,  126,  126,  124,  124,  131,  124,  124,    0,    1,
      136,  138,   82,   82,    1,   82,   82,   94,   94,   98,
       97,   96,    0,    0,    0,    0,   30,    0,   32,   33,
        0,    0,   72,   73,   71,   72,   73,   79,   80,    0,
       74,    0,    0,    0,    3,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   36,   22,  136,  138,   22,

       22,   22,   22,   22,   22,   22,   22,   22,   22,    0,
       23,    0,    0,    0,   22,    0,    0,    0,    0,    0,
       20,   20,    1,   20,   20,   59,   58,   58,   46,   46,
        1,    0,   48,   49,  138,    0,    0,    0,   67,  138,
       25,    0,   26,    0,    0,    0,    1,    0,   78,  136,
      138,  137,    0,  139,    0,    1,  139,  136,  138,  103,
      103,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      100,  102,  102,  129,  118,  118,    1,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  116,  116,
        1,  116,  116,  116,  116,  116,  116,  116,  116,  116,

      116,  116,  127,  114,  114,    1,  114,  114,  128,  130,
      132,  133,  131,   94,   89,    0,    0,   34,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   88,    0,
       81,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,    0,    0,   22,    0,    0,   49,   50,   49,
        0,   47,    0,   66,    0,   25,   78,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   88,   87,

       86,    0,   84,   81,    0,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,    0,    0,   22,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  104,    0,
        0,  118,  118,  118,  118,  118,  118,  118,  104,  118,
      118,  116,  116,  116,  116,  116,  116,  116,  104,  116,
      116,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   85,    0,   22,   17,   22,   22,
       22,   22,   22,   22,   22,   22,   22,    0,    0,   22,
       61,    0,  113,    0,    0,  111,  110,    0,    0,  104,
      112,    0,  113,  118,  118,  111,  110,  118,  118,  104,

      112,  118,  113,  116,  116,  111,  110,  116,  116,  104,
      112,  116,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   15,   22,   22,   22,   22,   22,   22,   22,
       22,   18,    0,    0,   28,   61,    0,   62,  113,    0,
        0,  111,  110,  107,    0,  112,    0,  113,  118,  118,
      111,  110,  107,  118,  112,  118,  113,  116,  116,  111,
      110,  107,  116,  112,  116,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   21,   22,   22,   22,   22,    5,
       16,   22,    0,  105,    0,  107,  109,    0,  105,  118,
      107,  109,  118,  105,  116,  107,  109,  116,    0,    0,

        0,    0,    0,    5,    0,   21,   22,   22,    7,   22,
        5,    0,   29,  105,    0,  109,  106,  105,  118,  109,
      106,  105,  116,  109,  106,    0,    0,    0,    7,    0,
       22,   19,   19,    7,   22,    0,    0,    0,    0,    0,
      106,  118,  106,  116,  106,    0,    0,    0,    0,   14,
        6,    0,    0,    0,    0,  108,  108,  108,    0,    0,
        6,    6,    0,    0,    0,    0,  108,  108,  108,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   11,   12,
        0,    0,    0,   92,    8,   12,    0,   13,    0,    9,
       10,   90,   10,    0

    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    3,    4,
        1,    1,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    1,    6,    7,    1,    1,    8,    1,    9,
       10,   11,    1,   12,    1,   13,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,   17,   18,
       19,   20,    1,   21,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       22,   23,   24,    1,   15,    1,   25,   26,   27,   28,

       29,   30,   31,   32,   33,   15,   15,   34,   35,   36,
       37,   38,   15,   39,   40,   41,   42,   43,   44,   45,
       46,   15,   47,    1,   48,   49,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[50] =
    {   0,
        1,    1,    2,    3,    1,    4,    1,    5,    6,    1,
        7,    1,    8,    4,    9,   10,    1,   11,    1,   11,
        1,    5,    1,    5,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    4,    4,   12
    } ;

static yyconst short int yy_base[851] =
    {   0,
        0,    1,    4,    5,   18,   22,   26,   40,   63,    0,
      111,  114,  117,  122,  145,    0,  194,    0,  243,    0,
      291,  337,  384,   10,  432,    0,   44,  297,  125,  128,
      296,  300,  478,  491,  311,  317,  504,  551,  328,  331,
      332,  346,  359,  436,  441,  449,  460,  464,  366,  463,
      500,  509,  513,  518,  531,  545,  532,  546,  559,  560,
      566,  573,  574,  581,  582,  587,  588,  601,  602,  605,
      609,  610,  616,  623, 2195, 2196, 2192, 2196,   20,    0,
        8, 2196,   24, 2196, 2191,   36, 2196, 2178,   45, 2165,
      130, 2161,    0, 2196, 2196, 2179,   56,  469,    0, 2185,

     2196, 2184,    0,    4,    8,    0, 2196,  132, 2180, 2196,
     2196,  642,  323,  629,  301, 2196, 2196,    0,  333, 2196,
     2196, 2151,  271, 2148, 2145,  314, 2141, 2135, 2144,  537,
       22,  326,  594, 2196, 2196, 2142, 2146,    0,  365,    0,
      428, 2196, 2175,  433, 2196, 2196, 2196, 2174,  636,  646,
     2196, 2196,  378,  447,    0,  651, 2196, 2169,  475, 2196,
     2196,  656,  659, 2168,  510, 2196, 2196, 2196, 2196, 2171,
     2196,  514,  494, 2196, 2170,  527, 2196, 2196, 2160,  670,
     2196,  558,  665, 2156, 2165,  634, 2196,  674, 2196, 2166,
     2196,  675,  675, 2196, 2165, 2196,  663,  676,    0, 2196,

     2164,  688,  683,    0,    0,  650, 2196,  691,  694,    0,
      699, 2196,  695,  713, 2196, 2163,  717,  713,    0,    0,
      724, 2196,  725, 2196, 2162,  740,  736,    0, 2196, 2161,
      754,  749,    0, 2196, 2160,  761,  756,    0, 2196, 2159,
      768,  763,    0, 2196, 2158,  775,  770,    0, 2157, 2196,
     2196, 2196,    0,  781,    0,    0,    0,  473,  779, 2196,
     2196, 2196, 2129,  526,  775, 2121,    0, 2146, 2196, 2196,
     2151,  752, 2151, 2150,    0, 2149, 2148,    0,   45,  693,
        0,  785, 2144, 2143, 2196,    0,  791,  786, 2114, 2111,
     2110,  759, 2104, 2098, 2107,  795,    0, 2131, 2127, 2115,

     2097, 2097, 2096, 2107,  339, 2109, 2095, 2095, 2099,    0,
      614,  672,  759, 2102, 2097,  789, 2092, 2096, 2091, 2087,
        0,  510,    0,    0,    0,  805,  808,  815,    0,  819,
        0, 2119, 2196,  811, 2120,  823, 2109, 2116, 2196,  827,
        0,  831, 2196, 2110,  793,  836, 2109,  840, 2108,  832,
     2107, 2196, 2113, 2196,  846, 2112, 2113, 2110, 2109, 2196,
     2196,  810, 2067, 2082, 2085, 2084, 2079, 2078, 2060, 2076,
      852, 2196, 2196,  855,    0,  859,    0,    0,    0,  823,
     2059, 2074, 2077, 2076, 2071, 2070, 2052, 2068,    0,  866,
        0,    0,    0,  830, 2051, 2066, 2069, 2068, 2063, 2062,

     2044, 2060,  870,    0,  874,    0,    0,    0,  876,  879,
      882,  885,  888, 2085, 2196, 2056, 2058, 2196, 2074, 2070,
     2058, 2040, 2040,  861, 2054, 2040, 2040, 2044,  892, 2072,
      568, 2035, 2039, 2044, 2043, 2032, 2027, 2028, 2034, 2025,
     2037, 2028, 2031, 2033, 2026, 2021, 2023,  140, 2196,  896,
     2055, 2196,  897, 2196,  465,    0,  906, 2027, 2016, 2029,
     2020, 2019, 2014, 2011, 2022, 2012, 2010, 2017, 2006, 2019,
     2010, 2009, 2004, 2001, 2012, 2002, 2000, 2007, 1996, 2009,
     2000, 1999, 1994, 1991, 2002, 1992, 1990, 1995, 1980, 1986,
     1990, 1995, 1980, 1981, 1987, 1978, 1990, 1981,  909,  902,

     2196, 2013, 2196, 2013,  596, 1975,  915, 1975, 1974, 1987,
     1986, 1981, 1976, 1981, 1979, 1970, 1969, 1971, 1972, 1961,
     1957, 1960, 1967, 1969, 1960, 1967, 1970, 1952,  918, 1964,
     1952, 1951, 1958, 1960, 1951, 1958, 1961, 1943,  921, 1955,
     1943, 1942, 1949, 1951, 1942, 1949, 1952, 1934,  924, 1946,
     1934, 1937, 1929, 1931,  927, 1931, 1944, 1939, 1934, 1939,
     1937, 1928,  922, 1959, 2196,  703,  934,  937, 1926, 1931,
     1919, 1918, 1931, 1930, 1915, 1926,  940, 1923, 1917, 1949,
      943,  946,  949, 1914, 1912,  953, 1946, 1913, 1908,  956,
      959, 1913,  962, 1908, 1906,  965, 1940, 1907, 1902,  968,

      971, 1907,  974, 1901, 1896,  977, 1930, 1897, 1892,  980,
      983, 1897, 1880, 1894,  986, 1892, 1880, 1893, 1892, 1843,
     1807,  989,  992, 1809, 1763, 1703, 1699, 1675, 1677,  995,
     1662,  998, 1668, 1635, 1648, 1001, 1004, 2196, 1007, 1608,
     1601, 1011, 1637, 1014, 1601, 1017, 1598, 1020, 1558, 1264,
     1023, 1301, 1026, 1267, 1029, 1265, 1032, 1262, 1258, 1035,
     1295, 1038, 1261, 1041, 1259, 1252, 1255, 1268, 1263, 1250,
     1274, 1044, 1259, 1285, 1284, 1259, 1245, 1267, 1253, 1047,
     1050, 1053, 1278, 1056, 1247, 1059, 1062, 1242, 1065, 1244,
     1068, 1071, 1240, 1074, 1242, 1077, 1080, 1238, 1244, 1246,

     1244, 1169, 1154, 1083, 1086, 1169,  906, 1091, 1138,  906,
     1141, 1144,  912, 1147,  872, 1150, 1153, 1156,  868, 1159,
     1162, 1165,  867, 1171, 1174,  857,  852,  842, 1177,  836,
     1184, 2196,    0, 1187,  837,  811,  803,  788,  788,  766,
     1190,  740, 1193,  739, 1196,  743,  720, 1199,  730, 1202,
     1205,  716,  689,  686,  662, 1208, 1211, 1214,  652,  596,
     1217, 1220,  588,  558,  516,  506, 1223, 1226, 1229,  501,
      456,  417, 1232,  410,  335,  324,  304, 1235, 1238, 1241,
      288, 1244,  261, 2196, 1247, 1250, 1253, 1256,   74, 1259,
     1262, 2196, 1265, 2196, 1306, 1318, 1330, 1342, 1354, 1366,

     1378, 1390, 1402, 1414, 1426, 1438, 1450, 1462, 1474, 1486,
     1498, 1510, 1522, 1534, 1546, 1558, 1570, 1582, 1594, 1606,
     1611, 1621, 1629, 1634, 1637, 1648, 1653, 1665, 1677, 1689,
     1701, 1713, 1725, 1737, 1749, 1761, 1773, 1785, 1797, 1809,
     1821, 1833, 1845, 1857, 1869, 1881, 1893, 1905, 1916, 1927
    } ;

static yyconst short int yy_def[851] =
    {   0,
      795,  795,  796,  796,  797,  797,  797,  797,  794,    9,
      795,  795,  795,  795,  794,   15,  794,   17,  794,   19,
      795,  795,  794,   23,  795,   25,  798,  798,  795,  795,
      799,  799,  800,  800,  801,  801,  795,  795,  795,  795,
      802,  802,  803,  803,  804,  804,  795,  795,  805,  805,
      806,  806,  807,  807,  808,  808,  809,  809,  810,  810,
      811,  811,  812,  812,  813,  813,  814,  814,  815,  815,
      816,  816,  817,  817,  794,  794,  818,  794,  794,  819,
      820,  794,  819,  794,  818,  794,  794,  794,  794,  794,
      794,  794,  821,  794,  794,  822,  794,  794,  823,  794,

      794,  794,  824,  794,  794,  825,  794,  794,  826,  794,
      794,  794,  794,  794,  794,  794,  794,  827,  794,  794,
      794,  827,  827,  827,  827,  827,  827,  827,  827,  112,
      794,  827,  794,  794,  794,  794,  794,  828,  829,  828,
      828,  794,  818,  794,  794,  794,  794,  818,  794,  794,
      794,  794,  794,  794,  830,  831,  794,  832,  794,  794,
      794,  794,  794,  833,  794,  794,  794,  794,  794,  818,
      794,  794,  794,  794,  818,  794,  794,  794,  834,  835,
      794,  834,  834,  794,  836,  837,  794,  836,  794,  818,
      794,  794,  794,  794,  818,  794,  794,  794,  193,  794,

      818,  794,  794,  193,  838,  839,  794,  838,  838,  840,
      841,  794,  840,  840,  794,  818,  794,  794,  193,  842,
      843,  794,  842,  794,  818,  794,  794,  193,  794,  818,
      794,  794,  193,  794,  818,  794,  794,  193,  794,  818,
      794,  794,  193,  794,  818,  794,  794,  193,  818,  794,
      794,  794,  819,  820,  819,  819,  819,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  821,  822,  794,  794,
      794,  794,  794,  794,  823,  794,  794,  824,  794,  794,
      825,  794,  826,  826,  794,  112,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  827,  794,  844,  827,

      827,  827,  827,  827,  827,  827,  827,  827,  827,  130,
      794,  794,  794,  794,  827,  794,  794,  794,  794,  794,
      828,  829,  828,  828,  828,  794,  794,  794,  830,  831,
      830,  832,  794,  794,  845,  794,  794,  833,  794,  794,
      846,  794,  794,  834,  834,  835,  834,  835,  834,  834,
      834,  794,  836,  794,  837,  836,  818,  836,  836,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  838,  839,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  840,  841,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,

      840,  840,  794,  842,  843,  842,  842,  842,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  844,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  847,
      794,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  794,  794,  827,  794,  794,  794,  794,  794,
      845,  794,  794,  794,  794,  846,  835,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,

      794,  847,  794,  794,  848,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  794,  794,  827,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  848,  794,  848,  827,  794,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  794,  794,  827,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  838,  838,  838,  838,  838,  838,  838,  838,

      838,  838,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  849,  827,  827,  827,  827,  827,  827,
      827,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  794,  794,  794,  794,  794,
      794,  794,  794,  850,  849,  827,  827,  827,  827,  827,
      794,  827,  794,  794,  794,  794,  794,  794,  838,  838,
      838,  838,  838,  840,  840,  840,  840,  840,  794,  794,

      794,  794,  794,  794,  794,  850,  827,  794,  827,  827,
      794,  794,  794,  794,  794,  794,  794,  838,  838,  838,
      838,  840,  840,  840,  840,  794,  794,  794,  794,  794,
      827,  794,  827,  794,  827,  794,  794,  794,  794,  794,
      794,  838,  838,  840,  840,  794,  794,  794,  794,  794,
      827,  794,  794,  794,  794,  794,  838,  840,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  838,  840,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,    0,  794,  794,  794,  794,  794,  794,

      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794
    } ;

static yyconst short int yy_nxt[2246] =
    {   0,
      794,   77,   77,   78,   78,   81,   81,   82,   82,  255,
      280,  249,  130,   79,   79,  279,  131,   83,   83,   85,
      279,   86,   87,   85,  313,   86,   87,   85,   88,   91,
      251,   89,   88,  252,  256,   89,   88,  257,  258,   89,
       90,   85,  794,   91,   90,  139,  259,  140,   92,  314,
       88,  132,   76,   89,  274,  261,  279,  141,  262,  270,
      271,  279,   92,   76,   77,   76,   78,   76,   76,   76,
       76,   76,   76,   76,   76,   93,   79,   93,   93,   76,
       76,   76,   76,   76,   76,   76,   76,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,

       93,   93,   93,   93,   93,   93,   93,   93,   93,   76,
       76,   76,   77,   94,   95,   77,   94,   95,   77,   96,
       95,  792,   96,   77,   79,   95,   77,   79,   78,   77,
       79,   78,  264,   97,  282,   79,   97,  283,   79,   97,
      265,   79,  448,  449,   97,   76,   77,   98,   78,   76,
       76,   76,   99,   76,   76,   99,   76,   76,   79,   99,
      100,  101,   76,   76,   76,   76,   99,   76,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,  102,   76,   76,   76,   77,   76,   78,   76,   76,

       76,  103,   76,   76,  103,  104,   76,   79,  103,   76,
      104,   76,   76,   76,   76,  103,   76,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
       76,   76,   76,   76,   77,  105,   78,   76,   76,   76,
       76,   76,   76,  106,  107,  106,   79,  106,   76,  101,
      106,   76,  106,   76,   76,   76,   76,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  102,
       76,   76,   77,  108,   78,  789,  109,  143,  139,   78,

      140,  143,  110,   78,   79,   76,  301,  110,  296,  144,
      141,  296,  156,  144,  157,  302,  158,  145,  156,  146,
      157,  145,  158,  146,  159,  287,  287,  287,  787,   77,
      159,   78,   77,  170,   78,  171,  288,  111,   77,  108,
       78,   79,  109,  298,   79,  172,  299,  170,  110,  171,
       79,  784,  305,  110,  173,  306,  783,  160,  161,  172,
      175,  309,   78,  160,  161,  315,  323,  186,  173,  187,
      782,  437,  176,  249,  168,  438,  177,  168,  178,  188,
      328,  328,  328,  111,   76,   77,  112,  113,  114,   76,
       76,  115,  116,   76,  115,  117,  118,  119,  118,  118,

      117,  120,  117,   76,   76,  121,   76,   76,  118,  118,
      122,  118,  123,  118,  118,  118,  124,  118,  118,  118,
      125,  126,  118,  127,  128,  129,  118,  118,  118,  118,
       76,   76,  118,   77,  133,   78,  781,  175,  324,   78,
      134,  325,  180,  251,  181,   79,  252,  135,  135,  176,
      180,  182,  181,  177,  183,  178,  778,  251,  136,  182,
      252,   77,  183,   78,  186,   77,  187,   78,  454,  455,
      184,  272,  137,   79,  184,  258,  188,   79,  135,  148,
      149,  150,  149,  259,  273,  334,  151,  152,  335,  153,
      777,  154,  148,  149,  150,  149,  342,  343,  342,  151,

      152,  190,  153,  191,  154,   77,  162,  163,  162,  164,
      190,  323,  191,  192,  195,  274,  196,  165,  249,  195,
      251,  196,  192,  340,  251,  197,  198,  341,  264,  193,
      197,  198,  201,  206,  202,  207,  265,  251,  199,  310,
      252,  776,  775,  311,  203,  208,  201,  206,  202,  207,
      166,  167,   77,  162,  163,  162,  164,  774,  203,  208,
      211,  211,  212,  212,  165,  204,  209,  216,  345,  217,
      504,  349,  213,  213,  216,  221,  217,  222,  312,  218,
      214,  505,  221,  225,  222,  226,  218,  223,  225,  230,
      226,  231,  773,  219,  223,  227,  316,  166,  167,  565,

      227,  232,  230,  235,  231,  236,  235,  228,  236,  566,
      240,  240,  241,  241,  232,  237,  313,  245,  237,  246,
      317,  233,  242,  242,  245,  238,  246,  772,  771,  247,
      243,  287,  287,  287,  318,  356,  247,  357,  326,  326,
      326,  314,  288,  248,  286,  287,  287,  327,  326,  326,
      326,  377,  331,  249,  249,  288,  249,  327,  336,  336,
      336,  336,  336,  336,  249,  371,  371,  371,  289,  337,
      290,  347,  337,  249,  291,  350,  770,  354,  351,  292,
      348,  293,  294,  295,  358,  360,  372,  359,  361,  373,
      374,  374,  374,  251,  766,  280,  252,  249,  249,  362,

      391,  378,  249,  363,  379,  392,  565,  428,  393,  364,
      365,  443,  366,  367,  368,  369,  566,  370,  380,  403,
      403,  403,  381,  251,  765,  406,  252,  249,  382,  383,
      764,  384,  385,  386,  387,  407,  388,  394,  408,  274,
      763,  395,  409,  409,  409,  761,  251,  396,  397,  252,
      398,  399,  400,  401,  272,  402,  410,  410,  410,  251,
      760,  313,  252,  411,  411,  411,  251,  273,  759,  252,
      412,  412,  412,  251,  758,  757,  252,  413,  413,  413,
      251,  414,  255,  252,  249,  265,  314,  282,  415,  259,
      283,  316,  415,  287,  287,  287,  419,  424,  274,  420,

      425,  756,  296,  345,  288,  296,  349,  326,  326,  326,
      328,  328,  328,  448,  449,  317,  327,  328,  328,  328,
      331,  450,  249,  755,  249,  336,  336,  336,  754,  318,
      454,  455,  249,  342,  343,  342,  337,  347,  753,  249,
      453,  347,  345,  249,  752,  349,  348,  356,  458,  357,
      348,  459,  751,  457,  371,  371,  371,  374,  374,  374,
      377,  468,  249,  749,  469,  249,  249,  391,  478,  249,
      748,  479,  403,  403,  403,  406,  747,  249,  409,  409,
      409,  410,  410,  410,  411,  411,  411,  412,  412,  412,
      413,  413,  413,  493,  499,  746,  499,  494,  448,  449,

      454,  455,  500,  744,  742,  501,  450,  347,  740,  249,
      453,  499,  563,  499,  713,  501,  348,  568,  568,  568,
      590,  590,  590,  600,  590,  600,  610,  590,  610,  568,
      568,  568,  563,  735,  731,  501,  623,  623,  623,  568,
      568,  568,  632,  632,  632,  636,  636,  636,  637,  637,
      637,  639,  639,  639,  638,  642,  642,  642,  590,  590,
      590,  646,  646,  646,  648,  639,  648,  651,  642,  651,
      600,  590,  600,  655,  646,  655,  657,  639,  657,  660,
      642,  660,  610,  590,  610,  664,  646,  664,  623,  623,
      623,  632,  632,  632,  623,  623,  623,  681,  681,  681,

      632,  632,  632,  636,  636,  636,  637,  637,  637,  639,
      639,  639,  638,  642,  642,  642,  686,  686,  686,  646,
      646,  646,  648,  639,  648,  651,  642,  651,  691,  686,
      691,  655,  646,  655,  657,  639,  657,  660,  642,  660,
      696,  686,  696,  664,  646,  664,  681,  681,  681,  711,
      711,  711,  681,  681,  681,  712,  712,  712,  714,  714,
      714,  686,  686,  686,  716,  716,  716,  718,  714,  718,
      691,  686,  691,  720,  716,  720,  722,  714,  722,  696,
      686,  696,  724,  716,  724,  711,  711,  711,  712,  712,
      712,  732,  732,  732,  732,  732,  732,  732,  732,  732,

      732,  732,  732,  733,  732,  297,  733,  732,  732,  732,
      732,  732,  732,  732,  732,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  732,  732,  733,
      734,  734,  734,  711,  711,  711,  712,  712,  712,  714,
      714,  714,  716,  716,  716,  741,  741,  741,  718,  714,
      718,  720,  716,  720,  743,  741,  743,  722,  714,  722,
      736,  794,  737,  724,  716,  724,  745,  741,  745,  734,
      734,  734,  730,  738,  729,  739,  750,  750,  750,  734,
      734,  734,  741,  741,  741,  743,  741,  743,  745,  741,

      745,  750,  750,  750,  750,  750,  750,  762,  762,  762,
      767,  767,  767,  768,  767,  768,  769,  767,  769,  762,
      762,  762,  762,  762,  762,  767,  767,  767,  768,  767,
      768,  769,  767,  769,  779,  779,  779,  785,  785,  785,
      779,  779,  779,  786,  786,  786,  788,  788,  788,  785,
      785,  785,  786,  786,  786,  790,  790,  790,  788,  788,
      788,  790,  790,  790,  793,  793,  793,  793,  793,  793,
      728,  727,  726,  725,  723,  721,  719,  717,  780,  715,
      713,  710,  709,  708,  780,  707,  794,  674,  705,  704,
      703,  702,  701,  700,  699,  698,  697,  661,  695,  791,

      694,  693,  692,  652,  690,  791,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,

      169,  169,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  215,  215,

      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  253,  253,  689,  253,  253,  253,

      253,  253,  253,  253,  253,  253,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  267,  267,
      267,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  275,  688,  275,  687,  275,  278,  643,
      278,  685,  278,  281,  281,  281,  684,  281,  284,  284,
      635,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      297,  297,  297,  683,  297,  321,  321,  321,  321,  321,
      635,  321,  321,  321,  321,  321,  321,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  329,
      329,  682,  680,  329,  329,  329,  329,  329,  329,  329,

      329,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  332,  332,  679,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  338,  338,  678,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  344,  344,  677,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  375,  375,  676,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  376,  376,  376,

      376,  376,  376,  376,  376,  376,  376,  376,  376,  389,
      389,  674,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  404,  404,  673,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  456,  456,  672,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  502,  502,  502,  502,  502,  502,  502,

      502,  502,  502,  502,  502,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  675,  671,  670,
      669,  668,  667,  675,  675,  675,  666,  675,  706,  665,
      663,  662,  661,  659,  706,  706,  706,  658,  706,  656,
      654,  653,  652,  650,  649,  647,  645,  644,  643,  641,
      640,  635,  634,  633,  631,  630,  629,  628,  627,  626,
      625,  624,  565,  622,  621,  620,  619,  618,  617,  616,
      615,  614,  613,  612,  611,  609,  608,  607,  606,  605,
      604,  603,  602,  601,  599,  598,  597,  596,  595,  594,
      593,  592,  591,  589,  588,  587,  586,  585,  584,  583,

      582,  581,  580,  579,  578,  577,  576,  575,  574,  573,
      572,  571,  570,  569,  567,  504,  503,  562,  561,  560,
      559,  558,  557,  556,  555,  554,  553,  552,  551,  550,
      549,  548,  547,  546,  545,  544,  543,  542,  541,  540,
      539,  538,  537,  536,  535,  534,  533,  532,  531,  530,
      529,  528,  527,  526,  525,  524,  523,  522,  452,  521,
      520,  519,  518,  517,  516,  515,  514,  513,  512,  511,
      510,  509,  508,  507,  506,  503,  498,  497,  496,  495,
      492,  491,  490,  431,  429,  489,  488,  414,  487,  486,
      485,  484,  483,  482,  481,  480,  477,  476,  475,  474,

      473,  472,  471,  470,  467,  466,  465,  464,  463,  462,
      461,  460,  354,  354,  250,  354,  354,  345,  345,  345,
      345,  339,  453,  452,  333,  447,  446,  320,  319,  445,
      444,  442,  441,  440,  439,  436,  435,  434,  433,  432,
      431,  429,  428,  427,  426,  423,  422,  421,  285,  285,
      277,  276,  277,  276,  418,  269,  417,  416,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  354,  352,
      345,  250,  250,  339,  333,  250,  250,  320,  319,  309,
      308,  307,  304,  303,  300,  285,  277,  276,  269,  266,
      263,  260,  250,  250,  794,   75,  794,  794,  794,  794,

      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794
    } ;

static yyconst short int yy_chk[2246] =
    {   0,
        0,    1,    2,    1,    2,    3,    4,    3,    4,   81,
      105,   81,   24,    1,    2,  104,   24,    3,    4,    5,
      104,    5,    5,    6,  131,    6,    6,    7,    5,    7,
       79,    5,    6,   79,   83,    6,    7,   83,   86,    7,
        5,    8,    0,    8,    6,   27,   86,   27,    7,  131,
        8,   24,   27,    8,  105,   89,  279,   27,   89,   97,
       97,  279,    8,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,   11,   11,   11,   12,   12,   12,   13,   11,
       13,  789,   12,   14,   11,   14,   29,   12,   29,   30,
       13,   30,   91,   11,  108,   14,   12,  108,   29,   13,
       91,   30,  448,  448,   14,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   21,   21,   21,  783,   21,   31,   28,   31,

       28,   32,   21,   32,   21,   28,  123,   21,  115,   31,
       28,  115,   35,   32,   35,  123,   35,   31,   36,   31,
       36,   32,   36,   32,   35,  113,  113,  113,  781,   39,
       36,   39,   40,   41,   40,   41,  113,   21,   22,   22,
       22,   39,   22,  119,   40,   41,  119,   42,   22,   42,
       22,  777,  126,   22,   41,  126,  776,   35,   35,   42,
       43,  132,   43,   36,   36,  132,  139,   49,   42,   49,
      775,  305,   43,  139,   39,  305,   43,   40,   43,   49,
      153,  153,  153,   22,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   25,   25,   25,  774,   44,  141,   44,
       25,  141,   45,  144,   45,   25,  144,   25,   25,   44,
       46,   45,   46,   44,   45,   44,  772,  154,   25,   46,
      154,   47,   46,   47,   50,   48,   50,   48,  455,  455,
       47,   98,   25,   47,   48,  258,   50,   48,   25,   33,
       33,   33,   33,  258,   98,  159,   33,   33,  159,   33,
      771,   33,   34,   34,   34,   34,  173,  173,  173,   34,

       34,   51,   34,   51,   34,   37,   37,   37,   37,   37,
       52,  322,   52,   51,   53,   98,   53,   37,  322,   54,
      165,   54,   52,  165,  172,   53,   53,  172,  264,   52,
       54,   54,   55,   57,   55,   57,  264,  176,   54,  130,
      176,  770,  766,  130,   55,   57,   56,   58,   56,   58,
       37,   37,   38,   38,   38,   38,   38,  765,   56,   58,
       59,   60,   59,   60,   38,   56,   58,   61,  182,   61,
      431,  182,   59,   60,   62,   63,   62,   63,  130,   61,
       60,  431,   64,   65,   64,   65,   62,   63,   66,   67,
       66,   67,  764,   62,   64,   65,  133,   38,   38,  505,

       66,   67,   68,   69,   68,   69,   70,   66,   70,  505,
       71,   72,   71,   72,   68,   69,  311,   73,   70,   73,
      133,   68,   71,   72,   74,   70,   74,  763,  760,   73,
       72,  114,  114,  114,  133,  186,   74,  186,  149,  149,
      149,  311,  114,   74,  112,  112,  112,  149,  150,  150,
      150,  206,  156,  206,  156,  112,  156,  150,  162,  162,
      162,  163,  163,  163,  156,  197,  197,  197,  112,  162,
      112,  180,  163,  180,  112,  183,  759,  188,  183,  112,
      180,  112,  112,  112,  188,  192,  198,  188,  192,  198,
      202,  202,  202,  203,  755,  280,  203,  156,  156,  193,

      211,  208,  211,  193,  208,  213,  566,  312,  213,  193,
      193,  312,  193,  193,  193,  193,  566,  193,  209,  217,
      217,  217,  209,  218,  754,  221,  218,  221,  209,  209,
      753,  209,  209,  209,  209,  223,  209,  214,  223,  280,
      752,  214,  226,  226,  226,  749,  227,  214,  214,  227,
      214,  214,  214,  214,  272,  214,  231,  231,  231,  232,
      747,  313,  232,  236,  236,  236,  237,  272,  746,  237,
      241,  241,  241,  242,  744,  742,  242,  246,  246,  246,
      247,  259,  254,  247,  254,  265,  313,  282,  265,  259,
      282,  316,  259,  287,  287,  287,  288,  292,  272,  288,

      292,  740,  296,  345,  287,  296,  345,  326,  326,  326,
      327,  327,  327,  334,  334,  316,  326,  328,  328,  328,
      330,  334,  330,  739,  330,  336,  336,  336,  738,  316,
      340,  340,  330,  342,  342,  342,  336,  346,  737,  346,
      340,  348,  350,  348,  736,  350,  346,  355,  362,  355,
      348,  362,  735,  348,  371,  371,  371,  374,  374,  374,
      376,  380,  376,  730,  380,  330,  330,  390,  394,  390,
      728,  394,  403,  403,  403,  405,  727,  405,  409,  409,
      409,  410,  410,  410,  411,  411,  411,  412,  412,  412,
      413,  413,  413,  424,  429,  726,  429,  424,  450,  450,

      453,  453,  429,  723,  719,  429,  450,  457,  715,  457,
      453,  499,  500,  499,  713,  500,  457,  507,  507,  507,
      529,  529,  529,  539,  539,  539,  549,  549,  549,  555,
      555,  555,  563,  710,  707,  563,  567,  567,  567,  568,
      568,  568,  577,  577,  577,  581,  581,  581,  582,  582,
      582,  583,  583,  583,  582,  586,  586,  586,  590,  590,
      590,  591,  591,  591,  593,  593,  593,  596,  596,  596,
      600,  600,  600,  601,  601,  601,  603,  603,  603,  606,
      606,  606,  610,  610,  610,  611,  611,  611,  615,  615,
      615,  622,  622,  622,  623,  623,  623,  630,  630,  630,

      632,  632,  632,  636,  636,  636,  637,  637,  637,  639,
      639,  639,  637,  642,  642,  642,  644,  644,  644,  646,
      646,  646,  648,  648,  648,  651,  651,  651,  653,  653,
      653,  655,  655,  655,  657,  657,  657,  660,  660,  660,
      662,  662,  662,  664,  664,  664,  672,  672,  672,  680,
      680,  680,  681,  681,  681,  682,  682,  682,  684,  684,
      684,  686,  686,  686,  687,  687,  687,  689,  689,  689,
      691,  691,  691,  692,  692,  692,  694,  694,  694,  696,
      696,  696,  697,  697,  697,  704,  704,  704,  705,  705,
      705,  708,  708,  708,  708,  708,  708,  708,  708,  708,

      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      709,  709,  709,  711,  711,  711,  712,  712,  712,  714,
      714,  714,  716,  716,  716,  717,  717,  717,  718,  718,
      718,  720,  720,  720,  721,  721,  721,  722,  722,  722,
      712,  706,  712,  724,  724,  724,  725,  725,  725,  729,
      729,  729,  703,  712,  702,  712,  731,  731,  731,  734,
      734,  734,  741,  741,  741,  743,  743,  743,  745,  745,

      745,  748,  748,  748,  750,  750,  750,  751,  751,  751,
      756,  756,  756,  757,  757,  757,  758,  758,  758,  761,
      761,  761,  762,  762,  762,  767,  767,  767,  768,  768,
      768,  769,  769,  769,  773,  773,  773,  778,  778,  778,
      779,  779,  779,  780,  780,  780,  782,  782,  782,  785,
      785,  785,  786,  786,  786,  787,  787,  787,  788,  788,
      788,  790,  790,  790,  791,  791,  791,  793,  793,  793,
      701,  700,  699,  698,  695,  693,  690,  688,  773,  685,
      683,  679,  678,  677,  779,  676,  675,  674,  673,  671,
      670,  669,  668,  667,  666,  665,  663,  661,  659,  787,

      658,  656,  654,  652,  650,  790,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  801,  801,  801,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,

      802,  802,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  805,  805,  805,  805,
      805,  805,  805,  805,  805,  805,  805,  805,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  811,  811,

      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  816,  816,
      816,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  819,  819,  649,  819,  819,  819,

      819,  819,  819,  819,  819,  819,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  821,  821,
      821,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  823,  647,  823,  645,  823,  824,  643,
      824,  641,  824,  825,  825,  825,  640,  825,  826,  826,
      635,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      827,  827,  827,  634,  827,  828,  828,  828,  828,  828,
      633,  828,  828,  828,  828,  828,  828,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  830,
      830,  631,  629,  830,  830,  830,  830,  830,  830,  830,

      830,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  832,  832,  628,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  833,  833,  627,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  834,  834,  626,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  835,
      835,  835,  835,  835,  835,  835,  835,  835,  835,  835,
      835,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  838,  838,  625,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  839,  839,  839,

      839,  839,  839,  839,  839,  839,  839,  839,  839,  840,
      840,  624,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  842,  842,  621,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  844,  844,  844,
      844,  844,  844,  844,  844,  844,  844,  844,  844,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  846,  846,  620,  846,  846,  846,  846,  846,  846,
      846,  846,  846,  847,  847,  847,  847,  847,  847,  847,

      847,  847,  847,  847,  847,  848,  848,  848,  848,  848,
      848,  848,  848,  848,  848,  848,  848,  849,  619,  618,
      617,  616,  614,  849,  849,  849,  613,  849,  850,  612,
      609,  608,  607,  605,  850,  850,  850,  604,  850,  602,
      599,  598,  597,  595,  594,  592,  589,  588,  587,  585,
      584,  580,  579,  578,  576,  575,  574,  573,  572,  571,
      570,  569,  564,  562,  561,  560,  559,  558,  557,  556,
      554,  553,  552,  551,  550,  548,  547,  546,  545,  544,
      543,  542,  541,  540,  538,  537,  536,  535,  534,  533,
      532,  531,  530,  528,  527,  526,  525,  524,  523,  522,

      521,  520,  519,  518,  517,  516,  515,  514,  513,  512,
      511,  510,  509,  508,  506,  504,  502,  498,  497,  496,
      495,  494,  493,  492,  491,  490,  489,  488,  487,  486,
      485,  484,  483,  482,  481,  480,  479,  478,  477,  476,
      475,  474,  473,  472,  471,  470,  469,  468,  467,  466,
      465,  464,  463,  462,  461,  460,  459,  458,  451,  447,
      446,  445,  444,  443,  442,  441,  440,  439,  438,  437,
      436,  435,  434,  433,  432,  430,  428,  427,  426,  425,
      423,  422,  421,  420,  419,  417,  416,  414,  402,  401,
      400,  399,  398,  397,  396,  395,  388,  387,  386,  385,

      384,  383,  382,  381,  370,  369,  368,  367,  366,  365,
      364,  363,  359,  358,  357,  356,  353,  351,  349,  347,
      344,  338,  337,  335,  332,  320,  319,  318,  317,  315,
      314,  309,  308,  307,  306,  304,  303,  302,  301,  300,
      299,  298,  295,  294,  293,  291,  290,  289,  284,  283,
      277,  276,  274,  273,  271,  268,  266,  263,  249,  245,
      240,  235,  230,  225,  216,  201,  195,  190,  185,  184,
      179,  175,  170,  164,  158,  148,  143,  137,  136,  129,
      128,  127,  125,  124,  122,  109,  102,  100,   96,   92,
       90,   88,   85,   77,   75,  794,  794,  794,  794,  794,

      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#define INITIAL 0
/*************************************************************************

    CPP lexer

    This file is derived from the DOC++ source by Roland Wunderling
    and Malte Zoeckler.

    Better handling of typedefs, linenumbers, formatting, comments
    and various other improvements was made. Still a lot to be done
    to handle all modern C++ constructs. <bjarke@viksoe.dk>

 *************************************************************************/

#pragma code_seg( "MISC" )

/*
 *	Includes
 */

#include "CppTypes.h"


/* -----------------------------------------------------------------
 *
 *	statics
 */
static const char*	inputString ;
static int		inputPosition ;
static int		lastContext ;
static int		lastCContext ;
static int		lastTContext;
static int		protection   = GLOB ;
static int		bracketCount = 0 ;
static int		sharpCount   = 0 ;
static Entry*		current_root = 0 ;
static Entry*		global_root  = 0 ;
static Entry*		current      = 0 ;

static int		yyLineNr = 1 ;
static char		yyFileName[264] ;
static McString*	currentString ;

static void msg( const char* str, const char* str2=NULL )
{
#ifdef _DEBUG
	if( verb )
	{
		printf( "%s(%d):\t%s", yyFileName, yyLineNr, str ) ;
		if( str2 ) printf( "%s", str2 ) ;
		printf( "\n" ) ;
	}
#endif
}

static void lineCount()
{
	for( const char* c = yytext ; *c ; ++c )
		yyLineNr += (*c == '\n') ;
}


static void addType( Entry* current )
{
   if( !current->name.empty() ) {
      if( !current->type.empty() ) current->type += ' ' ;
      current->type += current->name ;
      current->name.clear() ;
   }
   if( !current->args.empty() ) {
      if( !current->type.empty() ) current->type += ' ' ;
      current->type += current->args ;
      current->args.clear() ;
   }
}

/* -----------------------------------------------------------------
 */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result = yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
	int c = 0;
	while( c < max_size && inputString[inputPosition] )
	{
		*buf = inputString[inputPosition++] ;
		c++; buf++;
	}
	return c;
}

#define Cxx_Memo 1

#define Doc 2

#define VerbDoc 3

#define Define 4

#define DefineEnd 5

#define DefineEnded 6

#define ClassName 7

#define TypedefName 8

#define Bases 9

#define NextSemi 10

#define FindMembers 11

#define Function 12

#define Operator 13

#define Throws 14

#define Array 15

#define Round 16

#define Curly 17

#define SkipCurly 18

#define SkipInits 19

#define SkipDefine 20

#define Sharp 21

#define Comment 22

#define SkipComment 23

#define SkipCxxComment 24

#define CppDoc 25

#define CppMemo 26

#define See 27

#define Args 28

#define Type 29

#define Author 30

#define Name 31

#define Version 32

#define Param 33

#define Memo 34

#define Return 35

#define Exception 36


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplusx
//#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;




	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 795 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 794 );
		yy_cp = yy_last_accepting_cpos;
		yy_current_state = yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{ 
					  yyLineNr = 1 ; 
					  int i;
					  for( i = 0 ; yytext[i+1] != 6 ; i++ )
						yyFileName[i] = yytext[i+1] ;
					  yyFileName[i] = 0 ;
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
{ BEGIN( FindMembers ) ; }
	YY_BREAK
case 3:
YY_RULE_SETUP

	YY_BREAK
case 4:
YY_RULE_SETUP
{ BEGIN( SkipCurly ) ; }
	YY_BREAK
case 5:
YY_RULE_SETUP
{ 
					  current->protection = protection = PUBL ;
					  lineCount() ;
					}
	YY_BREAK
case 6:
YY_RULE_SETUP
{ 
					  current->protection = protection = PROT ;
					  lineCount() ;
					}
	YY_BREAK
case 7:
YY_RULE_SETUP
{ 
					  current->protection = protection = PRIV ;
					  lineCount() ;
					}
	YY_BREAK
case 8:
YY_RULE_SETUP
{
					  msg( "found class    ", current->name ) ;
					  current->section = TYPEDEF_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef class" ;
					  current->name.clear() ;
					  lineCount() ;
					}
	YY_BREAK
case 9:
YY_RULE_SETUP
{
					  msg( "found struct   ", current->name ) ;
					  current->section = STRUCT_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef struct" ;
					  current->name.clear() ;
					  lastTContext = 1;
					  lineCount() ;
				  	  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
					  msg( "found struct   ", current->name ) ;
					  current->section = STRUCT_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef struct" ;
					  current->name.clear() ;
					  lineCount() ;
					  current->file = yyFileName ;
					  current->startLine = yyLineNr ;
					  lastTContext = 1;
				  	  BEGIN( Curly ) ;
					}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
					  msg( "found enum     ", current->name ) ;
					  current->section = ENUM_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef enum" ;
					  current->name.clear() ;
					  lineCount() ;
					  current->file = yyFileName ;
					  current->startLine = yyLineNr ;
					  lastTContext = 1;
				  	  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
					  msg( "found struct   ", current->name ) ;
					  current->section = ENUM_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef enum" ;
					  current->name.clear() ;
					  lineCount() ;
					  current->file = yyFileName ;
					  current->startLine = yyLineNr ;
					  lastTContext = 1;
				  	  BEGIN( Curly ) ;
					}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
					  msg( "found union    ", current->name ) ;
					  current->section = UNION_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef union" ;
					  current->name.clear() ;
					  lineCount() ;
				  	  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 14:
YY_RULE_SETUP
{ 
					  current->section = CLASS_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "interface" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 15:
YY_RULE_SETUP
{ 
					  msg( "found class     ", current->name ) ;
					  current->section = CLASS_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "class" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 16:
YY_RULE_SETUP
{ 
					  msg( "found struct    ", current->name ) ;
					  current->section = STRUCT_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "struct" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 17:
YY_RULE_SETUP
{ 
					  msg( "found enum    ", current->name ) ;
					  current->section = ENUM_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "enum" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 18:
YY_RULE_SETUP
{ 
					  current->section = UNION_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "union" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 19:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ 
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  current->name  = yytext ;
					  BEGIN( Operator ) ;
					}
	YY_BREAK
case 20:
YY_RULE_SETUP
{ 
					  current->name += yytext ;
					  current->lineNo = yyLineNr;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 21:
YY_RULE_SETUP
{ 
					  addType( current ) ;
				          current->lineNo = yyLineNr;
					  current->name  = yytext ;
					}
	YY_BREAK
case 22:
YY_RULE_SETUP
{ 
					  addType( current ) ;
				          current->lineNo = yyLineNr;
					  current->name  = yytext ;
					}
	YY_BREAK
case 23:
YY_RULE_SETUP
{ lineCount() ; BEGIN( SkipDefine ) ; }
	YY_BREAK
case 24:
YY_RULE_SETUP

	YY_BREAK
case 25:
YY_RULE_SETUP

	YY_BREAK
case 26:
YY_RULE_SETUP
{ yyLineNr++ ; }
	YY_BREAK
case 27:
YY_RULE_SETUP
{ 
					  yyLineNr++ ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 28:
YY_RULE_SETUP
{ 
					  current->type = "using " ;
					  BEGIN( Define ) ;
					}
	YY_BREAK
case 29:
YY_RULE_SETUP
{ 
					  current->type = "#define" ;
					  BEGIN( Define ) ;
					}
	YY_BREAK
case 30:
YY_RULE_SETUP
{ 
					  current->name = yytext ;
					  current->lineNo = yyLineNr;
					  BEGIN( DefineEnd ) ;
					}
	YY_BREAK
case 31:
YY_RULE_SETUP
{ BEGIN( DefineEnd ) ; }
	YY_BREAK
case 32:
YY_RULE_SETUP
{ 
					  current->args = yytext ;
					  BEGIN( DefineEnded ) ;
					}
	YY_BREAK
case 33:
YY_RULE_SETUP
{ yyLineNr++ ; }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ yyLineNr++ ; }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ 
					  if( current->done == onlyDocs )
					  {
					    current->section = MACRO_SEC ;
					    current->lineNo = yyLineNr;
					    msg( "found macro    ", current->name ) ;
					    current_root->addSubEntry( current ) ;
					    current = new Entry ;
					    current->protection = protection ;
					  }
					  else
					  {
					    current->name.clear() ;
					    current->type.clear() ;
					  }
					  yyLineNr++ ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 36:
YY_RULE_SETUP
{ 
					  current->name += yytext ; 
					  current->lineNo = yyLineNr;
					}
	YY_BREAK
case 37:
YY_RULE_SETUP
{ 
					  BEGIN( FindMembers ) ;
					  if( current->lineNo == 0 ) current->lineNo = yyLineNr + 1;
					  msg( "found variable ", current->name ) ;
					  if( current->done == onlyDocs )
					  {
					    if( current->section != TYPEDEF_SEC )
						    current->section = VARIABLE_SEC ;
					    current_root->addSubEntry( current ) ;
					    current = new Entry ;
					    current->protection = protection ;
					  }
					  else
					  {
					    current->section = EMPTY_SEC ;
					    current->name.clear() ;
					    current->type.clear() ;
					    current->args.clear() ;
					  }
					  if( *yytext == '=' )
					    BEGIN( NextSemi ) ;
					}
	YY_BREAK
case 38:
YY_RULE_SETUP
{ 
					  current->args += yytext ;
					  sharpCount=1;
					  BEGIN( Array ) ;
					}
	YY_BREAK
case 39:
YY_RULE_SETUP
{ 
					  current->args += *yytext ;
					  if( --sharpCount<=0 )
						BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 40:
YY_RULE_SETUP
{ 
					  current->args += *yytext ;
					  sharpCount++;	
					}
	YY_BREAK
case 41:
YY_RULE_SETUP
{ current->args += *yytext ; }
	YY_BREAK
case 42:
YY_RULE_SETUP
{ 
					  addType( current ) ;
					  current->type += *yytext ;
					  sharpCount=1;
					  BEGIN( Sharp ) ;
					}
	YY_BREAK
case 43:
YY_RULE_SETUP
{ 
					  current->type += *yytext ;
					  if (--sharpCount<=0)
	                                     BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 44:
YY_RULE_SETUP
{ 
					  current->type += *yytext ;
					  sharpCount++;	
					}
	YY_BREAK
case 45:
YY_RULE_SETUP
{ current->type += *yytext ; }
	YY_BREAK
case 46:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 47:
YY_RULE_SETUP
{ current->program += yytext ; ++yyLineNr ; }
	YY_BREAK
case 48:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  lastContext = Curly ;
					  BEGIN( Comment ) ;
					}
	YY_BREAK
case 50:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  ++yyLineNr ;
					  lastContext = Curly ;
					  BEGIN( Comment ) ;
					}
	YY_BREAK
case 51:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  ++bracketCount ;
					}
	YY_BREAK
case 52:
YY_RULE_SETUP
{ 
					  if( bracketCount > 0 )
					  {
						current->program += yytext ;
						--bracketCount ;
					  }
					  else
					  {
					    current->args += " {...}";

					    if( lastTContext ) 
					    {
					      BEGIN( TypedefName ) ;
					    }
					    else if( current->done == onlyDocs )
					    {
					      int section = current->section;
					      current_root->addNextEntry( current ) ;
					      current = new Entry ;
					      current->protection = protection ;
					      if( section == CLASS_SEC ) current->protection = GLOB ;
					      BEGIN( NextSemi ) ;
					    }
					    else
					    {
					      current->name.clear() ;
					      current->type.clear() ;
					      current->args.clear() ;
					      current->section = EMPTY_SEC ;
					      BEGIN( NextSemi ) ;
					    }
					  }
					}
	YY_BREAK
case 53:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 54:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ 
					  current->args = yytext ;
					  BEGIN( Round ) ;
					}
	YY_BREAK
case 56:
YY_RULE_SETUP
{ 
					  current->args += *yytext ;
					  ++bracketCount ;
					}
	YY_BREAK
case 57:
YY_RULE_SETUP
{ 
					  current->args += *yytext ;
					  if( bracketCount > 0 )
					    --bracketCount ;
					  else
					    BEGIN( Function ) ;
					}
	YY_BREAK
case 58:
YY_RULE_SETUP
{ lineCount() ; current->args += ", " ; }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ lineCount() ; current->args += " " ; }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ current->args += *yytext ; }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ lineCount() ; current->args += " const" ; }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ 
					  current->args += " throw(" ;
					  lineCount() ;
				  	  BEGIN( Round ) ;
					}
	YY_BREAK
case 63:
YY_RULE_SETUP
{ 
					  current->type += current->name ;
					  current->name  = current->args ;
					  current->args  = yytext ;
					  current->lineNo = yyLineNr;
					  BEGIN( Round ) ;
					}
	YY_BREAK
case 64:
YY_RULE_SETUP
{ 
					  msg( "found method   ", current->name ) ;
					  if( current->done == onlyDocs )
					  {
					    current->section = FUNCTION_SEC ;
					    current_root->addSubEntry(current);
					    current = new Entry ;
					    current->protection = protection ;
					  }
					  else
					  {
					    current->name.clear() ;
					    current->type.clear() ;
					    current->args.clear() ;
					  }
					  if( *yytext == '{' )
					      BEGIN( SkipCurly ) ;
					  else if( *yytext == ':' )
					      BEGIN( SkipInits ) ;
					  else
					      BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 65:
YY_RULE_SETUP
{ BEGIN( SkipCurly ) ; }
	YY_BREAK
case 66:
YY_RULE_SETUP
{ lineCount() ; }
	YY_BREAK
case 67:
YY_RULE_SETUP

	YY_BREAK
case 68:
YY_RULE_SETUP
{ ++bracketCount ; }
	YY_BREAK
case 69:
YY_RULE_SETUP
{ 
					  if( bracketCount > 0 )
					    --bracketCount ;
					  else
					    BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 70:
YY_RULE_SETUP
{ 
					  if( current->done == onlyDocs )
					  {
					    current->section = VARIABLE_SEC ;
					    current_root->addSubEntry(current);
					    current = new Entry ;
					    current->protection = protection ;
					  }
					  else
					  {
					    current->section = EMPTY_SEC ;
					    current->type.clear() ;
					    current->name.clear() ;
					    current->args.clear() ;
					  }
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 71:
YY_RULE_SETUP
{ 
					  if( !current->type.empty() && !current->name.empty() ) current->type += " " ;
					  current->type += current->name ;
				  	  current->name = yytext ;
					  current->lineNo = yyLineNr;
					}
	YY_BREAK
case 72:
YY_RULE_SETUP
{ 
					  current->args = " :" ;
					  BEGIN( Bases ) ;
					}
	YY_BREAK
case 73:
YY_RULE_SETUP
{ 
					  current->file = yyFileName ;
				  	  if( current->lineNo == 0 ) current->lineNo = yyLineNr;
					  current->startLine = yyLineNr ;
				  	  msg( "found name     ", current->name ) ;
				  	  BEGIN( Curly ) ;
					}
	YY_BREAK
case 74:
YY_RULE_SETUP
{ 
					  current->extends.append( new McString(yytext) ) ;
					  if( !current->args.empty() ) current->args += " " ;
					  current->args += yytext ;
					}
	YY_BREAK
case 75:
YY_RULE_SETUP
{ current->args += ',' ; }
	YY_BREAK
case 76:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 77:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 78:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  BEGIN( Curly ) ;
					}
	YY_BREAK
case 79:
YY_RULE_SETUP
{ 
					  if( !current->type.empty() && !current->name.empty() ) current->type += " " ;
					  current->type += current->name ;
				  	  current->name = yytext ;
					  current->lineNo = yyLineNr;
		
				          lastTContext = 0;
					  msg( "found name     ", current->name ) ;

				          int section = current->section;
					  current_root->addNextEntry( current ) ;
					  current = new Entry ;
					  current->protection = protection ;
					  if( section == CLASS_SEC ) current->protection = GLOB ;

					  BEGIN( NextSemi ) ;
					}
	YY_BREAK
case 80:
YY_RULE_SETUP
{
				          lastTContext = 0;
					  msg( "found name     ", current->name ) ;

					  int section = current->section;
					  current_root->addNextEntry( current ) ;
					  current = new Entry ;
					  current->protection = protection ;
					  if( section == CLASS_SEC ) current->protection = GLOB ;

				          if( *yytext == ',' )
					    BEGIN( NextSemi ) ;
					  else
					    BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 81:
YY_RULE_SETUP
{ 
					  lineCount() ;
					  if( !current->doc.empty()
						  ||  !current->memo.empty() )
					  {
						msg( "found doc entry" ) ;
						current->lineNo = yyLineNr;
						current_root->addSubEntry( current ) ;
						current = new Entry ;
					  }
					  current->done = onlyDocs ;
					  BEGIN( Cxx_Memo ) ;
					}
	YY_BREAK
case 82:
YY_RULE_SETUP
{ current->memo += yytext ; }
	YY_BREAK
case 83:
YY_RULE_SETUP
{ 
					  yyLineNr++ ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 84:
YY_RULE_SETUP
{ lineCount() ; }
	YY_BREAK
case 85:
YY_RULE_SETUP
{ lineCount() ; }
	YY_BREAK
case 86:
YY_RULE_SETUP
{ lineCount() ; }
	YY_BREAK
case 87:
YY_RULE_SETUP
{ 
					  lineCount() ;
					  lastCContext = YY_START ;
					  BEGIN( SkipComment ) ;
					}
	YY_BREAK
case 88:
YY_RULE_SETUP
{ 
					  lineCount() ;
					  if( !current->doc.empty() 
					      ||  !current->memo.empty() )
					  {
					     msg( "found doc entry" ) ;
					     current->lineNo = yyLineNr;
					     current_root->addSubEntry( current ) ;
					     current = new Entry ;
					  }
					  current->done = onlyDocs ;
					  BEGIN( Doc ) ;
					}
	YY_BREAK
case 89:
YY_RULE_SETUP
{ yyLineNr++; BEGIN( FindMembers ) ; }
	YY_BREAK
case 90:
YY_RULE_SETUP
{ 
					  current->doc += yytext ;
					  BEGIN( VerbDoc ) ;
					}
	YY_BREAK
case 91:
YY_RULE_SETUP
{ 
					  current->doc += '\n' ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 92:
YY_RULE_SETUP
{ 
					  current->doc += yytext ;
					  BEGIN( Doc ) ;
					}
	YY_BREAK
case 93:
YY_RULE_SETUP

	YY_BREAK
case 94:
YY_RULE_SETUP
{ 
					  if( !current->doc.empty() ) current->doc += '\n' ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 95:
YY_RULE_SETUP
{ current->doc += *yytext ; }
	YY_BREAK
case 96:
YY_RULE_SETUP
{ current->doc += yytext ; }
	YY_BREAK
case 97:
YY_RULE_SETUP
{ current->doc += yytext ; }
	YY_BREAK
case 98:
YY_RULE_SETUP
{ BEGIN( FindMembers ) ; }
	YY_BREAK
case 99:
YY_RULE_SETUP
{ 
					  current->memo += yytext ;
					  current->doc  += yytext ; 
					}
	YY_BREAK
case 100:
YY_RULE_SETUP
{ 
					  BEGIN( CppDoc ) ;
                      			  lineCount();
					  current->doc  += yytext ; 
					}
	YY_BREAK
case 101:
YY_RULE_SETUP
{ 
					  current->doc  += *yytext ; 
	                  		  lineCount();
					}
	YY_BREAK
case 102:
YY_RULE_SETUP
{ current->memo += yytext ; }
	YY_BREAK
case 103:
YY_RULE_SETUP
{ current->doc  += yytext ; }
	YY_BREAK
case 104:
YY_RULE_SETUP
{
					  lineCount() ;
					  current->see.append( new McString ) ;
					  BEGIN( See ) ;
					}
	YY_BREAK
case 105:
YY_RULE_SETUP
{
					  lineCount() ;
					  BEGIN( Author ) ; }
	YY_BREAK
case 106:
YY_RULE_SETUP
{
					  lineCount() ;
					  BEGIN( Version ) ; }
	YY_BREAK
case 107:
YY_RULE_SETUP
{
					  lineCount() ;
					  current->param.append( new McString  ) ;
					  BEGIN( Param ) ;
					}
	YY_BREAK
case 108:
YY_RULE_SETUP
{
					  lineCount() ;
					  current->exception.append( new McString ) ;
					  BEGIN( Exception ) ;
					}
	YY_BREAK
case 109:
YY_RULE_SETUP
{
					  lineCount() ;
					  BEGIN( Return ) ; }
	YY_BREAK
case 110:
YY_RULE_SETUP
{
					  current->name.clear() ;
					  current->section = MANUAL_SEC ;
					  BEGIN( Name ) ;
					}
	YY_BREAK
case 111:
YY_RULE_SETUP
{
					  lineCount() ;
					  current->memo.clear() ;
					  BEGIN( Memo ) ;
					}
	YY_BREAK
case 112:
YY_RULE_SETUP
{
					  lineCount() ;
					  current->type.clear() ;
					  BEGIN( Type ) ;
					}
	YY_BREAK
case 113:
YY_RULE_SETUP
{
					  lineCount() ;
					  current->args.clear() ;
					  BEGIN( Args ) ;
					}
	YY_BREAK
case 114:
YY_RULE_SETUP
{ current->name = yytext ; }
	YY_BREAK
case 115:
YY_RULE_SETUP
{ ++yyLineNr ; BEGIN( CppDoc ) ; }
	YY_BREAK
case 116:
YY_RULE_SETUP
{ current->type = yytext ; }
	YY_BREAK
case 117:
YY_RULE_SETUP
{ ++yyLineNr ; BEGIN( CppDoc ) ; }
	YY_BREAK
case 118:
YY_RULE_SETUP
{ current->args = yytext ; }
	YY_BREAK
case 119:
YY_RULE_SETUP
{ ++yyLineNr ; BEGIN( CppDoc ) ; }
	YY_BREAK
case 120:
YY_RULE_SETUP
{ current->author += *yytext ; }
	YY_BREAK
case 121:
YY_RULE_SETUP
{ current->version += *yytext ; }
	YY_BREAK
case 122:
YY_RULE_SETUP
{ *(current->see.last()) += *yytext ; }
	YY_BREAK
case 123:
YY_RULE_SETUP
{ *(current->param.last()) += *yytext ; }
	YY_BREAK
case 124:
YY_RULE_SETUP
{ *(current->exception.last()) += *yytext ; }
	YY_BREAK
case 125:
YY_RULE_SETUP
{ current->memo += *yytext ; }
	YY_BREAK
case 126:
YY_RULE_SETUP
{ current->retrn += *yytext ; }
	YY_BREAK
case 127:
YY_RULE_SETUP
{ current->author  += '\n' ; lineCount() ; }
	YY_BREAK
case 128:
YY_RULE_SETUP
{ current->version += '\n' ; lineCount() ; }
	YY_BREAK
case 129:
YY_RULE_SETUP
{ *(current->see.last()) += '\n' ; lineCount() ; }
	YY_BREAK
case 130:
YY_RULE_SETUP
{ *(current->param.last()) += '\n' ; lineCount() ; }
	YY_BREAK
case 131:
YY_RULE_SETUP
{ *(current->exception.last()) += '\n' ; lineCount() ; }
	YY_BREAK
case 132:
YY_RULE_SETUP
{ current->memo += *yytext ; lineCount() ; }
	YY_BREAK
case 133:
YY_RULE_SETUP
{ current->retrn += *yytext ; lineCount() ; }
	YY_BREAK
case 134:
YY_RULE_SETUP

	YY_BREAK
case 135:
YY_RULE_SETUP
{ yyLineNr++ ; }
	YY_BREAK
case 136:
YY_RULE_SETUP
{ 
					  lastCContext = YY_START ;
					  BEGIN( SkipComment ) ;
					}
	YY_BREAK
case 137:
YY_RULE_SETUP
{ BEGIN( lastCContext ) ; }
	YY_BREAK
case 138:
YY_RULE_SETUP
{ 
					  lastCContext = YY_START ;
					  BEGIN( SkipCxxComment ) ;
					}
	YY_BREAK
case 139:
YY_RULE_SETUP
{ 
					  yyLineNr++ ;
					  BEGIN( lastCContext ) ;
					}
	YY_BREAK
case 140:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Cxx_Memo):
case YY_STATE_EOF(Doc):
case YY_STATE_EOF(VerbDoc):
case YY_STATE_EOF(Define):
case YY_STATE_EOF(DefineEnd):
case YY_STATE_EOF(DefineEnded):
case YY_STATE_EOF(ClassName):
case YY_STATE_EOF(TypedefName):
case YY_STATE_EOF(Bases):
case YY_STATE_EOF(NextSemi):
case YY_STATE_EOF(FindMembers):
case YY_STATE_EOF(Function):
case YY_STATE_EOF(Operator):
case YY_STATE_EOF(Throws):
case YY_STATE_EOF(Array):
case YY_STATE_EOF(Round):
case YY_STATE_EOF(Curly):
case YY_STATE_EOF(SkipCurly):
case YY_STATE_EOF(SkipInits):
case YY_STATE_EOF(SkipDefine):
case YY_STATE_EOF(Sharp):
case YY_STATE_EOF(Comment):
case YY_STATE_EOF(SkipComment):
case YY_STATE_EOF(SkipCxxComment):
case YY_STATE_EOF(CppDoc):
case YY_STATE_EOF(CppMemo):
case YY_STATE_EOF(See):
case YY_STATE_EOF(Args):
case YY_STATE_EOF(Type):
case YY_STATE_EOF(Author):
case YY_STATE_EOF(Name):
case YY_STATE_EOF(Version):
case YY_STATE_EOF(Param):
case YY_STATE_EOF(Memo):
case YY_STATE_EOF(Return):
case YY_STATE_EOF(Exception):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_last_accepting_cpos;
				yy_current_state = yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 795 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 795 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 794);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif



/*@ ----------------------------------------------------------------------------
 */
void parseDoc(Entry* rt)
{
	if( !rt->doc.empty() )
	{
		Entry* _current = current ;
		rt->program = rt->doc ;
		rt->doc.clear() ;
		inputString   = rt->program ;
		inputPosition = 0 ;
		current = rt ;
		cpprestart( cppin ) ;
		if( !rt->memo.empty() )
			BEGIN( CppDoc ) ;
		else
			BEGIN( CppMemo ) ;
		cpplex() ;
		rt->program.clear() ;
		if( rt->memo.length()+2 >= rt->doc.length() )
			rt->doc.clear() ;
		current = _current ;
	}
}

void callcpplex()
{
	cpplex() ;
	if( ( !current->name.empty()  ||  !current->program.empty()  ||
		  !current->memo.empty()  ||  !current->doc.empty() )
		&&  current->done == onlyDocs )
	{
		if( current->section == EMPTY_SEC )
			current->section = VARIABLE_SEC ;
		current_root->addSubEntry( current ) ;
		current = new Entry ;
		current->protection = protection ;
	}
}

void parseCppClasses(Entry* rt)
{
    if( rt == 0 ) return ;
    for( Entry *cr = rt ; cr ; cr = cr->next )
    {
		if( !cr->program.empty() )
		{
#ifdef _DEBUG
			if (verb)
				printf("Scanning substuff of (%s) %s\n",
				   (const char *)cr->type,
				   (const char *)cr->name);
#endif
			inputString   = cr->program ;
			inputPosition = 0 ;
			cpprestart( cppin ) ;
			BEGIN( FindMembers ) ;
			current_root = cr ;
			strcpy( yyFileName, cr->file ) ;
			yyLineNr = cr->startLine ;
			current->type.clear() ;
			current->name.clear() ;
			current->args.clear() ;
			current->section = EMPTY_SEC ;
			if( cr->section == CLASS_SEC )
				current->protection = protection = PRIV ;
			else if( cr->section == STRUCT_SEC )
				current->protection = protection = PUBL ;
			else if( cr->section == UNION_SEC )
				current->protection = protection = PUBL ;
			else if( cr->section == ENUM_SEC )
				current->protection = protection = PUBL ;
			else
				current->protection = protection = GLOB ;
			callcpplex() ;
			cr->program.clear() ;
		}
    }
    parseDoc( rt ) ;
}

void parseCpp(Entry* rt)
{
	current_root  = rt ;
	global_root   = rt ;
	protection    = GLOB ;
	current       = new Entry ;
	yyLineNr      = 1 ;
	yyFileName[0] = '\0' ;
	bracketCount  = 0 ;
	sharpCount    = 0 ;
	lastTContext  = 0 ;

	inputString   = rt->program ;
	inputPosition = 0 ;
	cpprestart( cppin ) ;
	BEGIN( FindMembers ) ;
	callcpplex() ;
	rt->program.clear() ;
	parseCppClasses( rt ) ;

	delete current;
}

extern "C" {
	int	cppwrap()	{ return 1 ; }
};
