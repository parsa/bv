#define yy_create_buffer cpp_create_buffer
#define yy_delete_buffer cpp_delete_buffer
#define yy_scan_buffer cpp_scan_buffer
#define yy_scan_string cpp_scan_string
#define yy_scan_bytes cpp_scan_bytes
#define yy_flex_debug cpp_flex_debug
#define yy_init_buffer cpp_init_buffer
#define yy_flush_buffer cpp_flush_buffer
#define yy_load_buffer_state cpp_load_buffer_state
#define yy_switch_to_buffer cpp_switch_to_buffer
#define yyin cppin
#define yyleng cppleng
#define yylex cpplex
#define yyout cppout
#define yyrestart cpprestart
#define yytext cpptext
#define yywrap cppwrap

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
//#ifdef c_plusplus
//#ifndef __cplusplus
//#define __cplusplus
//#endif
//#endif


#ifdef __cplusplus

#include <stdlib.h>
//#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 139
#define YY_END_OF_BUFFER 140
static yyconst short int yy_acclist[919] =
    {   0,
       69,   69,   15,   15,   37,   37,  116,  116,  114,  114,
      112,  112,  140,  132,  139,  132,  139,  133,  139,  132,
      139,   69,  132,  139,   69,  132,  139,   70,  133,  139,
       69,  132,  139,   86,  132,  139,   86,  132,  139,   87,
      133,  139,   86,  132,  139,   92,  132,  139,   92,  132,
      139,   93,  133,  139,   92,  132,  139,   92,  132,  139,
       95,  132,  139,   95,  132,  139,   96,  133,  139,   95,
      132,  139,   79,  132,  139,   79,  132,  139,   78,  133,
      139,   79,  132,  139,   79,  132,  139,   79,  132,  139,
       76,  133,  139,   79,  132,  139,   22,  132,  139,   23,

      132,  139,   26,  133,  139,  132,  139,  132,  139,  132,
      139,   60,  132,  139,   61,  132,  139,   59,  132,  139,
       62,  132,  139,  132,  139,   63,  132,  139,   64,  132,
      139,    2,  132,  139,  132,  139,  133,  139,   27,  132,
      139,   46,  132,  139,   28,  132,  139,   16,  132,  139,
      132,  139,   33,  132,  139,   29,  132,  139,   16,  132,
      139,   16,  132,  139,   16,  132,  139,   16,  132,  139,
       16,  132,  139,   16,  132,  139,   16,  132,  139,  132,
      139,   17,  132,  139,  132,  139,   54,  132,  139,   55,
      132,  139,  132,  139,  132,  139,   15,  132,  139,   15,

      132,  139,   15,  133,  139,   15,  132,  139,   32,  132,
      139,   32,  132,  139,   32,  132,  139,   31,   32,  132,
      139,   30,   32,  132,  139,   51,  132,  139,   51,  132,
      139,   50,   51,  132,  139,   50,  133,  139,   47,   51,
      132,  139,   48,   51,  132,  139,   49,   51,  132,  139,
       51,  132,  139,   37,   45,  132,  139,   37,   45,  132,
      139,   44,  133,  139,   45,  132,  139,   45,  132,  139,
       42,   45,  132,  139,   43,   45,  132,  139,   57,  132,
      139,   58,  132,  139,   56,  132,  139,   18,  132,  139,
       18,  132,  139,   20,  133,  139,   18,  132,  139,   18,

      132,  139,   36,  132,  139,   36,  132,  139,   36,  132,
      139,   35,   36,  132,  139,   34,   36,  132,  139,   66,
      132,  139,   66,  132,  139,   65,  133,  139,   66,  132,
      139,   66,  132,  139,  132,  139,  132,  139,  132,  139,
      132,  139,  132,  139,  133,  138,  139,  132,  139,   99,
      132,  139,   99,  132,  139,   99,  133,  139,   99,  132,
      139,   99,  132,  139,   97,  132,  139,   97,  132,  139,
       97,  133,  139,   98,  132,  139,   97,  132,  139,   97,
      132,  139,  120,  132,  139,  120,  132,  139,  127,  133,
      139,  120,  132,  139,  120,  132,  139,  116,  132,  139,

      116,  132,  139,  117,  133,  139,  116,  132,  139,  116,
      132,  139,  114,  132,  139,  114,  132,  139,  115,  133,
      139,  114,  132,  139,  114,  132,  139,  118,  132,  139,
      118,  132,  139,  125,  133,  139,  118,  132,  139,  118,
      132,  139,  112,  132,  139,  112,  132,  139,  113,  133,
      139,  112,  132,  139,  119,  132,  139,  119,  132,  139,
      126,  133,  139,  119,  132,  139,  119,  132,  139,  121,
      132,  139,  121,  132,  139,  128,  133,  139,  121,  132,
      139,  121,  132,  139,  123,  132,  139,  123,  132,  139,
      130,  133,  139,  123,  132,  139,  123,  132,  139,  124,

      132,  139,  124,  132,  139,  131,  133,  139,  124,  132,
      139,  124,  132,  139,  122,  132,  139,  122,  132,  139,
      129,  133,  139,  122,  132,  139,  122,  132,  139,    1,
      134,  137,   69,   69,    1,   69,   69,  134,   69,  137,
       84,  134,   85,  137,   94,   90,  134,   91,  137,   78,
       78,   82,   81,  134,   80,  137,   22,   24,   25,   61,
       62,   60,   61,   62,   63,   27,   16,  134,  137,   16,
       16,   16,   16,   16,   16,   16,   16,   17,   15,   15,
        1,   15,   15,  134,   15,  137,   50,   49,   49,   37,
       37,    1,   37,   40,  134,   38,  137,   19,    1,   67,

      134,  137,  136,  135,  137,  138,    1,  138,  134,  137,
      101,  134,  101,  137,   98,  100,  134,  100,  137,  127,
      116,  116,    1,  116,  116,  134,  116,  137,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  114,  114,    1,
      114,  114,  134,  114,  137,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  125,  112,  112,    1,  112,  112,
      134,  112,  137,  126,  128,  130,  131,  129,   78,   74,
       73,16452,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   39,   40,   41,   40,   38,   67,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  114,  114,  114,

      114,  114,  114,  114,  114,  114,  114,   73,   72,   71,
     8260,   16,   16,   16,   16,   16,   16,   16,   16,   16,
      102,  116,  116,  116,  116,  116,  116,  116,  102,  116,
      116,  116,  114,  114,  114,  114,  114,  114,  114,  102,
      114,  114,  114,   88,   89, 8260,   83,   16,   12,   16,
       16,   16,   16,   16,   16,   16,   52,  111,  109,  108,
      102,  110,  111,  116,  116,  116,  109,  116,  108,  116,
      116,  116,  102,  116,  110,  116,  116,  111,  114,  114,
      114,  109,  114,  108,  114,  114,  114,  102,  114,  110,
      114,  114,   10,   16,   16,   16,   16,   16,   16,   13,

       52,   53,  111,  109,  108,  105,  110,  111,  116,  116,
      116,  109,  116,  108,  116,  105,  116,  116,  110,  116,
      116,  111,  114,  114,  114,  109,  114,  108,  114,  105,
      114,  114,  110,  114,  114,   16,   16,   16,    3,   16,
       11,   16,  103,  105,  107,  103,  116,  116,  105,  116,
      107,  116,  116,  103,  114,  114,  105,  114,  107,  114,
      114,    3,   16,    5,   16,   16,    3,   21,  103,  107,
      104,  103,  116,  116,  107,  116,  104,  116,  103,  114,
      114,  107,  114,  104,  114,    5,   14,   14,   16,    5,
       16,  104,  116,  104,  116,  114,  104,  114,    4,   16,

      106,  106,  116,  106,  114,    4,    4,  106,  106,  116,
      106,  114,    8,   77,    6,    9,    7,   75
    } ;

static yyconst short int yy_accept[767] =
    {   0,
        1,    1,    1,    2,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    5,    5,    5,    5,    5,    5,    5,    6,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    8,    9,   10,   11,   11,   11,   12,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   14,
       16,   18,   20,   22,   25,   28,   31,   34,   37,   40,
       43,   46,   49,   52,   55,   58,   61,   64,   67,   70,

       73,   76,   79,   82,   85,   88,   91,   94,   97,  100,
      103,  106,  108,  110,  112,  115,  118,  121,  124,  126,
      129,  132,  135,  137,  139,  142,  145,  148,  151,  153,
      156,  159,  162,  165,  168,  171,  174,  177,  180,  182,
      185,  187,  190,  193,  195,  197,  200,  203,  206,  209,
      212,  215,  218,  222,  226,  229,  232,  236,  239,  243,
      247,  251,  254,  258,  262,  265,  268,  271,  275,  279,
      282,  285,  288,  291,  294,  297,  300,  303,  306,  309,
      312,  316,  320,  323,  326,  329,  332,  335,  337,  339,
      341,  343,  345,  348,  350,  353,  356,  359,  362,  365,

      368,  371,  374,  377,  380,  383,  386,  389,  392,  395,
      398,  401,  404,  407,  410,  413,  416,  419,  422,  425,
      428,  431,  434,  437,  440,  443,  446,  449,  452,  455,
      458,  461,  464,  467,  470,  473,  476,  479,  482,  485,
      488,  491,  494,  497,  500,  503,  506,  509,  512,  515,
      518,  521,  524,  527,  530,  530,  531,  532,  533,  534,
      535,  537,  539,  541,  543,  545,  546,  548,  550,  551,
      552,  553,  555,  557,  557,  557,  557,  557,  558,  558,
      559,  560,  560,  561,  562,  563,  564,  565,  565,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  567,

      568,  569,  570,  571,  572,  573,  574,  575,  576,  577,
      578,  578,  579,  579,  579,  579,  579,  579,  579,  579,
      580,  581,  583,  585,  587,  588,  589,  590,  591,  592,
      594,  594,  594,  596,  598,  599,  599,  599,  599,  600,
      600,  601,  602,  603,  603,  603,  604,  606,  606,  607,
      607,  608,  609,  610,  611,  613,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  616,  618,  620,  621,
      622,  623,  625,  627,  629,  630,  631,  632,  633,  634,
      635,  636,  637,  638,  639,  640,  642,  644,  646,  647,
      648,  649,  650,  651,  652,  653,  654,  655,  656,  657,

      658,  660,  662,  664,  665,  666,  667,  668,  669,  669,
      669,  670,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  672,  672,  673,  673,  674,  675,
      676,  677,  678,  679,  680,  681,  682,  682,  682,  682,
      683,  684,  685,  686,  687,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  689,  690,  691,  692,
      693,  694,  695,  696,  697,  698,  699,  700,  701,  702,
      703,  704,  705,  706,  707,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      709,  710,  711,  711,  712,  712,  713,  714,  715,  716,

      717,  718,  719,  720,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  722,  722,  722,  723,  724,
      725,  726,  727,  728,  729,  731,  732,  733,  734,  735,
      736,  737,  738,  739,  740,  742,  743,  744,  744,  744,
      744,  744,  744,  745,  745,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  747,
      747,  748,  749,  750,  751,  752,  753,  754,  755,  756,
      757,  757,  758,  758,  759,  759,  759,  760,  761,  761,
      761,  762,  763,  763,  765,  766,  767,  769,  771,  772,
      773,  775,  777,  778,  780,  781,  782,  784,  786,  787,

      788,  790,  792,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  794,  795,  796,  797,  798,  799,  800,
      801,  801,  802,  802,  803,  804,  804,  804,  805,  806,
      807,  807,  808,  808,  810,  811,  812,  814,  816,  818,
      819,  821,  822,  824,  825,  826,  828,  830,  832,  833,
      835,  836,  836,  836,  836,  836,  836,  836,  836,  837,
      838,  839,  841,  842,  843,  843,  844,  844,  845,  846,
      846,  848,  849,  851,  853,  854,  856,  857,  859,  861,
      862,  862,  862,  862,  862,  863,  863,  864,  866,  867,
      868,  868,  869,  870,  870,  871,  872,  874,  875,  877,

      879,  881,  882,  884,  886,  886,  886,  887,  887,  888,
      890,  891,  892,  892,  892,  892,  892,  892,  893,  894,
      896,  897,  899,  899,  899,  899,  901,  901,  901,  901,
      901,  902,  904,  906,  906,  906,  907,  908,  908,  908,
      908,  908,  909,  911,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  914,  914,  914,  914,  915,  916,
      916,  917,  917,  918,  919,  919
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    3,    4,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    1,    5,    6,    1,    1,    7,    1,    8,
        9,   10,    1,   11,    1,   12,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,   16,   17,
       18,   19,    1,   20,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       21,   22,   23,    1,   14,    1,   24,   25,   26,   27,

       28,   29,   30,   31,   32,   14,   14,   33,   34,   35,
       36,   37,   14,   38,   39,   40,   41,   42,   43,   44,
       45,   14,   46,    1,   47,   48,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[49] =
    {   0,
        1,    1,    1,    2,    3,    1,    4,    5,    1,    6,
        1,    7,    8,    9,   10,    1,   11,    1,   11,    1,
        4,    1,    4,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,   12,   12,   13
    } ;

static yyconst short int yy_base[823] =
    {   0,
        0,    1,    4,    5,    8,   18,   22,   23,   26,   36,
       40,   41,   54,   55,   77,    0,  124,  127,  132,  137,
      159,    0,  207,    0,  140,  254,  270,   13,  317,    0,
      255,  327,  324,  332,  337,  349,  365,  377,  387,  391,
      352,  362,  399,  403,  409,  413,  342,  423,  419,  437,
      449,  453,  456,  463,  466,  469,  473,  479,  491,  492,
      496,  504,  509,  512,  516,  517,  529,  532,  536,  537,
      542,  549,  550,  554,  557,  562,  574,  575, 2041, 2042,
     2038, 2042,   24,    0,   44, 2042,   42, 2042, 2037, 2042,
       56, 2042, 2036, 2042, 2024,   60, 2042, 2034, 2042,   61,

     2042, 2033,  145, 2021,   62, 2008,  259, 2004,    0, 2042,
     2042, 2022, 2026,  368,    0, 2026, 2042, 2025,  374,    0,
     2042, 2042,  593,  415,  254, 2042, 2042,    0,  314, 2042,
     2042, 1994, 1991, 1988,  311, 1984, 1978, 1987,  381,   20,
      461, 2042, 2042, 1985, 1989,    0,  150,    0,  384, 2042,
     2017,  433, 2042, 2042, 2042, 2016,  499,  524, 2042, 2042,
       57,  513,    0,  579, 2042, 1994,  555, 2042, 2042, 2042,
     2042, 2042, 2042, 2014, 2042,  576, 2011, 2042, 2012,  580,
     2042, 2042, 2003,  470, 2042,  581,  588,  451, 1999,  589,
     2007,  486, 2042,  599, 2042, 2008, 2042,  594,  611, 2042,

     2007, 2042,  319,  595,    0, 2042, 2006,  344,  600,    0,
        0,  569, 2042,  601,  630,    0,  613, 2042,  610,  649,
     2042, 2005,  544,  614,    0,    0,  614, 2042,  618, 2042,
     2004,  633,  628,    0, 2042, 2003,  639,  634,    0, 2042,
     2002,  652,  647,    0, 2042, 2001,  658,  653,    0, 2042,
     2000,  671,  666,    0, 1999, 2042, 2042, 2042,    0,  676,
        0,    0,    0, 1980, 1979, 2042, 2042, 2042,  619,  682,
     2042, 2042, 2042, 1970,  649,  680, 1962,    0, 1987, 2042,
     2042,  679, 1992, 1991,    0, 1990, 1989,  668,    0,    0,
      693,  688, 1958, 1955,  661, 1949, 1943, 1952,  693,    0,

      123,  691, 1962, 1944, 1956,  306, 1958, 1944, 1944, 1948,
        0,  379,  421, 1951,  702, 1942, 1946, 1941, 1937,    0,
      258,    0,    0,    0,  704,  706,  709,    0,  714,    0,
     1951,    6,  719,    0, 2042, 1963,  707,  722, 1962,  731,
     1961,  721, 1960,  727, 1956, 2042, 2042, 1964, 2042,  734,
     1963, 1964, 1961, 1960, 2042, 2042,  702, 1919, 1934, 1937,
     1936, 1931, 1930, 1912, 1928,  742, 2042, 2042,  744,    0,
      747,    0,    0,    0,  712, 1911, 1926, 1929, 1928, 1923,
     1922, 1904, 1920,    0,  750,    0,    0,    0,  717, 1903,
     1918, 1921, 1920, 1915, 1914, 1896, 1912,  753,    0,  760,

        0,    0,    0,  762,  764,  766,  768,  770,  729,  731,
     1936, 2042, 1908, 1910, 1926, 1922, 1910, 1892,  727, 1907,
     1893, 1893, 1897,  776, 1882,    0, 1881, 1887, 1891, 1886,
     1881, 1882, 1888, 1879, 1891, 1882, 1888, 1877, 1879, 2042,
      777, 2042,  780,    0,  783, 1884, 1873, 1886, 1877, 1876,
     1871, 1868, 1879, 1869, 1867, 1874, 1863, 1876, 1867, 1866,
     1861, 1858, 1869, 1859, 1857, 1864, 1853, 1866, 1857, 1856,
     1851, 1848, 1859, 1849, 1847, 1874, 1873, 1878, 1877, 1848,
     1833, 1839, 1843, 1834, 1835, 1841, 1832, 1844, 1835, 1867,
      778, 2042, 1859, 1865, 1863, 1827,  791, 1841, 1840, 1835,

     1830, 1835, 1833, 1824, 1826, 1817, 1813, 1816, 1823, 1825,
     1816, 1823, 1826, 1808,  793, 1820, 1808, 1807, 1814, 1816,
     1807, 1814, 1817, 1799,  795, 1811, 1799, 1798, 1805, 1807,
     1798, 1805, 1808, 1790,  797, 1802, 1790, 1818,  792, 1817,
      793, 1822, 2042, 1821, 2042, 1789, 1781, 1783,  804, 1797,
     1792, 1787, 1792, 1790, 1781,  799, 1805,  800, 1811, 1809,
     2042,  811,  813, 1772, 1771, 1784, 1783, 1768, 1779,  815,
     1771,  817,  819,  821, 1769, 1767,  825, 1800, 1768, 1763,
      827,  829, 1768,  831, 1763, 1761,  833, 1794, 1762, 1757,
      835,  837, 1762,  839, 1757, 1755,  841, 1788, 1756, 1751,

      843,  845, 1756, 1741, 1758,  847, 1745, 1758, 1757, 1742,
     1753,  849,  851, 1744, 1751, 1738, 1762,  853, 1747,  855,
     1747,  857,  859, 2042,  861, 1736, 1733,  865, 1769,  867,
     1736,  869, 1734,  871, 1731, 1728,  873, 1764,  875, 1731,
      877, 1729,  879, 1726, 1723,  881, 1759,  883, 1726,  885,
     1724, 1717, 1720, 1729, 1716, 1740,  887, 1642, 1614, 1611,
     1572,  889,  891,  893, 1571,  895, 1490,  897,  899, 1475,
      901, 1477,  903,  905, 1458,  907, 1457,  909,  911, 1449,
     1455, 1435, 1439, 1425,  913,  915,  919,  965, 1423,  967,
      969, 1444,  971, 1409,  973,  975,  977, 1405,  979,  981,

      983, 1404,  985,  987, 1400, 1397,  989, 1368, 2042,    0,
      995,  994,  963,  959,  826,  791,  776,  997,  769,  999,
      757, 1001,  757,  699,  706, 1003,  657,  599,  562,  553,
     1008, 1010, 1012,  556,  540, 1014, 1016,  521,  509,  474,
      471, 1018, 1020, 1022,  457,  450,  439, 1024,  418,  395,
      378,  355, 1026, 1028,  117, 1030,  113, 2042, 1032, 1034,
     1036,   91, 1038, 2042, 2042, 1042, 1055, 1068, 1081, 1094,
     1107, 1120, 1133, 1146, 1159, 1172, 1185, 1198, 1211, 1224,
     1237, 1250, 1263, 1276, 1289, 1302, 1315, 1328, 1341, 1354,
     1367, 1380, 1393, 1406, 1413, 1423, 1433, 1437, 1442, 1455,

     1468, 1481, 1494, 1507, 1520, 1533, 1546, 1559, 1572, 1585,
     1598, 1611, 1624, 1637, 1650, 1663, 1676, 1689, 1702, 1715,
     1728, 1741
    } ;

static yyconst short int yy_def[823] =
    {   0,
      766,  766,  767,  767,  768,  768,  769,  769,  770,  770,
      771,  771,  771,  771,  765,   15,  766,  766,  766,  766,
      765,   21,  765,   23,  766,  766,  765,   27,  766,   29,
      772,  772,  766,  766,  773,  773,  774,  774,  775,  775,
      766,  766,  766,  766,  776,  776,  777,  777,  778,  778,
      766,  766,  779,  779,  780,  780,  781,  781,  782,  782,
      783,  783,  784,  784,  785,  785,  786,  786,  787,  787,
      788,  788,  789,  789,  790,  790,  791,  791,  765,  765,
      792,  765,  765,  793,  794,  765,  793,  765,  792,  765,
      765,  765,  792,  765,  765,  765,  765,  792,  765,  765,

      765,  792,  765,  765,  765,  765,  765,  765,  795,  765,
      765,  796,  765,  765,  797,  765,  765,  765,  765,  798,
      765,  765,  765,  765,  765,  765,  765,  799,  765,  765,
      765,  799,  799,  799,  799,  799,  799,  799,  123,  765,
      765,  765,  765,  765,  765,  800,  801,  800,  800,  765,
      792,  765,  765,  765,  765,  792,  765,  765,  765,  765,
      765,  765,  802,  803,  765,  804,  765,  765,  765,  765,
      765,  765,  765,  792,  765,  765,  765,  765,  792,  765,
      765,  765,  805,  806,  765,  805,  805,  765,  765,  765,
      807,  808,  765,  807,  765,  792,  765,  765,  765,  765,

      792,  765,  765,  765,  199,  765,  792,  765,  765,  199,
      809,  810,  765,  809,  809,  811,  812,  765,  811,  811,
      765,  792,  765,  765,  199,  813,  814,  765,  813,  765,
      792,  765,  765,  199,  765,  792,  765,  765,  199,  765,
      792,  765,  765,  199,  765,  792,  765,  765,  199,  765,
      792,  765,  765,  199,  792,  765,  765,  765,  793,  794,
      793,  793,  793,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  795,  796,  765,
      765,  765,  765,  765,  797,  765,  765,  765,  798,  123,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  799,

      765,  765,  799,  799,  799,  799,  799,  799,  799,  799,
      139,  765,  765,  765,  765,  765,  765,  765,  765,  800,
      801,  800,  800,  800,  765,  765,  765,  802,  803,  802,
      804,  804,  765,  815,  765,  805,  805,  806,  805,  806,
      805,  805,  805,  765,  765,  765,  765,  807,  765,  808,
      807,  792,  807,  807,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  809,
      810,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  811,  812,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  765,  813,  814,

      813,  813,  813,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  816,  765,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  765,  765,  765,  765,
      765,  765,  765,  815,  806,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  817,  818,  819,  820,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  821,  765,  822,  799,  799,  799,  799,  799,

      799,  799,  799,  799,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  817,  765,  818,
      765,  819,  765,  820,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  821,  765,  765,  822,
      765,  799,  765,  799,  799,  799,  799,  799,  799,  799,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  811,  811,  811,  811,  811,  811,  811,

      811,  811,  811,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  799,  799,  799,  799,  799,  799,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  765,  765,  765,  765,  765,  765,  765,  799,  799,
      799,  799,  765,  799,  765,  765,  765,  765,  765,  765,
      809,  809,  809,  809,  809,  811,  811,  811,  811,  811,
      765,  765,  765,  765,  765,  765,  765,  799,  799,  765,
      765,  765,  765,  765,  765,  765,  809,  809,  809,  809,

      811,  811,  811,  811,  765,  765,  765,  765,  765,  799,
      765,  799,  765,  765,  765,  765,  765,  765,  809,  809,
      811,  811,  765,  765,  765,  799,  765,  765,  765,  765,
      765,  809,  811,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  809,  811,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,    0,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,

      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765
    } ;

static yyconst short int yy_nxt[2091] =
    {   0,
      765,   81,   81,   82,   82,   85,   85,   86,   86,   89,
      440,   90,   83,   83,  765,  139,   87,   87,  140,   89,
       91,   90,  313,   93,   93,   94,   94,   98,  332,   99,
       91,   95,   95,  257,   96,   96,  258,   98,  100,   99,
      765,  102,  102,  103,  103,  261,  314,  255,  100,  104,
      104,  262,  105,  105,  263,  102,  102,  107,  107,  327,
      327,  106,  106,  104,  104,  264,  105,  105,  265,  267,
      267,  272,  268,  268,  273,  108,  108,   80,   81,   80,
       82,   80,   80,   80,   80,   80,   80,   80,  109,   83,
      109,  109,   80,   80,   80,   80,   80,   80,   80,   80,

      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,   80,   80,   80,   81,  110,  111,   81,  110,
      111,  112,  424,   81,  112,  111,   83,  764,   81,   83,
      111,   81,  425,   82,   83,  113,  762,  269,  113,   83,
      122,  322,   83,  113,  270,  122,  760,  255,  113,   80,
       81,  114,   82,   80,   80,  115,   80,   80,  115,   80,
       80,   83,  115,  116,  117,   80,   80,   80,   80,  115,
       80,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,

      115,  115,  115,  115,  118,   80,   80,   80,   81,  119,
       82,   80,   80,   80,   80,   80,  120,  121,  120,   83,
      120,   80,  117,  120,   80,  120,   80,   80,   80,   80,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  118,   80,   80,   81,  147,   82,  148,  322,
      299,  275,   80,  299,  122,  255,   83,  149,  276,  122,
       80,   81,  123,  124,   80,   80,  125,  126,   80,  125,
      127,  128,  129,  128,  128,  127,  130,  127,   80,   80,
      131,   80,   80,  128,  128,  132,  128,  133,  128,  128,

      128,  128,  128,  128,  128,  134,  135,  128,  136,  137,
      138,  128,  128,  128,  128,   80,   80,  128,   81,  141,
       82,  366,  366,  301,  142,   81,  302,   82,  147,   83,
      148,  143,  143,   81,   80,   82,   83,  431,  151,  149,
       82,  432,  144,  179,   83,   82,  369,  369,  306,  152,
      151,  307,   82,   81,  180,   82,  145,  153,  181,  154,
      182,  152,  143,   81,   83,   82,  156,  157,  158,  153,
      282,  154,  159,  160,   83,  161,  288,  162,  156,  157,
      158,  313,  283,  311,  159,  160,  312,  161,  164,  162,
      165,  166,  164,  323,  165,  166,  324,  170,  171,  167,

       81,  758,   82,  167,   81,  314,   82,  170,  171,  757,
      174,   83,  175,  284,  174,   83,  175,  291,  291,  284,
      184,  176,  185,  313,  179,  176,   82,  292,  186,  756,
      177,  187,  168,  169,  177,  180,  168,  169,  184,  181,
      185,  182,  257,  755,  172,  258,  186,  314,  172,  187,
       81,  188,   82,  344,   81,  188,   82,  192,  189,  193,
      345,  190,  189,  315,  192,  190,  193,  196,  194,  197,
      196,  339,  197,  255,  201,  194,  202,  753,  198,  340,
      201,  198,  202,  752,  203,  204,  316,  351,  199,  352,
      203,  204,  207,  207,  208,  208,  751,  212,  205,  213,

      317,  325,  325,  209,  209,  212,  750,  213,  214,  326,
      217,  210,  218,  217,  749,  218,  214,  222,  222,  223,
      223,  219,  257,  215,  219,  258,  325,  325,  224,  224,
      227,  220,  228,  227,  326,  228,  225,  231,  231,  232,
      232,  229,  748,  236,  229,  237,  398,  398,  233,  233,
      236,  241,  237,  242,  238,  241,  234,  242,  246,  747,
      247,  238,  243,  246,  333,  247,  243,  334,  239,  248,
      372,  746,  255,  244,  248,  251,  251,  252,  252,  745,
      330,  249,  255,  255,  741,  257,  253,  253,  258,  257,
      337,  255,  258,  341,  254,  290,  291,  342,  257,  740,

      343,  347,  349,  355,  367,  292,  356,  368,  353,  257,
      373,  354,  258,  374,  386,  401,  255,  255,  293,  387,
      294,  269,  388,  257,  255,  255,  258,  402,  270,  295,
      403,  296,  297,  298,  357,  404,  404,  257,  358,  739,
      258,  405,  405,  257,  359,  360,  258,  361,  362,  363,
      364,  275,  365,  375,  406,  406,  257,  376,  276,  258,
      407,  407,  257,  377,  378,  258,  379,  380,  381,  382,
      288,  383,  389,  408,  408,  257,  390,  261,  258,  255,
      738,  282,  391,  392,  411,  393,  394,  395,  396,  276,
      397,  270,  412,  283,  412,  291,  291,  415,  419,  299,

      416,  420,  299,  426,  315,  292,  325,  325,  327,  327,
      427,  327,  327,  284,  326,  330,  337,  255,  255,  341,
      736,  441,  442,  339,  284,  255,  255,  316,  443,  344,
      337,  340,  339,  341,  255,  351,  345,  352,  735,  446,
      340,  317,  447,  445,  366,  366,  369,  369,  372,  456,
      255,  386,  457,  255,  466,  398,  398,  467,  484,  255,
      255,  401,  485,  255,  404,  404,  405,  405,  406,  406,
      407,  407,  408,  408,  476,  477,  478,  479,  490,  441,
      442,  734,  441,  442,  339,  491,  255,  556,  492,  443,
      492,  733,  340,  563,  563,  581,  581,  591,  581,  601,

      581,  539,  541,  732,  543,  545,  563,  563,  556,  558,
      731,  492,  561,  613,  613,  563,  563,  620,  620,  622,
      622,  623,  623,  625,  625,  730,  624,  628,  628,  581,
      581,  632,  632,  634,  625,  637,  628,  591,  581,  641,
      632,  643,  625,  646,  628,  601,  581,  650,  632,  613,
      613,  620,  620,  613,  613,  663,  663,  620,  620,  622,
      622,  623,  623,  625,  625,  729,  624,  628,  628,  668,
      668,  632,  632,  634,  625,  637,  628,  673,  668,  641,
      632,  643,  625,  646,  628,  678,  668,  650,  632,  663,
      663,  690,  690,  663,  663,  691,  691,  693,  693,  668,

      668,  695,  695,  697,  693,  673,  668,  699,  695,  701,
      693,  678,  668,  703,  695,  690,  690,  691,  691,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      710,  709,  300,  710,  709,  709,  709,  709,  709,  709,
      709,  709,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  709,  709,  710,  711,  711,  690,
      690,  691,  691,  693,  693,  695,  695,  718,  718,  697,
      693,  699,  695,  720,  718,  701,  693,  703,  695,  722,
      718,  711,  711,  728,  713,  727,  714,  711,  711,  718,

      718,  720,  718,  722,  718,  737,  737,  715,  726,  716,
      742,  742,  743,  742,  744,  742,  737,  737,  737,  737,
      742,  742,  743,  742,  744,  742,  754,  754,  759,  759,
      754,  754,  761,  761,  759,  759,  763,  763,  761,  761,
      763,  763,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   97,   97,   97,   97,   97,   97,

       97,   97,   97,   97,   97,   97,   97,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  183,  183,

      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,

      221,  221,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  259,  725,  259,  259,  259,  259,  259,

      259,  259,  259,  259,  259,  259,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  278,
      724,  278,  278,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  285,  723,  285,  721,
      719,  285,  289,  289,  717,  289,  692,  289,  300,  712,
      300,  300,  708,  707,  300,  320,  320,  320,  320,  706,
      320,  320,  320,  320,  320,  320,  320,  320,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  328,  705,  704,  328,  328,  328,  328,  702,  328,
      328,  328,  700,  328,  329,  329,  329,  329,  329,  329,

      329,  329,  329,  329,  329,  329,  329,  331,  698,  696,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      336,  694,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  370,  692,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  384,  689,

      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  399,  688,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      444,  687,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  494,  494,  494,  494,  494,  494,  494,
      686,  494,  494,  494,  494,  494,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,

      540,  540,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  560,  560,  560,  560,  560,  560,  560,  560,  560,
      560,  560,  560,  560,  685,  684,  683,  682,  681,  680,
      679,  647,  677,  676,  675,  674,  638,  672,  671,  670,
      669,  629,  667,  666,  665,  664,  662,  661,  660,  659,
      658,  657,  656,  655,  654,  653,  652,  651,  649,  648,
      647,  645,  644,  642,  640,  639,  638,  636,  635,  633,

      631,  630,  629,  627,  626,  621,  619,  618,  617,  616,
      615,  614,  561,  559,  558,  612,  611,  610,  609,  608,
      607,  606,  605,  604,  545,  543,  541,  539,  603,  602,
      600,  599,  598,  597,  596,  595,  594,  593,  592,  590,
      589,  588,  587,  586,  585,  584,  583,  582,  580,  579,
      578,  577,  576,  575,  574,  573,  572,  571,  570,  569,
      568,  567,  566,  565,  564,  562,  561,  559,  558,  490,
      555,  554,  553,  552,  551,  550,  549,  548,  547,  546,
      545,  543,  541,  539,  537,  536,  535,  534,  533,  532,
      531,  530,  529,  528,  527,  526,  525,  524,  523,  522,

      521,  520,  519,  518,  517,  516,  515,  514,  513,  512,
      511,  510,  509,  508,  507,  506,  505,  504,  503,  502,
      501,  500,  499,  498,  497,  496,  495,  493,  489,  488,
      487,  486,  483,  482,  426,  424,  481,  480,  411,  475,
      474,  473,  472,  471,  470,  469,  468,  465,  464,  463,
      462,  461,  460,  459,  458,  455,  454,  453,  452,  451,
      450,  449,  448,  349,  349,  256,  349,  349,  346,  337,
      337,  337,  337,  332,  439,  438,  319,  318,  437,  436,
      435,  434,  433,  430,  429,  428,  423,  422,  421,  418,
      417,  287,  286,  287,  286,  280,  414,  413,  410,  409,

      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      349,  346,  337,  256,  335,  256,  332,  256,  256,  319,
      318,  310,  309,  308,  305,  304,  303,  287,  286,  281,
      280,  277,  274,  271,  256,  256,  266,  256,  256,  256,
      765,   79,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765
    } ;

static yyconst short int yy_chk[2091] =
    {   0,
        0,    1,    2,    1,    2,    3,    4,    3,    4,    5,
      332,    5,    1,    2,    0,   28,    3,    4,   28,    6,
        5,    6,  140,    7,    8,    7,    8,    9,  332,    9,
        6,    7,    8,   83,    7,    8,   83,   10,    9,   10,
        0,   11,   12,   11,   12,   85,  140,   85,   10,   11,
       12,   87,   11,   12,   87,   13,   14,   13,   14,  161,
      161,   11,   12,   13,   14,   91,   13,   14,   91,   96,
      100,  105,   96,  100,  105,   13,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   17,   17,   17,   18,   18,
       18,   17,  301,   19,   18,   19,   17,  762,   20,   18,
       20,   25,  301,   25,   19,   17,  757,  103,   18,   20,
       25,  147,   25,   19,  103,   25,  755,  147,   20,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   26,   31,   26,   31,  321,
      125,  107,   31,  125,   26,  321,   26,   31,  107,   26,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   29,   29,
       29,  203,  203,  129,   29,   33,  129,   33,   32,   29,
       32,   29,   29,   34,   32,   34,   33,  306,   35,   32,
       35,  306,   29,   47,   34,   47,  208,  208,  135,   35,
       36,  135,   36,   41,   47,   41,   29,   35,   47,   35,
       47,   36,   29,   42,   41,   42,   37,   37,   37,   36,
      114,   36,   37,   37,   42,   37,  119,   37,   38,   38,
       38,  312,  114,  139,   38,   38,  139,   38,   39,   38,
       39,   39,   40,  149,   40,   40,  149,   41,   41,   39,

       43,  752,   43,   40,   44,  312,   44,   42,   42,  751,
       45,   43,   45,  114,   46,   44,   46,  124,  124,  119,
       49,   45,   49,  313,   48,   46,   48,  124,   49,  750,
       45,   49,   39,   39,   46,   48,   40,   40,   50,   48,
       50,   48,  152,  749,   43,  152,   50,  313,   44,   50,
       51,   51,   51,  188,   52,   52,   52,   53,   51,   53,
      188,   51,   52,  141,   54,   52,   54,   55,   53,   55,
       56,  184,   56,  184,   57,   54,   57,  747,   55,  184,
       58,   56,   58,  746,   57,   57,  141,  192,   56,  192,
       58,   58,   59,   60,   59,   60,  745,   61,   58,   61,

      141,  157,  157,   59,   60,   62,  741,   62,   61,  157,
       63,   60,   63,   64,  740,   64,   62,   65,   66,   65,
       66,   63,  162,   62,   64,  162,  158,  158,   65,   66,
       67,   64,   67,   68,  158,   68,   66,   69,   70,   69,
       70,   67,  739,   71,   68,   71,  223,  223,   69,   70,
       72,   73,   72,   73,   71,   74,   70,   74,   75,  738,
       75,   72,   73,   76,  167,   76,   74,  167,   72,   75,
      212,  735,  212,   74,   76,   77,   78,   77,   78,  734,
      164,   76,  164,  164,  730,  176,   77,   78,  176,  180,
      186,  164,  180,  186,   78,  123,  123,  187,  190,  729,

      187,  190,  194,  198,  204,  123,  198,  204,  194,  209,
      214,  194,  209,  214,  217,  227,  217,  227,  123,  219,
      123,  269,  219,  224,  164,  164,  224,  229,  269,  123,
      229,  123,  123,  123,  199,  232,  232,  233,  199,  728,
      233,  237,  237,  238,  199,  199,  238,  199,  199,  199,
      199,  275,  199,  215,  242,  242,  243,  215,  275,  243,
      247,  247,  248,  215,  215,  248,  215,  215,  215,  215,
      288,  215,  220,  252,  252,  253,  220,  260,  253,  260,
      727,  282,  220,  220,  270,  220,  220,  220,  220,  276,
      220,  270,  276,  282,  270,  291,  291,  292,  295,  299,

      292,  295,  299,  302,  315,  291,  325,  325,  326,  326,
      302,  327,  327,  288,  325,  329,  337,  329,  329,  337,
      725,  333,  333,  338,  282,  338,  329,  315,  333,  344,
      342,  338,  340,  342,  340,  350,  344,  350,  724,  357,
      340,  315,  357,  340,  366,  366,  369,  369,  371,  375,
      371,  385,  375,  385,  389,  398,  398,  389,  419,  329,
      329,  400,  419,  400,  404,  404,  405,  405,  406,  406,
      407,  407,  408,  408,  409,  409,  410,  410,  424,  441,
      441,  723,  443,  443,  445,  424,  445,  491,  424,  443,
      491,  721,  445,  497,  497,  515,  515,  525,  525,  535,

      535,  539,  541,  719,  539,  541,  549,  549,  556,  558,
      717,  556,  558,  562,  562,  563,  563,  570,  570,  572,
      572,  573,  573,  574,  574,  716,  573,  577,  577,  581,
      581,  582,  582,  584,  584,  587,  587,  591,  591,  592,
      592,  594,  594,  597,  597,  601,  601,  602,  602,  606,
      606,  612,  612,  613,  613,  618,  618,  620,  620,  622,
      622,  623,  623,  625,  625,  715,  623,  628,  628,  630,
      630,  632,  632,  634,  634,  637,  637,  639,  639,  641,
      641,  643,  643,  646,  646,  648,  648,  650,  650,  657,
      657,  662,  662,  663,  663,  664,  664,  666,  666,  668,

      668,  669,  669,  671,  671,  673,  673,  674,  674,  676,
      676,  678,  678,  679,  679,  685,  685,  686,  686,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  688,  688,  690,
      690,  691,  691,  693,  693,  695,  695,  696,  696,  697,
      697,  699,  699,  700,  700,  701,  701,  703,  703,  704,
      704,  707,  707,  714,  691,  713,  691,  711,  711,  718,

      718,  720,  720,  722,  722,  726,  726,  691,  712,  691,
      731,  731,  732,  732,  733,  733,  736,  736,  737,  737,
      742,  742,  743,  743,  744,  744,  748,  748,  753,  753,
      754,  754,  756,  756,  759,  759,  760,  760,  761,  761,
      763,  763,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  767,  767,  767,  767,  767,
      767,  767,  767,  767,  767,  767,  767,  767,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  770,  770,  770,  770,  770,  770,

      770,  770,  770,  770,  770,  770,  770,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  778,  778,

      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  779,  779,  779,  779,  779,  779,  779,  779,  779,
      779,  779,  779,  779,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  781,  781,  781,
      781,  781,  781,  781,  781,  781,  781,  781,  781,  781,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,

      785,  785,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  793,  708,  793,  793,  793,  793,  793,

      793,  793,  793,  793,  793,  793,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  795,
      706,  795,  795,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  797,  705,  797,  702,
      698,  797,  798,  798,  694,  798,  692,  798,  799,  689,
      799,  799,  684,  683,  799,  800,  800,  800,  800,  682,
      800,  800,  800,  800,  800,  800,  800,  800,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  801,  801,  801,
      801,  802,  681,  680,  802,  802,  802,  802,  677,  802,
      802,  802,  675,  802,  803,  803,  803,  803,  803,  803,

      803,  803,  803,  803,  803,  803,  803,  804,  672,  670,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      805,  667,  805,  805,  805,  805,  805,  805,  805,  805,
      805,  805,  805,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  809,  665,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  811,  661,

      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  813,  660,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      815,  659,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  816,  816,  816,  816,  816,  816,  816,
      658,  816,  816,  816,  816,  816,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,

      818,  818,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  656,  655,  654,  653,  652,  651,
      649,  647,  645,  644,  642,  640,  638,  636,  635,  633,
      631,  629,  627,  626,  621,  619,  617,  616,  615,  614,
      611,  610,  609,  608,  607,  605,  604,  603,  600,  599,
      598,  596,  595,  593,  590,  589,  588,  586,  585,  583,

      580,  579,  578,  576,  575,  571,  569,  568,  567,  566,
      565,  564,  560,  559,  557,  555,  554,  553,  552,  551,
      550,  548,  547,  546,  544,  542,  540,  538,  537,  536,
      534,  533,  532,  531,  530,  529,  528,  527,  526,  524,
      523,  522,  521,  520,  519,  518,  517,  516,  514,  513,
      512,  511,  510,  509,  508,  507,  506,  505,  504,  503,
      502,  501,  500,  499,  498,  496,  495,  494,  493,  490,
      489,  488,  487,  486,  485,  484,  483,  482,  481,  480,
      479,  478,  477,  476,  475,  474,  473,  472,  471,  470,
      469,  468,  467,  466,  465,  464,  463,  462,  461,  460,

      459,  458,  457,  456,  455,  454,  453,  452,  451,  450,
      449,  448,  447,  446,  439,  438,  437,  436,  435,  434,
      433,  432,  431,  430,  429,  428,  427,  425,  423,  422,
      421,  420,  418,  417,  416,  415,  414,  413,  411,  397,
      396,  395,  394,  393,  392,  391,  390,  383,  382,  381,
      380,  379,  378,  377,  376,  365,  364,  363,  362,  361,
      360,  359,  358,  354,  353,  352,  351,  348,  345,  343,
      341,  339,  336,  331,  319,  318,  317,  316,  314,  310,
      309,  308,  307,  305,  304,  303,  298,  297,  296,  294,
      293,  287,  286,  284,  283,  279,  277,  274,  265,  264,

      255,  251,  246,  241,  236,  231,  222,  207,  201,  196,
      191,  189,  183,  179,  177,  174,  166,  156,  151,  145,
      144,  138,  137,  136,  134,  133,  132,  118,  116,  113,
      112,  108,  106,  104,  102,   98,   95,   93,   89,   81,
       79,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
yy_lp = yy_full_lp; /* restore orig. accepting pos. */ \
yy_state_ptr = yy_full_state; /* restore orig. state */ \
yy_current_state = *yy_state_ptr; /* restore curr. state */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#define INITIAL 0
/*************************************************************************

    CPP lexer

    The file is derived from the DOC++ source by Roland Wunderling
    and Malte Zoeckler.

 *************************************************************************/

#include "StdAfx.h"

/*
 *	includes
 */
#include <stdio.h>
#include <iostream.h>
#include <assert.h>
#include <ctype.h>

#include "CppTypes.h"


/* -----------------------------------------------------------------
 *
 *	statics
 */
static const char*	inputString ;
static int			inputPosition ;
static int			lastContext ;
static int			lastCContext ;
static int			protection   = GLOB ;
static int			bracketCount = 0 ;
static int			sharpCount   = 0 ;
static Entry*		current_root = 0 ;
static Entry*		global_root  = 0 ;
static Entry*		current      = 0 ;

static int		yyLineNr = 0 ;
static char		yyFileName[264] ;
static McString*	currentString ;

static void setSection( int sec )
{
}

static void msg( const char* str, const char* str2=NULL )
{
    if( verb )
    {
	printf( "%s(%d):\t%s", yyFileName, yyLineNr, str ) ;
	if( str2 ) printf( "%s", str2 ) ;
	printf( "\n" ) ;
    }
}

static void lineCount()
{
  for( const char* c = yytext ; *c ; ++c )
    yyLineNr += (*c == '\n') ;
}


static void addType( Entry* current )
{
    if( current->type.length() > 0 ) current->type += ' ' ;
    current->type += current->name ;
    current->name.clear() ;
    if( current->type.length() > 0 ) current->type += ' ' ;
    current->type += current->args ;
    current->args.clear() ;
}

/* -----------------------------------------------------------------
 */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result = yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
    int c = 0;
    while( c < max_size && inputString[inputPosition] )
    {
	*buf = inputString[inputPosition++] ;
	c++; buf++;
    }
    return c;
}

#define Cxx_Memo 1

#define SubDoc 2

#define SubDocComment 3

#define SubDocCppComment 4

#define Doc 5

#define VerbDoc 6

#define Define 7

#define DefineEnd 8

#define DefineEnded 9

#define ClassName 10

#define Bases 11

#define NextSemi 12

#define FindMembers 13

#define Function 14

#define Operator 15

#define Throws 16

#define Array 17

#define Round 18

#define Curly 19

#define SkipCurly 20

#define SkipInits 21

#define SkipCPP 22

#define Sharp 23

#define Comment 24

#define SkipComment 25

#define SkipCxxComment 26

#define CppDoc 27

#define CppMemo 28

#define See 29

#define Args 30

#define Type 31

#define Author 32

#define Name 33

#define Version 34

#define Param 35

#define Memo 36

#define Return 37

#define Exception 38


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;




	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 766 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 765 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yy_looking_for_trail_begin )
					{
					if ( yy_act == yy_looking_for_trail_begin )
						{
						yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					yy_full_match = yy_cp;
					yy_full_state = yy_state_ptr;
					yy_full_lp = yy_lp;
					break;
					}
				++yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
{ 
                                          yyLineNr= 1 ; int i;
					  for( i = 0 ; yytext[i+1] != 6 ; i++ )
					    yyFileName[i] = yytext[i+1] ;
					  yyFileName[i] = 0 ;
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
{ BEGIN( FindMembers ) ; }
	YY_BREAK
case 3:
YY_RULE_SETUP
{ current->protection = protection = PUBL ;
					  lineCount() ;
					}
	YY_BREAK
case 4:
YY_RULE_SETUP
{ current->protection = protection = PROT ;
					  lineCount() ;
					}
	YY_BREAK
case 5:
YY_RULE_SETUP
{ current->protection = protection = PRIV ;
					  lineCount() ;
					}
	YY_BREAK
case 6:
YY_RULE_SETUP
{
					  current->section = TYPEDEF_SEC ;
					  current->type = "typedef class" ;
					  current->name.clear() ;
					  lineCount() ;
					}
	YY_BREAK
case 7:
YY_RULE_SETUP
{
					  current->section = TYPEDEF_SEC ;
					  current->type = "typedef struct" ;
					  current->name.clear() ;
					  lineCount() ;
					}
	YY_BREAK
case 8:
YY_RULE_SETUP
{
					  current->section = TYPEDEF_SEC ;
					  current->type = "typedef enum" ;
					  current->name.clear() ;
					  lineCount() ;
					}
	YY_BREAK
case 9:
YY_RULE_SETUP
{
					  current->section = TYPEDEF_SEC ;
					  current->type = "typedef union" ;
					  current->name.clear() ;
					  lineCount() ;
					}
	YY_BREAK
case 10:
YY_RULE_SETUP
{ current->section = CLASS_SEC ;
					  addType( current ) ;
					  current->type += " class" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 11:
YY_RULE_SETUP
{ current->section = UNION_SEC ;
					  addType( current ) ;
					  current->type += " struct" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 12:
YY_RULE_SETUP
{ current->section = UNION_SEC ;
					  addType( current ) ;
					  current->type += " enum" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 13:
YY_RULE_SETUP
{ current->section = UNION_SEC ;
					  addType( current ) ;
					  current->type += " union" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 14:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ addType( current ) ;
					  current->name  = yytext ;
					  BEGIN( Operator ) ;
					}
	YY_BREAK
case 15:
YY_RULE_SETUP
{ current->name += yytext ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 16:
YY_RULE_SETUP
{ addType( current ) ;
					  current->name  = yytext ;
					}
	YY_BREAK
case 17:
YY_RULE_SETUP
{ BEGIN( SkipCPP ) ; }
	YY_BREAK
case 18:
YY_RULE_SETUP

	YY_BREAK
case 19:
YY_RULE_SETUP
{ yyLineNr++ ; }
	YY_BREAK
case 20:
YY_RULE_SETUP
{ yyLineNr++ ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 21:
YY_RULE_SETUP
{ current->type = "#define" ;
					  BEGIN( Define ) ;
					}
	YY_BREAK
case 22:
YY_RULE_SETUP
{ current->name = yytext ;
					  BEGIN( DefineEnd ) ;
					}
	YY_BREAK
case 23:
YY_RULE_SETUP
{ BEGIN( DefineEnd ) ; }
	YY_BREAK
case 24:
YY_RULE_SETUP
{ current->args = yytext ;
					  BEGIN( DefineEnded ) ;
					}
	YY_BREAK
case 25:
YY_RULE_SETUP
{ yyLineNr++ ; }
	YY_BREAK
case 26:
YY_RULE_SETUP
{ if( current->done == onlyDocs )
					  {
					    current->section = MACRO_SEC ;
					    current->lineNo = yyLineNr;
					    msg( "found macro    ", current->name ) ;
					    current_root->addSubEntry( current ) ;
					    current = new Entry ;
					    current->protection = protection ;
					  }
					  else
					  {
					    current->name.clear() ;
					    current->type.clear() ;
					  }
					  yyLineNr++ ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 27:
YY_RULE_SETUP
{ current->name += yytext ; }
	YY_BREAK
case 28:
YY_RULE_SETUP
{ BEGIN( FindMembers ) ;
					  current->lineNo = yyLineNr + 1;
					  msg( "found variable ", current->name ) ;
					  if( current->done == onlyDocs )
					  {
					    if( current->section != TYPEDEF_SEC )
						    current->section = VARIABLE_SEC ;
					    current_root->addSubEntry( current ) ;
					    current = new Entry ;
					    current->protection = protection ;
					  }
					  else
					  {
					    current->section = EMPTY_SEC ;
					    current->name.clear() ;
					    current->type.clear() ;
					    current->args.clear() ;
					  }
					  if( *yytext == '=' )
					    BEGIN( NextSemi ) ;
					}
	YY_BREAK
case 29:
YY_RULE_SETUP
{ current->args += yytext ;
					  sharpCount=1;
					  BEGIN( Array ) ;
					}
	YY_BREAK
case 30:
YY_RULE_SETUP
{ current->args += *yytext ;
					  if (--sharpCount<=0)
	                                     BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 31:
YY_RULE_SETUP
{ current->args += *yytext ;
					  sharpCount++;	
					}
	YY_BREAK
case 32:
YY_RULE_SETUP
{ current->args += *yytext ; }
	YY_BREAK
case 33:
YY_RULE_SETUP
{ addType( current ) ;
					  current->type += yytext ;
					  sharpCount=1;
					  BEGIN( Sharp ) ;
					}
	YY_BREAK
case 34:
YY_RULE_SETUP
{ current->type += *yytext ;
					  if (--sharpCount<=0)
	                                     BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 35:
YY_RULE_SETUP
{ current->type += *yytext ;
					  sharpCount++;	
					}
	YY_BREAK
case 36:
YY_RULE_SETUP
{ current->type += *yytext ; }
	YY_BREAK
case 37:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 40:
YY_RULE_SETUP
{ current->program += yytext ;
					  lastContext = Curly ;
					  BEGIN( Comment ) ;
					}
	YY_BREAK
case 41:
YY_RULE_SETUP
{ current->program += yytext ;
					  ++yyLineNr ;
					  lastContext = Curly ;
					  BEGIN( Comment ) ;
					}
	YY_BREAK
case 42:
YY_RULE_SETUP
{ current->program += yytext ;
					  ++bracketCount ;
					}
	YY_BREAK
case 43:
YY_RULE_SETUP
{ if( bracketCount )
					  {
					    current->program += yytext ;
					    --bracketCount ;
					  }
					  else
					  {
					    if( current->done == onlyDocs )
					    {
					      int section = current->section;
					      current_root->addSubEntry( current ) ;
					      current = new Entry ;
					      current->protection = protection ;
					      if( section == CLASS_SEC ) current->protection = GLOB ;
					    }
					    else
					    {
					      current->name.clear() ;
					      current->type.clear() ;
					      current->args.clear() ;
					      current->section = EMPTY_SEC ;
					    }
					    BEGIN( NextSemi ) ;
					  }
					}
	YY_BREAK
case 44:
YY_RULE_SETUP
{ current->program += yytext ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 45:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 46:
YY_RULE_SETUP
{ current->args = yytext ;
					  BEGIN( Round ) ;
					}
	YY_BREAK
case 47:
YY_RULE_SETUP
{ current->args += *yytext ;
					  ++bracketCount ;
					}
	YY_BREAK
case 48:
YY_RULE_SETUP
{ current->args += *yytext ;
					  if( bracketCount )
					    --bracketCount ;
					  else
					    BEGIN( Function ) ;
					}
	YY_BREAK
case 49:
YY_RULE_SETUP
{ lineCount() ; current->args += ", " ; }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ lineCount() ; current->args += ' ' ; }
	YY_BREAK
case 51:
YY_RULE_SETUP
{ current->args += *yytext ; }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ current->args += " const " ;
					 	 lineCount() ;
						}
	YY_BREAK
case 53:
YY_RULE_SETUP
{ current->args += " throw(" ;
						  lineCount() ;
					  	BEGIN( Round ) ;
						}
	YY_BREAK
case 54:
YY_RULE_SETUP
{ current->type += current->name ;
					  current->name  = current->args ;
					  current->args  = yytext ;
					  BEGIN( Round ) ;
					}
	YY_BREAK
case 55:
YY_RULE_SETUP
{ msg( "found method   ", current->name ) ;
				        current->lineNo = yyLineNr;
					  if( current->done == onlyDocs )
					  {
					    current->section = FUNCTION_SEC ;
					    current_root->addSubEntry(current);
					    current = new Entry ;
					    current->protection = protection ;
					  }
					  else
					  {
					    current->name.clear() ;
					    current->type.clear() ;
					    current->args.clear() ;
					  }
					  if( *yytext == '{' )
					      BEGIN( SkipCurly ) ;
					  else if( *yytext == ':' )
					      BEGIN( SkipInits ) ;
					  else
					      BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 56:
YY_RULE_SETUP
{ BEGIN( SkipCurly ) ; }
	YY_BREAK
case 57:
YY_RULE_SETUP
{ ++bracketCount ; }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ if( bracketCount )
					    --bracketCount ;
					  else
					    BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 59:
YY_RULE_SETUP
{ if( current->done == onlyDocs )
					  {
					    current->section = VARIABLE_SEC ;
					    current_root->addSubEntry(current);
					    current = new Entry ;
					    current->protection = protection ;
					  }
					  else
					  {
					    current->section = EMPTY_SEC ;
					    current->type.clear() ;
					    current->name.clear() ;
					    current->args.clear() ;
					  }
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 60:
YY_RULE_SETUP
{ current->type += ' ' ;
						  current->type += current->name ;
					  	  current->name = yytext ;
						}
	YY_BREAK
case 61:
YY_RULE_SETUP
{ current->args = ":" ;
					  BEGIN( Bases ) ;
					}
	YY_BREAK
case 62:
YY_RULE_SETUP
{ current->file = yyFileName ;
					  	  current->startLine = yyLineNr ;
						  current->lineNo = yyLineNr;
					  	  msg( "found class    ", current->name ) ;
					  	  BEGIN( Curly ) ;
						}
	YY_BREAK
case 63:
YY_RULE_SETUP
{ current->extends.append( new McString(yytext) ) ;
					  current->args += ' ' ;
					  current->args += yytext ;
					}
	YY_BREAK
case 64:
YY_RULE_SETUP
{ current->args += ',' ; }
	YY_BREAK
case 65:
YY_RULE_SETUP
{ current->program += yytext ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 66:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 67:
YY_RULE_SETUP
{ current->program += yytext ;
					  BEGIN( Curly ) ;
					}
	YY_BREAK
case 68:
YY_RULE_SETUP
{ lineCount() ;
							  if( current->doc.length() > 0
							  ||  current->memo.length() > 0 )
							  {
							      msg( "found explicit entry" ) ;
					                  current->lineNo = yyLineNr;
							      current_root->addSubEntry( current ) ;
							      current = new Entry ;
							  }
							  current->done = onlyDocs ;
							  BEGIN( Cxx_Memo ) ;
							}
	YY_BREAK
case 69:
YY_RULE_SETUP
{ current->memo += yytext ; }
	YY_BREAK
case 70:
YY_RULE_SETUP
{ yyLineNr++ ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 71:
YY_RULE_SETUP

	YY_BREAK
case 72:
YY_RULE_SETUP
{ lastCContext = YY_START ;
					  BEGIN( SkipComment ) ;
					}
	YY_BREAK
case 73:
YY_RULE_SETUP
{ lineCount() ;
						  if( current->doc.length() > 0
						  ||  current->memo.length() > 0 )
						  {
						      msg( "found explicit entry" ) ;
					            current->lineNo = yyLineNr;
						      current_root->addSubEntry( current ) ;
						      current = new Entry ;
						  }
						  current->done = onlyDocs ;
						  BEGIN( Doc ) ;
						}
	YY_BREAK
case 74:
YY_RULE_SETUP
{ BEGIN( FindMembers ) ; }
	YY_BREAK
case 75:
YY_RULE_SETUP
{ current->doc += yytext ;
					  BEGIN( VerbDoc ) ;
					}
	YY_BREAK
case 76:
YY_RULE_SETUP
{ current->doc += '\n' ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 77:
YY_RULE_SETUP
{ current->doc += yytext ;
					  BEGIN( Doc ) ;
					}
	YY_BREAK
case 78:
YY_RULE_SETUP
{ current->doc += '\n' ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 79:
YY_RULE_SETUP
{ current->doc += *yytext ; }
	YY_BREAK
case 80:
YY_RULE_SETUP
{ current->doc += yytext ; }
	YY_BREAK
case 81:
YY_RULE_SETUP
{ current->doc += yytext ; }
	YY_BREAK
case 82:
YY_RULE_SETUP
{ BEGIN( FindMembers ) ; }
	YY_BREAK
case 83:
YY_RULE_SETUP
{ lineCount() ;
								  current->file = yyFileName ;
								  current->startLine = yyLineNr ;
								  BEGIN( SubDoc ) ;
								}
	YY_BREAK
case 84:
YY_RULE_SETUP
{ current->program += yytext ;
					  BEGIN( SubDocComment ) ;
					}
	YY_BREAK
case 85:
YY_RULE_SETUP
{ current->program += yytext ;
					  BEGIN( SubDocCppComment ) ;
					}
	YY_BREAK
case 86:
YY_RULE_SETUP
{ current->program += *yytext ; }
	YY_BREAK
case 87:
YY_RULE_SETUP
{ current->program += *yytext ;
					  ++yyLineNr ;
					}
	YY_BREAK
case 88:
YY_RULE_SETUP
{ lineCount() ;
							  current->program += yytext ;
							  ++bracketCount ;
							}
	YY_BREAK
case 89:
YY_RULE_SETUP
{ lineCount() ;
							  if( bracketCount )
							  {
							    current->program += yytext ;
							    --bracketCount ;
							  }
							  else
							  {
							    msg( "found explicit subentry" ) ;
					                current->lineNo = yyLineNr;
							    current_root->addSubEntry( current ) ;
							    current = new Entry ;
							    current->protection = protection ;
							    BEGIN( FindMembers ) ;
							  }
							}
	YY_BREAK
case 90:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 91:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 92:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 93:
YY_RULE_SETUP
{ current->program += yytext ;
					  ++yyLineNr ;
					}
	YY_BREAK
case 94:
YY_RULE_SETUP
{ current->program += yytext ;
					  BEGIN( SubDoc ) ;
					}
	YY_BREAK
case 95:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 96:
YY_RULE_SETUP
{ current->program += yytext ;
					  ++yyLineNr ;
					  BEGIN( SubDoc ) ;
					}
	YY_BREAK
case 97:
YY_RULE_SETUP
{ current->memo += yytext ;
					  current->doc  += yytext ; }
	YY_BREAK
case 98:
YY_RULE_SETUP
{ BEGIN( CppDoc ) ;
					  current->doc  += yytext ; }
	YY_BREAK
case 99:
YY_RULE_SETUP
{ current->doc  += *yytext ; }
	YY_BREAK
case 100:
YY_RULE_SETUP
{ current->memo += yytext ; }
	YY_BREAK
case 101:
YY_RULE_SETUP
{ current->doc  += yytext ; }
	YY_BREAK
case 102:
YY_RULE_SETUP
{
					  current->see.append( new McString ) ;
					  BEGIN( See ) ;
					}
	YY_BREAK
case 103:
YY_RULE_SETUP
{
					  BEGIN( Author ) ; }
	YY_BREAK
case 104:
YY_RULE_SETUP
{
					  BEGIN( Version ) ; }
	YY_BREAK
case 105:
YY_RULE_SETUP
{
					  current->param.append( new McString  ) ;
					  BEGIN( Param ) ;
					}
	YY_BREAK
case 106:
YY_RULE_SETUP
{
					  current->exception.append( new McString ) ;
					  BEGIN( Exception ) ;
					}
	YY_BREAK
case 107:
YY_RULE_SETUP
{
					  BEGIN( Return ) ; }
	YY_BREAK
case 108:
YY_RULE_SETUP
{
					  current->name.clear() ;
					  current->section = MANUAL_SEC ;
					  BEGIN( Name ) ;
					}
	YY_BREAK
case 109:
YY_RULE_SETUP
{
					  current->memo.clear() ;
					  BEGIN( Memo ) ;
					}
	YY_BREAK
case 110:
YY_RULE_SETUP
{
					  current->type.clear() ;
					  BEGIN( Type ) ;
					}
	YY_BREAK
case 111:
YY_RULE_SETUP
{
					  current->args.clear() ;
					  BEGIN( Args ) ;
					}
	YY_BREAK
case 112:
YY_RULE_SETUP
{ current->name = yytext ; }
	YY_BREAK
case 113:
YY_RULE_SETUP
{ BEGIN( CppDoc ) ; }
	YY_BREAK
case 114:
YY_RULE_SETUP
{ current->type = yytext ; }
	YY_BREAK
case 115:
YY_RULE_SETUP
{ BEGIN( CppDoc ) ; }
	YY_BREAK
case 116:
YY_RULE_SETUP
{ current->args = yytext ; }
	YY_BREAK
case 117:
YY_RULE_SETUP
{ BEGIN( CppDoc ) ; }
	YY_BREAK
case 118:
YY_RULE_SETUP
{ current->author  += *yytext ; }
	YY_BREAK
case 119:
YY_RULE_SETUP
{ current->version += *yytext ; }
	YY_BREAK
case 120:
YY_RULE_SETUP
{ *(current->see.last())       += *yytext ; }
	YY_BREAK
case 121:
YY_RULE_SETUP
{ *(current->param.last())     += *yytext ; }
	YY_BREAK
case 122:
YY_RULE_SETUP
{ *(current->exception.last()) += *yytext ; }
	YY_BREAK
case 123:
YY_RULE_SETUP
{ current->memo    += *yytext ; }
	YY_BREAK
case 124:
YY_RULE_SETUP
{ current->retrn   += *yytext ; }
	YY_BREAK
case 125:
YY_RULE_SETUP
{ current->author  += '\n' ; }
	YY_BREAK
case 126:
YY_RULE_SETUP
{ current->version += '\n' ; }
	YY_BREAK
case 127:
YY_RULE_SETUP
{ *(current->see.last())       += '\n' ; }
	YY_BREAK
case 128:
YY_RULE_SETUP
{ *(current->param.last())     += '\n' ; }
	YY_BREAK
case 129:
YY_RULE_SETUP
{ *(current->exception.last()) += '\n' ; }
	YY_BREAK
case 130:
YY_RULE_SETUP
{ current->memo    += *yytext ; }
	YY_BREAK
case 131:
YY_RULE_SETUP
{ current->retrn   += *yytext ; }
	YY_BREAK
case 132:
YY_RULE_SETUP

	YY_BREAK
case 133:
YY_RULE_SETUP
{ yyLineNr++ ; }
	YY_BREAK
case 134:
YY_RULE_SETUP
{ lastCContext = YY_START ;
					  BEGIN( SkipComment ) ;
					}
	YY_BREAK
case 135:
YY_RULE_SETUP

	YY_BREAK
case 136:
YY_RULE_SETUP
{ BEGIN( lastCContext ) ; }
	YY_BREAK
case 137:
YY_RULE_SETUP
{ lastCContext = YY_START ;
					  BEGIN( SkipCxxComment ) ;
					}
	YY_BREAK
case 138:
YY_RULE_SETUP
{ yyLineNr++ ;
					  BEGIN( lastCContext ) ;
					}
	YY_BREAK
case 139:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Cxx_Memo):
			case YY_STATE_EOF(SubDoc):
			case YY_STATE_EOF(SubDocComment):
			case YY_STATE_EOF(SubDocCppComment):
			case YY_STATE_EOF(Doc):
			case YY_STATE_EOF(VerbDoc):
			case YY_STATE_EOF(Define):
			case YY_STATE_EOF(DefineEnd):
			case YY_STATE_EOF(DefineEnded):
			case YY_STATE_EOF(ClassName):
			case YY_STATE_EOF(Bases):
			case YY_STATE_EOF(NextSemi):
			case YY_STATE_EOF(FindMembers):
			case YY_STATE_EOF(Function):
			case YY_STATE_EOF(Operator):
			case YY_STATE_EOF(Throws):
			case YY_STATE_EOF(Array):
			case YY_STATE_EOF(Round):
			case YY_STATE_EOF(Curly):
			case YY_STATE_EOF(SkipCurly):
			case YY_STATE_EOF(SkipInits):
			case YY_STATE_EOF(SkipCPP):
			case YY_STATE_EOF(Sharp):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(SkipComment):
			case YY_STATE_EOF(SkipCxxComment):
			case YY_STATE_EOF(CppDoc):
			case YY_STATE_EOF(CppMemo):
			case YY_STATE_EOF(See):
			case YY_STATE_EOF(Args):
			case YY_STATE_EOF(Type):
			case YY_STATE_EOF(Author):
			case YY_STATE_EOF(Name):
			case YY_STATE_EOF(Version):
			case YY_STATE_EOF(Param):
			case YY_STATE_EOF(Memo):
			case YY_STATE_EOF(Return):
			case YY_STATE_EOF(Exception):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 766 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 766 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 765);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif



/*@ ----------------------------------------------------------------------------
 */
void parseDoc(Entry* rt)
{
    if( rt->doc.length() )
    {
	Entry* _current = current ;
	rt->program = rt->doc ;
	rt->doc.clear() ;
	inputString   = rt->program ;
	inputPosition = 0 ;
	current = rt ;
	cpprestart( cppin ) ;
	if( rt->memo.length() )
	    BEGIN( CppDoc ) ;
	else
	    BEGIN( CppMemo ) ;
	cpplex() ;
	rt->program.clear() ;
	if( rt->memo.length()+2 >= rt->doc.length() )
	    rt->doc.clear() ;
	current = _current ;
    }
}

void callcpplex()
{
    cpplex() ;
    if( (current->name.length()  ||  current->program.length()  ||
	 current->memo.length()  ||  current->doc.length() )
    &&  current->done == onlyDocs )
    {
	if( current->section == EMPTY_SEC )
	    current->section = VARIABLE_SEC ;
	current_root->addSubEntry( current ) ;
	current = new Entry ;
	current->protection = protection ;
    }
}

void parseCppClasses(Entry* rt)
{
    if( rt == 0 )
	return ;
    for( Entry *cr = rt->sub ; cr ; cr = cr->next )
    {
	if( cr->program.length() > 0 )
	{
	    if (verb)
		printf("Scanning substuff of (%s) %s\n",
		       (const char *)cr->type,
		       (const char *)cr->name);
	    inputString   = cr->program ;
	    inputPosition = 0 ;
	    cpprestart( cppin ) ;
	    BEGIN( FindMembers ) ;
	    current_root = cr ;
	    strcpy( yyFileName, cr->file ) ;
	    yyLineNr = cr->startLine ;
	    current->type.clear() ;
	    current->name.clear() ;
	    current->args.clear() ;
	    current->section = EMPTY_SEC ;
	    if( cr->section == CLASS_SEC )
		current->protection = protection = PRIV ;
	    else
		current->protection = protection = GLOB ;
	    callcpplex() ;
	    cr->program.clear() ;
	}
	parseCppClasses( cr ) ;
    }
    parseDoc( rt ) ;
}

void parseCpp(Entry* rt)
{
    assert(rt) ;

    current_root  = rt ;
    global_root   = rt ;
    protection    = PUBL ;
    current       = new Entry ;
    yyLineNr      = 0;
    yyFileName[0] = '\0';

    inputString   = rt->program ;
    inputPosition = 0 ;
    cpprestart( cppin ) ;
    BEGIN( FindMembers ) ;
    callcpplex() ;
    rt->program.clear() ;
    parseCppClasses( rt ) ;

    delete current;
}

extern "C" {
	int	cppwrap()	{ return 1 ; }
};
