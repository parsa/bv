#define yy_create_buffer cpp_create_buffer
#define yy_delete_buffer cpp_delete_buffer
#define yy_scan_buffer cpp_scan_buffer
#define yy_scan_string cpp_scan_string
#define yy_scan_bytes cpp_scan_bytes
#define yy_flex_debug cpp_flex_debug
#define yy_init_buffer cpp_init_buffer
#define yy_flush_buffer cpp_flush_buffer
#define yy_load_buffer_state cpp_load_buffer_state
#define yy_switch_to_buffer cpp_switch_to_buffer
#define yyin cppin
#define yyleng cppleng
#define yylex cpplex
#define yyout cppout
#define yyrestart cpprestart
#define yytext cpptext
#define yywrap cppwrap

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

typedef int FILE; //#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplusx
#define __cplusplusx
#endif
#endif


#ifdef __cplusplus

//#include <stdlib.h>
//#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
//#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 153
#define YY_END_OF_BUFFER 154
static yyconst short int yy_accept[759] =
    {   0,
        0,    0,   93,   93,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   25,   25,
        0,    0,    0,    0,    0,    0,   53,   53,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  129,  129,  127,  127,    0,    0,  125,  125,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      154,  145,  146,  145,   93,   94,   93,  106,  105,  104,
      106,  106,  106,  102,  106,   37,   38,   42,  145,  145,

      145,   80,   81,   79,   82,   22,   89,   90,  145,   83,
       84,  145,    1,    3,  145,  146,  145,   43,   61,   44,
       27,  145,   49,   45,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   23,  145,   28,  145,   69,   70,
      145,  145,   25,   25,   25,   48,   48,   47,   46,   66,
       65,   65,   62,   63,   64,   66,   53,   59,   60,   60,
       57,   58,  145,   74,   75,  145,   77,   78,   72,   71,
       31,  145,  145,  145,  145,  145,   52,   52,   51,   50,
       87,   86,   87,   87,  145,  145,  145,  145,  146,  145,
      112,  112,  112,  112,  110,  110,  111,  110,  110,  133,

      140,  133,  133,  129,  130,  129,  129,  127,  128,  127,
      127,  131,  138,  131,  131,  125,  126,  125,  132,  139,
      132,  132,  134,  141,  134,  134,  136,  143,  136,  136,
      137,  144,  137,  137,  135,  142,  135,  135,  147,  151,
       93,   93,   93,  105,  105,  109,  108,  107,    0,    0,
        0,    0,   37,    0,   39,   40,    0,    0,   81,   82,
       80,   81,   22,   89,   90,    0,   83,    0,    2,    0,
        0,   61,    0,    0,    0,    0,   43,   61,   27,  147,
      151,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,    0,   28,    0,    0,    0,    0,

        0,    0,    0,    0,   25,   25,   25,   65,   63,   64,
       64,   53,    0,   55,   56,  151,    0,   73,    0,   76,
       29,    0,   30,   33,    0,    0,    0,    0,    0,    0,
       88,  147,   85,    0,  150,  148,  149,    0,  152,  147,
      151,  114,  114,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  111,  113,  113,  140,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      138,  125,  125,  125,  139,  141,  143,  144,  142,  105,
      100,    0,    0,   41,    0,    0,    0,    0,   99,    0,

        0,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,    0,    0,    0,    0,
       56,    0,   54,   29,   33,    0,   34,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,    0,    0,    0,
       91,   92,   99,   98,   97,    0,   95,    0,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  115,    0,

        0,  129,  129,  129,  129,  129,  129,  129,  115,  129,
      129,  127,  127,  127,  127,  127,  127,  127,  115,  127,
      127,    0,    0,   91,   92,    0,    0,   96,    0,   27,
       27,   27,   16,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,    0,   32,   67,    0,    0,    0,
        0,  124,    0,    0,  122,  121,    0,    0,  115,  123,
        0,  124,  129,  129,  122,  121,  129,  129,  115,  123,
      129,  124,  127,  127,  122,  121,  127,  127,  115,  123,
      127,    0,    0,   27,   27,   14,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   17,    0,    0,   67,    0,

       68,   35,   34,    0,  124,    0,    0,  122,  121,  118,
        0,  123,    0,  124,  129,  129,  122,  121,  118,  129,
      123,  129,  124,  127,  127,  122,  121,  118,  127,  123,
      127,    0,    0,   27,   27,    0,    0,   26,   27,   27,
       27,   27,   27,    4,   15,   27,    0,    0,   20,    0,
      116,    0,  118,  120,    0,  116,  129,  118,  120,  129,
      116,  127,  118,  120,  127,    0,    0,   27,   27,   18,
       26,   27,   27,   27,    6,   27,    0,   36,  116,    0,
      120,  117,  116,  129,  120,  117,  116,  127,  120,  117,
        0,    0,   27,   27,   27,   27,   19,   19,   27,    0,

        0,    0,    0,    0,  117,  129,  117,  127,  117,    0,
        0,   27,   27,   13,   21,    5,    0,    0,    0,    0,
      119,  119,  119,    0,    0,   27,   24,    0,    0,    0,
        0,  119,  119,  119,    0,    0,   27,    0,    0,    0,
        0,    0,    0,    0,   10,   11,    0,    0,    0,  103,
        7,    0,   12,    0,    8,    9,  101,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    7,    1,    8,
        9,   10,    1,   11,    1,   12,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,   16,   17,
       18,   19,    1,   20,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       21,   22,   23,    1,   24,    1,   25,   26,   27,   28,

       29,   30,   31,   32,   33,   14,   14,   34,   35,   36,
       37,   38,   14,   39,   40,   41,   42,   43,   44,   45,
       46,   14,   47,    1,   48,   49,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[50] =
    {   0,
        1,    2,    3,    4,    5,    1,    6,    7,    1,    8,
        1,    9,    5,   10,   11,    1,   12,    1,   12,    1,
        6,    1,    6,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,    5,    5,   13
    } ;

static yyconst short int yy_base[811] =
    {   0,
        0,    1,    2,    3,    7,   15,   20,   21,   43,    0,
       19,   91,   92,   93,  115,    0,  164,    0,  213,    0,
      262,    0,  309,  310,  357,    6,  405,  451,   94,   95,
       23,   97,  314,  315,  337,  420,  414,  432,  435,  438,
      460,  486,  423,  468,  321,  329,   98,  494,  499,  500,
      447,  498,  517,  518,  316,  341,  412,  521,  523,  526,
      431,  529,  474,  530,  501,  534,  542,  545,  548,  549,
      550,  553,  554,  556,  557,  561,  565,  569,  572,  574,
     2092, 2093, 2093,   25,    0, 2093,   99, 2093,  345, 2093,
     2078,  320, 2064,  445, 2060,    0, 2093, 2093, 2079,   36,

      569,    0, 2085, 2093, 2093,    0,    0,  398,  409,    0,
     2093, 2081, 2093, 2093,  588,  595,  602,  342,  472, 2093,
        0,  480, 2093, 2093, 2061, 2050,  413, 2047, 2057, 2043,
      467, 2039, 2033,  376, 2093,  615,  584,  593, 2093, 2093,
     2041, 2045,    0,    0,  570, 2093,  601, 2093, 2093, 2093,
      622,  633, 2093, 2093,  636,  617,    0, 2093, 2071,  619,
     2093, 2093, 2070, 2093, 2093, 2069, 2093, 2093, 2093, 2093,
     2093,  633,  645,  640,  538,  612, 2093,  641, 2093, 2093,
     2063, 2093,  642,  646, 2067, 2058,  647, 2067, 2093,  655,
     2093, 2093,  651,  644, 2093, 2093,  668,  653,    0, 2093,

      672,  668,    0,    0, 2093,  676,  665,    0, 2093,  678,
      684, 2093,  693,  689,    0,    0, 2093,  697, 2093,  712,
      708,    0, 2093,  726,  721,    0, 2093,  733,  728,    0,
     2093,  740,  735,    0, 2093,  747,  742,    0, 2093, 2093,
        0,    0,    0,  730,  744, 2093, 2093, 2093, 2040,  737,
      743, 2032,    0, 2058, 2093, 2093, 2063,  756, 2063, 2093,
        0, 2062,    0,    0,  494,  620,    0, 2058, 2093,  757,
      760,  772,  756,  775,  778,  774,  782,  791,    0, 2052,
     2048,  771, 2035, 2017, 2017, 2016, 2021, 2026,  764, 2028,
     2014, 2014, 2018, 2017,  802,  783,  770, 2020, 2014,  798,

     2010, 2014, 2009, 2005,    0,    0,    0,  815, 2093,  818,
      825,    0, 2038, 2093, 2032, 2038, 2035, 2093, 2034, 2093,
        0,  828, 2093,    0,  807,  804, 2002, 2007, 2026,  825,
     2025,  830, 2024, 2028, 2093, 2093, 2093, 2029, 2093, 2028,
     2027, 2093, 2093,  802, 1984, 1999, 2002, 2001, 1996, 1995,
     1977, 1993,  843, 2093, 2093,  846,    0,    0,    0,  812,
     1976, 1991, 1994, 1993, 1988, 1987, 1969, 1985,    0,    0,
        0,  813, 1968, 1983, 1986, 1985, 1980, 1979, 1961, 1977,
      854,    0,    0,    0,  857,  860,  863,  866,  869, 2003,
     2093, 1973, 1975, 2093,  864, 1992, 1988, 1987,  874, 1996,

     1985, 1956, 1967, 1955, 1959, 1964, 1963, 1962, 1951, 1946,
     1947, 1953, 1944, 1956, 1947, 1947, 1952,  560, 1941, 1943,
     1969, 1975, 2093,    0,    0, 1949,  806, 1945, 1934, 1947,
     1938, 1937, 1932, 1929, 1940, 1930, 1928, 1935, 1924, 1937,
     1928, 1927, 1922, 1919, 1930, 1920, 1918, 1925, 1914, 1927,
     1918, 1917, 1912, 1909, 1920, 1910, 1908, 1913, 1898, 1931,
      873,  877,    5,  870, 2093, 1940, 2093,  878, 1901, 1914,
     1900,  890, 1900, 1899, 1897, 1911, 1910, 1905, 1900, 1905,
     1903, 1894, 1898, 1895, 1897, 1897, 1884, 1880, 1890, 1893,
     1893, 1880, 1887, 1889, 1880, 1887, 1890, 1872,  893, 1884,

     1872, 1871, 1878, 1880, 1871, 1878, 1881, 1863,  896, 1875,
     1863, 1862, 1869, 1871, 1862, 1869, 1872, 1854,  899, 1866,
     1854, 1857, 1849, 1889, 1888,  872, 1886, 2093,  901, 1849,
     1853,  903,  906, 1850, 1855, 1846, 1842, 1841, 1854, 1853,
     1838, 1848,  909,  913, 1837, 2093,  916,  919, 1842, 1841,
     1841,  922, 1832, 1830,  926, 1850, 1813, 1808,  929,  932,
     1813,  935, 1808, 1806,  938, 1841, 1805, 1797,  941,  944,
     1802,  947, 1797, 1795,  950, 1791, 1745, 1702,  953,  956,
     1695, 1668, 1660, 1643, 1623,  959, 1648, 1612, 1601, 1587,
     1586, 1566, 1578,  962, 1559,  965,  968, 1555,  971,  974,

     2093, 2093, 2093, 1552,  977, 1540, 1536,  983, 1572,  986,
     1536,  989, 1507,  992, 1215, 1212,  995, 1250,  998, 1215,
     1001, 1213, 1004, 1209, 1206, 1007, 1244, 1010, 1209, 1013,
     1207, 1200, 1203, 1215, 1201, 1016, 1236, 1235, 1209, 1208,
     1194, 1217, 1202,    0, 1019, 1022,  695, 1025,  820, 1228,
     1031, 1196, 1034, 1040, 1192, 1043, 1194, 1046, 1049, 1190,
     1052, 1192, 1055, 1058, 1188, 1194, 1196, 1179, 1191, 2093,
     1217, 1189, 1188, 1062,    0, 1188, 1110, 1213, 1113, 1177,
     1116, 1119, 1122, 1176, 1125, 1128, 1131, 1114, 1138, 1141,
     1110, 1113, 1095, 1013, 1144, 1151, 2093,    0, 1024,  997,

      994,  942,  853,  852, 1154,  817, 1157,  780, 1160,  788,
      766,  773,  782, 1163, 1166,    0,  742,  691,  687,  684,
     1169, 1172, 1175,  687,  660,  464, 2093,  652,  642,  620,
      572, 1178, 1181, 1184,  566,  567,  564,  539, 1187,  498,
      406,  397,  362, 1190, 1193, 2093,  312, 1196,  296, 2093,
     1199, 1202, 1205,  268, 1208, 2093, 2093, 2093, 1255, 1268,
     1281, 1294, 1307, 1320, 1333, 1346, 1359, 1372, 1385, 1398,
     1411, 1424, 1437, 1450, 1463, 1476, 1489, 1502, 1515, 1528,
     1541, 1546, 1557, 1565, 1570, 1575, 1578, 1590, 1595, 1608,
     1621, 1634, 1647, 1660, 1673, 1686, 1699, 1712, 1725, 1738,

     1751, 1764, 1777, 1790, 1803, 1816, 1828, 1840, 1853, 1865
    } ;

static yyconst short int yy_def[811] =
    {   0,
      759,  759,  760,  760,  761,  761,  761,  761,  758,    9,
      759,  759,  759,  759,  758,   15,  758,   17,  758,   19,
      758,   21,  759,  759,  758,   25,  759,  759,  762,  762,
      759,  759,  763,  763,  764,  764,  765,  765,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  766,  766,
      767,  767,  759,  759,  768,  768,  769,  769,  770,  770,
      771,  771,  772,  772,  773,  773,  774,  774,  775,  775,
      776,  776,  777,  777,  778,  778,  779,  779,  780,  780,
      758,  758,  758,  758,  781,  758,  781,  758,  758,  758,
      758,  758,  758,  758,  758,  782,  758,  758,  783,  758,

      758,  784,  758,  758,  758,  785,  786,  758,  758,  787,
      758,  788,  758,  758,  758,  758,  758,  758,  758,  758,
      789,  758,  758,  758,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  758,  758,  758,  758,  758,  758,
      758,  758,  790,  790,  790,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  791,  758,  792,  758,
      758,  758,  793,  758,  758,  794,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      795,  758,  795,  795,  796,  758,  758,  797,  758,  797,
      758,  758,  758,  758,  758,  758,  758,  758,  194,  758,

      758,  758,  194,  798,  758,  798,  798,  799,  758,  799,
      799,  758,  758,  758,  194,  800,  758,  800,  758,  758,
      758,  194,  758,  758,  758,  194,  758,  758,  758,  194,
      758,  758,  758,  194,  758,  758,  758,  194,  758,  758,
      781,  781,  781,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  782,  783,  758,  758,  758,  758,  758,  758,
      784,  758,  785,  786,  758,  758,  787,  788,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  789,  758,
      801,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  758,  758,  758,  758,  758,  758,

      758,  758,  758,  758,  790,  790,  790,  758,  758,  758,
      758,  791,  792,  758,  758,  802,  793,  758,  794,  758,
      803,  758,  758,  804,  758,  758,  758,  758,  795,  795,
      795,  795,  795,  796,  758,  758,  758,  797,  758,  797,
      797,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      758,  800,  800,  800,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  801,  801,  758,  805,

      758,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  758,  758,  758,  758,
      758,  802,  758,  803,  804,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  758,  758,  801,
      758,  758,  758,  758,  758,  805,  758,  806,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,

      758,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  758,  758,  758,  758,  758,  806,  758,  806,  789,
      789,  789,  758,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  758,  758,  789,  789,  807,  808,  789,  789,  789,
      789,  789,  789,  789,  789,  758,  809,  758,  758,  758,

      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  758,  758,  789,  789,  807,  810,  808,  789,  789,
      789,  789,  789,  789,  807,  789,  809,  809,  809,  758,
      758,  758,  758,  758,  758,  798,  798,  798,  798,  798,
      799,  799,  799,  799,  799,  758,  758,  789,  789,  758,
      810,  789,  789,  758,  789,  789,  758,  758,  758,  758,
      758,  758,  798,  798,  798,  798,  799,  799,  799,  799,
      758,  758,  789,  789,  789,  789,  758,  789,  789,  758,

      758,  758,  758,  758,  758,  798,  798,  799,  799,  758,
      758,  789,  789,  758,  758,  789,  758,  758,  758,  758,
      758,  798,  799,  758,  758,  789,  758,  758,  758,  758,
      758,  758,  798,  799,  758,  758,  789,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,    0,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,

      758,  758,  758,  758,  758,  758,  758,  758,  758,  758
    } ;

static yyconst short int yy_nxt[2143] =
    {   0,
      758,  758,   83,   83,   86,   86,  463,  136,  463,   89,
       90,  137,   84,   84,   87,   87,   91,   89,   90,   92,
       97,   98,   94,   94,   91,   83,   99,   92,   93,   91,
       91,   84,   92,   92,  239,   84,   93,  240,  256,  257,
      100,   95,   95,   82,   82,   83,   82,   82,   82,   82,
       82,   82,   82,   82,   96,   84,   96,   96,   82,   82,
       82,   82,   82,   82,   82,   82,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   82,
       82,   82,   97,   98,   98,   98,  144,  144,   99,   83,

       83,   82,   82,   84,   84,   84,  145,  145,  242,   84,
      174,  243,  100,  100,  100,   82,  101,   83,   82,   82,
       82,  102,   82,   82,  102,   82,   82,   84,  102,  103,
      104,   82,   82,   82,   82,  102,   82,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  105,   82,   82,   82,   82,   83,   82,   82,   82,
      106,   82,   82,  106,   82,   82,   84,  106,   82,   82,
       82,   82,   82,   82,  106,   82,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,

      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
       82,   82,   82,   82,   82,   83,   82,   82,   82,  107,
       82,   82,  107,  108,   82,   84,  107,   82,  108,   82,
       82,   82,   82,  107,   82,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,   82,
       82,   82,   82,  109,   83,   82,   82,   82,   82,   82,
       82,  110,  111,  110,   84,  110,   82,  104,  110,   82,
      110,   82,   82,   82,   82,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,

      110,  110,  110,  110,  110,  110,  110,  110,  105,   82,
       82,   83,   83,  112,  112,  757,   83,   83,  189,  113,
      113,   84,   84,  171,  113,  113,  147,  147,  190,  247,
      754,  171,  248,  172,  148,  148,  149,  149,  151,  152,
      151,  172,  173,  189,  153,  154,  244,  155,  277,  156,
      173,  277,  752,  190,  245,  114,  114,   82,  115,  116,
      117,   82,   82,  118,  119,   82,  118,  120,  121,  122,
      121,  121,  120,  123,  120,   82,   82,  124,   82,   82,
      125,  121,  121,  126,  121,  127,  121,  121,  121,  128,
      121,  121,  129,  130,  131,  121,  132,  133,  134,  121,

      121,  121,  121,   82,  135,  121,  138,   83,  265,  750,
      266,  293,  139,  265,  192,  294,  158,   84,  159,  140,
      140,  151,  152,  151,  193,   83,  160,  153,  154,  749,
      155,  141,  156,  201,  158,   84,  159,   83,  169,  163,
       83,  748,  163,  202,  160,  142,  250,   84,  284,  182,
       84,  140,  138,   83,  251,  260,  183,  285,  139,  184,
      161,  162,   83,   84,  166,  140,  140,  167,  168,  170,
       83,  727,   84,  278,  278,  278,  205,  141,  161,  162,
       84,  164,  165,  169,  164,  165,  206,  737,   83,  280,
      166,  142,  281,  167,  168,  175,   83,  140,   84,  176,

      182,   83,   83,  209,  265,  289,  174,  183,  290,  265,
      184,  178,  178,  210,  170,  179,  179,  180,  180,   83,
       83,  185,  185,  192,  747,  196,  186,  186,  196,  187,
      187,  201,  205,  193,  197,  198,  209,  197,  198,  325,
      194,  202,  206,  326,  213,  199,  210,  213,  203,  207,
      217,  217,  220,  211,  214,  220,  224,  214,  224,  228,
      218,  218,  221,  228,  215,  221,  225,  232,  225,  229,
      258,  232,  222,  229,  236,  226,  236,  233,  744,  306,
      230,  233,  307,  259,  237,  297,  237,  713,  234,  270,
      271,  271,  485,  238,  300,  272,  274,  275,  275,  486,

      273,  743,  272,  274,  275,  275,  742,  276,  741,  272,
      239,  298,  299,  240,  276,  260,  295,  271,  271,  301,
      296,  266,  272,  308,  308,  308,  239,  273,  315,  240,
      309,  316,  310,  302,  308,  308,  308,  311,  311,  311,
      327,  309,  239,  310,  328,  321,  322,  323,  322,  239,
      239,  330,  324,  240,  331,  332,  239,  339,  333,  337,
      342,  740,  354,  343,  340,  355,  260,  341,  344,  353,
      353,  353,  345,  356,  356,  356,  739,  239,  346,  347,
      240,  348,  349,  350,  351,  358,  352,  370,  359,  360,
      371,  738,  736,  361,  381,  381,  381,  758,  239,  362,

      363,  240,  364,  365,  366,  367,  383,  368,  372,  384,
      649,  735,  373,  385,  385,  385,  731,  239,  374,  375,
      240,  376,  377,  378,  379,  730,  380,  386,  386,  386,
      239,  244,  729,  240,  387,  387,  387,  239,  250,  245,
      240,  388,  388,  388,  239,  390,  251,  240,  389,  389,
      389,  239,  251,  245,  240,  391,  391,  258,  270,  271,
      271,  271,  271,  271,  272,  396,  728,  272,  397,  273,
      259,  297,  395,  278,  278,  278,  274,  271,  271,  274,
      275,  275,  272,  396,  297,  272,  398,  276,  277,  727,
      276,  277,  278,  278,  278,  402,  410,  298,  403,  300,

      411,  726,  260,  295,  271,  271,  725,  296,  325,  272,
      298,  299,  326,  724,  273,  723,  308,  308,  308,  311,
      311,  311,  758,  309,  301,  310,  311,  311,  311,  322,
      323,  322,  327,  490,  330,  649,  328,  331,  302,  330,
      428,  491,  331,  429,  353,  353,  353,  356,  356,  356,
      438,  448,  722,  439,  449,  381,  381,  381,  385,  385,
      385,  386,  386,  386,  387,  387,  387,  388,  388,  388,
      389,  389,  389,  396,  524,  463,  460,  463,  525,  526,
      528,  526,  465,  464,  465,  468,  465,  721,  720,  468,
      529,  533,  533,  533,  559,  559,  559,  569,  559,  569,

      579,  559,  579,  528,  586,  586,  586,  533,  533,  533,
      596,  596,  596,  529,  597,  597,  597,  599,  599,  599,
      600,  600,  600,  605,  605,  605,  601,  608,  608,  608,
      559,  559,  559,  612,  612,  612,  614,  605,  614,  617,
      608,  617,  569,  559,  569,  621,  612,  621,  623,  605,
      623,  626,  608,  626,  579,  559,  579,  630,  612,  630,
      586,  586,  586,  645,  645,  645,  596,  596,  596,  648,
      597,  648,  599,  599,  599,  600,  600,  600,  605,  605,
      605,  601,  719,  649,  608,  608,  608,  653,  653,  653,
      612,  612,  612,  614,  605,  614,  617,  608,  617,  658,

      653,  658,  621,  612,  621,  623,  605,  623,  626,  608,
      626,  663,  653,  663,  630,  612,  630,  758,  758,  758,
      645,  645,  645,  677,  677,  677,  648,  597,  648,  718,
      717,  670,  679,  679,  679,  653,  653,  653,  716,  713,
      649,  681,  681,  681,  683,  679,  683,  658,  653,  658,
      685,  681,  685,  687,  679,  687,  663,  653,  663,  689,
      681,  689,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  698,  697,  279,  698,  697,  697,  697,
      697,  697,  697,  697,  697,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,

      279,  279,  279,  279,  279,  279,  279,  279,  697,  697,
      698,  677,  677,  677,  679,  679,  679,  681,  681,  681,
      705,  705,  705,  683,  679,  683,  685,  681,  685,  707,
      705,  707,  687,  679,  687,  712,  700,  711,  701,  689,
      681,  689,  709,  705,  709,  714,  714,  714,  710,  702,
      708,  703,  715,  715,  715,  705,  705,  705,  707,  705,
      707,  709,  705,  709,  714,  714,  714,  715,  715,  715,
      732,  732,  732,  733,  732,  733,  734,  732,  734,  732,
      732,  732,  733,  732,  733,  734,  732,  734,  745,  745,
      745,  751,  751,  751,  745,  745,  745,  753,  753,  753,

      751,  751,  751,  755,  755,  755,  753,  753,  753,  755,
      755,  755,  706,  704,  678,  699,  696,  695,  758,  694,
      693,  692,  691,  690,  688,  686,  684,  682,  680,  678,
      676,  675,  674,  746,  673,  672,  758,  637,  669,  746,
      668,  667,  666,  665,  664,  627,  662,  661,  756,  660,
      659,  618,  657,  656,  756,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,  143,  143,  143,  143,  143,  143,

      143,  143,  143,  143,  143,  143,  143,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  195,  195,

      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,

      223,  223,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  241,  241,  655,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  253,  253,  253,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      261,  654,  261,  609,  261,  263,  652,  263,  651,  263,
      264,  603,  264,  650,  264,  267,  267,  267,  646,  267,
      268,  268,  644,  268,  268,  268,  268,  268,  268,  268,

      268,  268,  268,  279,  279,  279,  643,  279,  305,  305,
      305,  305,  305,  305,  642,  305,  305,  305,  305,  305,
      305,  312,  312,  641,  312,  640,  312,  312,  312,  312,
      312,  312,  312,  312,  313,  313,  639,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  317,  317,  637,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      319,  319,  635,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  329,  329,  634,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  334,  334,  633,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  338,

      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  357,  357,  632,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  369,  369,  631,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  382,  382,
      629,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  424,  424,  628,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      425,  425,  627,  425,  425,  425,  425,  425,  425,  425,

      425,  425,  425,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  636,
      636,  636,  625,  624,  622,  620,  636,  636,  636,  619,
      636,  638,  618,  616,  615,  613,  611,  610,  638,  638,
      638,  609,  638,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  671,  607,  606,  604,
      603,  602,  598,  671,  671,  671,  595,  671,  594,  593,
      592,  591,  590,  589,  588,  587,  585,  584,  528,  525,
      524,  583,  582,  581,  580,  578,  577,  576,  575,  574,

      573,  572,  571,  570,  568,  567,  566,  565,  564,  563,
      562,  561,  560,  558,  557,  556,  555,  554,  553,  552,
      551,  550,  549,  548,  547,  546,  546,  545,  544,  543,
      542,  541,  540,  539,  538,  537,  536,  535,  534,  532,
      531,  530,  467,  401,  523,  522,  521,  520,  519,  518,
      517,  516,  515,  514,  513,  512,  511,  510,  509,  508,
      507,  506,  505,  504,  503,  502,  501,  500,  499,  498,
      497,  496,  495,  494,  493,  492,  489,  423,  421,  488,
      487,  484,  483,  482,  481,  480,  479,  478,  477,  476,
      475,  474,  473,  472,  471,  470,  469,  468,  467,  462,

      461,  399,  459,  458,  390,  457,  456,  455,  454,  453,
      452,  451,  450,  447,  446,  445,  444,  443,  442,  441,
      440,  437,  436,  435,  434,  433,  432,  431,  430,  339,
      339,  339,  335,  330,  330,  330,  427,  426,  320,  318,
      423,  421,  314,  420,  419,  304,  303,  418,  417,  416,
      415,  414,  413,  412,  409,  408,  407,  406,  405,  404,
      401,  399,  269,  262,  262,  394,  255,  393,  392,  339,
      336,  335,  330,  320,  318,  314,  304,  303,  292,  291,
      288,  287,  286,  283,  282,  269,  262,  255,  252,  249,
      246,  758,   81,  758,  758,  758,  758,  758,  758,  758,

      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758
    } ;

static yyconst short int yy_chk[2143] =
    {   0,
        0,    0,    1,    2,    3,    4,  463,   26,  463,    5,
        5,   26,    1,    2,    3,    4,    5,    6,    6,    5,
       11,   11,    7,    8,    6,   31,   11,    6,    5,    7,
        8,   11,    7,    8,   84,   31,    6,   84,  100,  100,
       11,    7,    8,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,   12,   12,   13,   14,   29,   30,   12,   32,

       47,   29,   30,   12,   13,   14,   29,   30,   87,   32,
       47,   87,   12,   13,   14,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   23,   24,   23,   24,  754,   33,   34,   55,   23,
       24,   23,   24,   45,   23,   24,   33,   34,   55,   92,
      749,   46,   92,   45,   33,   34,   33,   34,   35,   35,
       35,   46,   45,   56,   35,   35,   89,   35,  118,   35,
       46,  118,  747,   56,   89,   23,   24,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,   27,   27,  108,  743,
      109,  134,   27,  108,   57,  134,   37,   27,   37,   27,
       27,   36,   36,   36,   57,   43,   37,   36,   36,  742,
       36,   27,   36,   61,   38,   43,   38,   39,   43,   39,
       40,  741,   40,   61,   38,   27,   94,   39,  127,   51,
       40,   27,   28,   28,   94,  109,   51,  127,   28,   51,
       37,   37,   41,   28,   41,   28,   28,   41,   41,   43,
       44,  726,   41,  119,  119,  119,   63,   28,   38,   38,
       44,   39,   39,   44,   40,   40,   63,  726,   42,  122,
       42,   28,  122,   42,   42,   48,   48,   28,   42,   48,

       52,   49,   50,   65,  265,  131,   48,   52,  131,  265,
       52,   49,   50,   65,   44,   49,   50,   49,   50,   53,
       54,   53,   54,   58,  740,   59,   53,   54,   60,   53,
       54,   62,   64,   58,   59,   59,   66,   60,   60,  175,
       58,   62,   64,  175,   67,   60,   66,   68,   62,   64,
       69,   70,   71,   66,   67,   72,   73,   68,   74,   75,
       69,   70,   71,   76,   68,   72,   73,   77,   74,   75,
      101,   78,   72,   76,   79,   74,   80,   77,  738,  145,
       76,   78,  145,  101,   79,  137,   80,  737,   78,  115,
      115,  115,  418,   80,  138,  115,  116,  116,  116,  418,

      115,  736,  116,  117,  117,  117,  735,  116,  731,  117,
      147,  137,  137,  147,  117,  101,  136,  136,  136,  138,
      136,  266,  136,  151,  151,  151,  156,  136,  160,  156,
      151,  160,  151,  138,  152,  152,  152,  155,  155,  155,
      176,  152,  172,  152,  176,  172,  173,  173,  173,  174,
      178,  183,  174,  178,  183,  184,  187,  190,  184,  187,
      193,  730,  198,  193,  190,  198,  266,  190,  194,  197,
      197,  197,  194,  201,  201,  201,  729,  202,  194,  194,
      202,  194,  194,  194,  194,  206,  194,  210,  206,  207,
      210,  728,  725,  207,  213,  213,  213,  647,  214,  207,

      207,  214,  207,  207,  207,  207,  218,  207,  211,  218,
      647,  724,  211,  220,  220,  220,  720,  221,  211,  211,
      221,  211,  211,  211,  211,  719,  211,  224,  224,  224,
      225,  244,  718,  225,  228,  228,  228,  229,  250,  244,
      229,  232,  232,  232,  233,  245,  250,  233,  236,  236,
      236,  237,  251,  245,  237,  251,  245,  258,  270,  270,
      270,  271,  271,  271,  270,  273,  717,  271,  273,  270,
      258,  297,  271,  272,  272,  272,  274,  274,  274,  275,
      275,  275,  274,  276,  296,  275,  276,  274,  277,  713,
      275,  277,  278,  278,  278,  282,  289,  297,  282,  300,

      289,  712,  258,  295,  295,  295,  711,  295,  325,  295,
      296,  296,  325,  710,  295,  708,  308,  308,  308,  310,
      310,  310,  649,  308,  300,  308,  311,  311,  311,  322,
      322,  322,  326,  427,  330,  649,  326,  330,  300,  332,
      344,  427,  332,  344,  353,  353,  353,  356,  356,  356,
      360,  372,  706,  360,  372,  381,  381,  381,  385,  385,
      385,  386,  386,  386,  387,  387,  387,  388,  388,  388,
      389,  389,  389,  395,  461,  399,  395,  399,  462,  464,
      468,  526,  464,  399,  526,  461,  399,  704,  703,  462,
      468,  472,  472,  472,  499,  499,  499,  509,  509,  509,

      519,  519,  519,  529,  532,  532,  532,  533,  533,  533,
      543,  543,  543,  529,  544,  544,  544,  547,  547,  547,
      548,  548,  548,  552,  552,  552,  548,  555,  555,  555,
      559,  559,  559,  560,  560,  560,  562,  562,  562,  565,
      565,  565,  569,  569,  569,  570,  570,  570,  572,  572,
      572,  575,  575,  575,  579,  579,  579,  580,  580,  580,
      586,  586,  586,  594,  594,  594,  596,  596,  596,  597,
      597,  597,  599,  599,  599,  600,  600,  600,  605,  605,
      605,  600,  702,  597,  608,  608,  608,  610,  610,  610,
      612,  612,  612,  614,  614,  614,  617,  617,  617,  619,

      619,  619,  621,  621,  621,  623,  623,  623,  626,  626,
      626,  628,  628,  628,  630,  630,  630,  636,  636,  636,
      645,  645,  645,  646,  646,  646,  648,  648,  648,  701,
      700,  636,  651,  651,  651,  653,  653,  653,  699,  694,
      648,  654,  654,  654,  656,  656,  656,  658,  658,  658,
      659,  659,  659,  661,  661,  661,  663,  663,  663,  664,
      664,  664,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,

      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  677,  677,  677,  679,  679,  679,  681,  681,  681,
      682,  682,  682,  683,  683,  683,  685,  685,  685,  686,
      686,  686,  687,  687,  687,  693,  677,  692,  677,  689,
      689,  689,  690,  690,  690,  695,  695,  695,  691,  677,
      688,  677,  696,  696,  696,  705,  705,  705,  707,  707,
      707,  709,  709,  709,  714,  714,  714,  715,  715,  715,
      721,  721,  721,  722,  722,  722,  723,  723,  723,  732,
      732,  732,  733,  733,  733,  734,  734,  734,  739,  739,
      739,  744,  744,  744,  745,  745,  745,  748,  748,  748,

      751,  751,  751,  752,  752,  752,  753,  753,  753,  755,
      755,  755,  684,  680,  678,  676,  673,  672,  671,  669,
      668,  667,  666,  665,  662,  660,  657,  655,  652,  650,
      643,  642,  641,  739,  640,  639,  638,  637,  635,  745,
      634,  633,  632,  631,  629,  627,  625,  624,  752,  622,
      620,  618,  616,  615,  755,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  761,  762,  762,  762,  762,  762,  762,

      762,  762,  762,  762,  762,  762,  762,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  767,
      767,  767,  767,  767,  767,  767,  767,  767,  767,  767,
      767,  767,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  770,  770,

      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,

      777,  777,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  779,  779,  779,  779,  779,
      779,  779,  779,  779,  779,  779,  779,  779,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  781,  781,  613,  781,  781,  781,  781,  781,  781,
      781,  781,  781,  781,  782,  782,  782,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      784,  611,  784,  609,  784,  785,  607,  785,  606,  785,
      786,  604,  786,  598,  786,  787,  787,  787,  595,  787,
      788,  788,  593,  788,  788,  788,  788,  788,  788,  788,

      788,  788,  788,  789,  789,  789,  592,  789,  790,  790,
      790,  790,  790,  790,  591,  790,  790,  790,  790,  790,
      790,  791,  791,  590,  791,  589,  791,  791,  791,  791,
      791,  791,  791,  791,  792,  792,  588,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  793,  793,  587,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      794,  794,  585,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  795,  795,  584,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  796,  796,  583,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  797,

      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  798,  798,  582,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  799,  799,  581,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  800,  800,
      578,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  801,  801,  801,  801,  801,  801,  801,  801,  801,
      801,  801,  801,  801,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  803,  803,  577,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      804,  804,  576,  804,  804,  804,  804,  804,  804,  804,

      804,  804,  804,  805,  805,  805,  805,  805,  805,  805,
      805,  805,  805,  805,  805,  805,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  807,
      807,  807,  574,  573,  571,  568,  807,  807,  807,  567,
      807,  808,  566,  564,  563,  561,  558,  557,  808,  808,
      808,  556,  808,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  810,  554,  553,  551,
      550,  549,  545,  810,  810,  810,  542,  810,  541,  540,
      539,  538,  537,  536,  535,  534,  531,  530,  527,  525,
      524,  523,  522,  521,  520,  518,  517,  516,  515,  514,

      513,  512,  511,  510,  508,  507,  506,  505,  504,  503,
      502,  501,  500,  498,  497,  496,  495,  494,  493,  492,
      491,  490,  489,  488,  487,  486,  485,  484,  483,  482,
      481,  480,  479,  478,  477,  476,  475,  474,  473,  471,
      470,  469,  466,  460,  459,  458,  457,  456,  455,  454,
      453,  452,  451,  450,  449,  448,  447,  446,  445,  444,
      443,  442,  441,  440,  439,  438,  437,  436,  435,  434,
      433,  432,  431,  430,  429,  428,  426,  422,  421,  420,
      419,  417,  416,  415,  414,  413,  412,  411,  410,  409,
      408,  407,  406,  405,  404,  403,  402,  401,  400,  398,

      397,  396,  393,  392,  390,  380,  379,  378,  377,  376,
      375,  374,  373,  368,  367,  366,  365,  364,  363,  362,
      361,  352,  351,  350,  349,  348,  347,  346,  345,  341,
      340,  338,  334,  333,  331,  329,  328,  327,  319,  317,
      316,  315,  313,  304,  303,  302,  301,  299,  298,  294,
      293,  292,  291,  290,  288,  287,  286,  285,  284,  283,
      281,  280,  268,  262,  259,  257,  254,  252,  249,  188,
      186,  185,  181,  166,  163,  159,  142,  141,  133,  132,
      130,  129,  128,  126,  125,  112,  103,   99,   95,   93,
       91,   81,  758,  758,  758,  758,  758,  758,  758,  758,

      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#define INITIAL 0
/*************************************************************************

    CPP lexer

    This file is derived from the DOC++ source by Roland Wunderling
    and Malte Zoeckler.

    Better handling of typedefs, linenumbers, formatting, comments
    and various other improvements was made. Still a lot to be done
    to handle all modern C++ constructs. <bjarke@viksoe.dk>

 *************************************************************************/

#pragma code_seg( "MISC" )

/*
 *	Includes
 */

#include "CppTypes.h"


/* -----------------------------------------------------------------
 *
 *	statics
 */
static const char*	inputString ;
static int		inputPosition ;
static int		lastContext ;
static int		lastCContext ;
static int		lastTContext;
static int		protection   = GLOB ;
static int		bracketCount = 0 ;
static int		sharpCount   = 0 ;
static int		elseCount    = 0 ;
static Entry*		current_root = 0 ;
static Entry*		current      = 0 ;
static Entry*		previous     = 0 ;
static McString         nmspc        = "";

static int		yyLineNr = 1 ;

static void msg( const char* str, const char* str2=NULL )
{
#ifdef _DEBUG
	if( verb )
	{
		printf( "%d:\t%s", yyLineNr, str ) ;
		if( str2 ) printf( "%s", str2 ) ;
		printf( "\n" ) ;
	}
#endif
}

static void lineCount()
{
	for( const char* c = yytext ; *c ; ++c )
		yyLineNr += (*c == '\n') ;
}


static void addType( Entry* current )
{
   if( !current->name.empty() ) {
      if( !current->type.empty() ) current->type += ' ' ;
      current->type += current->name ;
      current->name.clear() ;
   }
   if( !current->args.empty() ) {
      if( !current->type.empty() ) current->type += ' ' ;
      current->type += current->args ;
      current->args.clear() ;
   }
}

/* -----------------------------------------------------------------
 */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result = yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
	int c = 0;
	while( c < max_size && inputString[inputPosition] )
	{
		*buf = inputString[inputPosition++] ;
		c++; buf++;
	}
	return c;
}

#define Cxx_Memo 1

#define Doc 2

#define VerbDoc 3

#define Define 4

#define DefineEnd 5

#define DefineEnded 6

#define ClassName 7

#define NamespaceName 8

#define TypedefName 9

#define Bases 10

#define NextSemi 11

#define FindMembers 12

#define Function 13

#define Operator 14

#define Throws 15

#define Array 16

#define Round 17

#define Curly 18

#define SkipCurly 19

#define SkipRound 20

#define SkipInits 21

#define SkipDefine 22

#define SkipElse 23

#define Sharp 24

#define Comment 25

#define SkipComment 26

#define SkipCxxComment 27

#define CppDoc 28

#define CppMemo 29

#define See 30

#define Args 31

#define Type 32

#define Author 33

#define Name 34

#define Version 35

#define Param 36

#define Memo 37

#define Return 38

#define Exception 39


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplusx
//#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;




	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 759 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 758 );
		yy_cp = yy_last_accepting_cpos;
		yy_current_state = yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{ BEGIN( FindMembers ) ; }
	YY_BREAK
case 2:
YY_RULE_SETUP

	YY_BREAK
case 3:
YY_RULE_SETUP
{ BEGIN( SkipCurly ) ; }
	YY_BREAK
case 4:
YY_RULE_SETUP
{ 
					  current->protection = protection = PUBL ;
					  lineCount() ;
					}
	YY_BREAK
case 5:
YY_RULE_SETUP
{ 
					  current->protection = protection = PROT ;
					  lineCount() ;
					}
	YY_BREAK
case 6:
YY_RULE_SETUP
{ 
					  current->protection = protection = PRIV ;
					  lineCount() ;
					}
	YY_BREAK
case 7:
YY_RULE_SETUP
{
					  msg( "found class      ", current->name ) ;
					  current->section = TYPEDEF_SEC ;
					  current->lineNo = yyLineNr ;
					  current->type = "typedef class" ;
					  current->name.clear() ;
					  lineCount() ;
					}
	YY_BREAK
case 8:
YY_RULE_SETUP
{
					  msg( "found struct     ", current->name ) ;
					  current->section = STRUCT_SEC ;
					  current->lineNo = yyLineNr ;
					  current->type = "typedef struct" ;
					  current->name.clear() ;
					  lastTContext = 1;
					  lineCount() ;
				  	  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 9:
YY_RULE_SETUP
{
					  msg( "found struct     ", current->name ) ;
					  current->section = STRUCT_SEC ;
					  current->lineNo = yyLineNr ;
					  current->type = "typedef struct" ;
					  current->name.clear() ;
					  lineCount() ;
					  current->startLine = yyLineNr ;
					  lastTContext = 1;
				  	  BEGIN( Curly ) ;
					}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
					  msg( "found enum       ", current->name ) ;
					  current->section = ENUM_SEC ;
					  current->lineNo = yyLineNr ;
					  current->type = "typedef enum" ;
					  current->name.clear() ;
					  lineCount() ;
					  current->startLine = yyLineNr ;
					  lastTContext = 1;
				  	  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
					  msg( "found struct     ", current->name ) ;
					  current->section = ENUM_SEC ;
					  current->lineNo = yyLineNr ;
					  current->type = "typedef enum" ;
					  current->name.clear() ;
					  lineCount() ;
					  current->startLine = yyLineNr ;
					  lastTContext = 1;
				  	  BEGIN( Curly ) ;
					}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
					  msg( "found union      ", current->name ) ;
					  current->section = UNION_SEC ;
					  current->lineNo = yyLineNr ;
					  current->type = "typedef union" ;
					  current->name.clear() ;
					  lineCount() ;
				  	  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 13:
YY_RULE_SETUP
{ 
					  current->section = CLASS_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr ;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "interface" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 14:
YY_RULE_SETUP
{ 
					  msg( "found class       ", current->name ) ;
					  current->section = CLASS_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr ;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "class" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 15:
YY_RULE_SETUP
{ 
					  msg( "found struct      ", current->name ) ;
					  current->section = STRUCT_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr ;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "struct" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 16:
YY_RULE_SETUP
{ 
					  msg( "found enum      ", current->name ) ;
					  current->section = ENUM_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr ;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "enum" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 17:
YY_RULE_SETUP
{ 
					  current->section = UNION_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr ;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "union" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 18:
YY_RULE_SETUP
{ 
					  msg( "found forward declare" ) ;
					  lineCount() ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 19:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ 
					  addType( current ) ;
					  current->lineNo = yyLineNr ;
					  current->name  = yytext ;
					  BEGIN( Operator ) ;
					}
	YY_BREAK
case 20:
YY_RULE_SETUP
{
					  msg( "found using namespace" ) ;
					  lineCount() ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 21:
YY_RULE_SETUP
{
					  msg( "found namespace" ) ;
					  lineCount() ;
					  BEGIN( NamespaceName ) ;
					}
	YY_BREAK
case 22:
YY_RULE_SETUP
{ 
				  	  msg( "  has name       ", yytext ) ;
					  if( !nmspc.empty() ) nmspc += "::" ;
					  nmspc += yytext ;
				  	  current->name = yytext ;
					  current->lineNo = yyLineNr ;
					  current->startLine = yyLineNr ;
					  current->section = NAMESPACE_SEC;
					  current_root->addSubEntry( current ) ;
					  current = new Entry ;
					  current->protection = protection ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 23:
YY_RULE_SETUP
{
					  if( !nmspc.empty() ) {
					    if( nmspc.find("::") != McString::npos ) nmspc = nmspc.substr(0, nmspc.find_last_of(":")-2).c_str();
					    else nmspc = "";
					  }
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 24:
YY_RULE_SETUP
{ 
					  BEGIN( SkipRound ) ;
					}
	YY_BREAK
case 25:
YY_RULE_SETUP
{ 
					  current->name += yytext ;
					  current->lineNo = yyLineNr ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 26:
YY_RULE_SETUP
{ 
					  addType( current ) ;
					  current->lineNo = yyLineNr ;
					  current->name  = yytext ;
					}
	YY_BREAK
case 27:
YY_RULE_SETUP
{ 
					  addType( current ) ;
					  current->lineNo = yyLineNr ;
					  current->namespc = nmspc;
					  current->name  = yytext ;
					}
	YY_BREAK
case 28:
YY_RULE_SETUP
{ 
					  msg( "found compiler-directive" ) ;
					  lineCount() ; 
					  BEGIN( SkipDefine ) ; 
					}
	YY_BREAK
case 29:
YY_RULE_SETUP

	YY_BREAK
case 30:
YY_RULE_SETUP
{ yyLineNr++ ; }
	YY_BREAK
case 31:
YY_RULE_SETUP
{ 
					  yyLineNr++ ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 32:
YY_RULE_SETUP
{ 
					  msg( "found #ELSE" ) ; 
					  BEGIN( SkipElse ) ; 
					}
	YY_BREAK
case 33:
YY_RULE_SETUP

	YY_BREAK
case 34:
YY_RULE_SETUP
{ elseCount++ ; }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ if( elseCount > 0 )
					    --elseCount ;
					  else
					    BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 36:
YY_RULE_SETUP
{ 
					  current->type = "#define" ;
					  BEGIN( Define ) ;
					}
	YY_BREAK
case 37:
YY_RULE_SETUP
{ 
					  current->name = yytext ;
					  current->lineNo = yyLineNr ;
					  BEGIN( DefineEnd ) ;
					}
	YY_BREAK
case 38:
YY_RULE_SETUP
{ BEGIN( DefineEnd ) ; }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ 
					  current->args = yytext ;
					  BEGIN( DefineEnded ) ;
					}
	YY_BREAK
case 40:
YY_RULE_SETUP
{ yyLineNr++ ; }
	YY_BREAK
case 41:
YY_RULE_SETUP
{ yyLineNr++ ; }
	YY_BREAK
case 42:
YY_RULE_SETUP
{ 
					  current->section = MACRO_SEC ;
					  current->lineNo = yyLineNr ;
					  msg( "found macro      ", current->name ) ;
					  current_root->addSubEntry( current ) ;
					  current = new Entry ;
					  current->protection = protection ;
					  yyLineNr++ ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 43:
YY_RULE_SETUP
{ 
					  current->name += yytext ; 
					  current->lineNo = yyLineNr ;
					}
	YY_BREAK
case 44:
YY_RULE_SETUP
{ 
					  BEGIN( FindMembers ) ;
					  if( current->lineNo == 0 ) current->lineNo = yyLineNr + 1;
					  msg( "found variable   ", current->name ) ;
					  if( current->section != TYPEDEF_SEC )
					    current->section = VARIABLE_SEC ;
					  current_root->addSubEntry( current ) ;
					  current = new Entry ;
					  current->protection = protection ;
					  if( *yytext == '=' )
					    BEGIN( NextSemi ) ;
					}
	YY_BREAK
case 45:
YY_RULE_SETUP
{ 
					  current->args += yytext ;
					  BEGIN( Array ) ;
					}
	YY_BREAK
case 46:
YY_RULE_SETUP
{ 
					  current->args += *yytext ;
					  if( sharpCount > 0 )
					    --sharpCount ;
					  else
					    BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 47:
YY_RULE_SETUP
{ 
					  current->args += *yytext ;
					  ++sharpCount ;	
					}
	YY_BREAK
case 48:
YY_RULE_SETUP
{ current->args += *yytext ; }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ 
					  addType( current ) ;
					  current->type += *yytext ;
					  BEGIN( Sharp ) ;
					}
	YY_BREAK
case 50:
YY_RULE_SETUP
{ 
					  current->type += *yytext ;
					  if( sharpCount > 0 )
					    --sharpCount ;
					  else
					    BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 51:
YY_RULE_SETUP
{ 
					  current->type += *yytext ;
					  ++sharpCount ;
					}
	YY_BREAK
case 52:
YY_RULE_SETUP
{ current->type += *yytext ; }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ current->program += yytext ; ++yyLineNr ; }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  lastContext = Curly ;
					  BEGIN( Comment ) ;
					}
	YY_BREAK
case 57:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  ++bracketCount ;
					}
	YY_BREAK
case 58:
YY_RULE_SETUP
{ 
					  if( bracketCount > 0 )
					  {
					    current->program += yytext ;
					    --bracketCount ;
					  }
					  else
					  {
					    current->args += " {...}";

					    if( lastTContext ) 
					    {
					      BEGIN( TypedefName ) ;
					    }
					    else
					    {
					      int section = current->section;
					      current_root->addNextEntry( current ) ;
					      current = new Entry ;
					      current->protection = protection ;
					      if( section == CLASS_SEC ) current->protection = GLOB ;
					      BEGIN( NextSemi ) ;
					    }
					  }
					}
	YY_BREAK
case 59:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 60:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ 
					  lineCount() ; 
					  current->args = "(" ;
					  BEGIN( Round ) ;
					}
	YY_BREAK
case 62:
YY_RULE_SETUP
{ 
					  current->args += *yytext ;
					  ++bracketCount ;
					}
	YY_BREAK
case 63:
YY_RULE_SETUP
{ 
					  lineCount() ; 
					  current->args += ')' ;
					  if( bracketCount > 0 )
					    --bracketCount ;
					  else
					    BEGIN( Function ) ;
					}
	YY_BREAK
case 64:
YY_RULE_SETUP
{ lineCount() ; current->args += ", " ; }
	YY_BREAK
case 65:
YY_RULE_SETUP
{ lineCount() ; current->args += " " ; }
	YY_BREAK
case 66:
YY_RULE_SETUP
{ current->args += *yytext ; }
	YY_BREAK
case 67:
YY_RULE_SETUP
{ lineCount() ; current->args += " const" ; }
	YY_BREAK
case 68:
YY_RULE_SETUP
{ 
					  current->args += " throw(" ;
					  lineCount() ;
				  	  BEGIN( Round ) ;
					}
	YY_BREAK
case 69:
YY_RULE_SETUP
{ 
					  current->type += current->name ;
					  current->name  = current->args ;
					  current->args  = yytext ;
					  current->lineNo = yyLineNr ;
					  BEGIN( Round ) ;
					}
	YY_BREAK
case 70:
YY_RULE_SETUP
{ 
					  msg( "found method     ", current->name ) ;
					  current->section = FUNCTION_SEC ;
					  if( *yytext == '{' && current->protection == GLOB ) current->section = IMPL_SEC ;
					  current_root->addSubEntry(current);
					  current = new Entry ;
					  current->protection = protection ;
					  if( *yytext == '{' )
					    BEGIN( SkipCurly ) ;
					  else if( *yytext == ':' )
					    BEGIN( SkipInits ) ;
					  else
					    BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 71:
YY_RULE_SETUP
{ BEGIN( SkipCurly ) ; }
	YY_BREAK
case 72:
YY_RULE_SETUP
{ BEGIN( FindMembers ) ; }
	YY_BREAK
case 73:
YY_RULE_SETUP

	YY_BREAK
case 74:
YY_RULE_SETUP
{ ++bracketCount ; }
	YY_BREAK
case 75:
YY_RULE_SETUP
{ 
					  if( bracketCount > 0 )
					    --bracketCount ;
					  else
					    BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 76:
YY_RULE_SETUP

	YY_BREAK
case 77:
YY_RULE_SETUP
{ ++bracketCount ; }
	YY_BREAK
case 78:
YY_RULE_SETUP
{ 
					  if( bracketCount > 0 )
					    --bracketCount ;
					  else
					    BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 79:
YY_RULE_SETUP
{ 
					  current->section = VARIABLE_SEC ;
					  current_root->addSubEntry(current);
					  current = new Entry ;
					  current->protection = protection ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 80:
YY_RULE_SETUP
{ 
					  if( !current->type.empty() && !current->name.empty() ) current->type += " " ;
					  current->type += current->name ;
				  	  current->name = yytext ;
					  current->namespc = nmspc;
					  current->lineNo = yyLineNr ;
					}
	YY_BREAK
case 81:
YY_RULE_SETUP
{ 
					  current->args = " :" ;
					  BEGIN( Bases ) ;
					}
	YY_BREAK
case 82:
YY_RULE_SETUP
{ 
				  	  if( current->lineNo == 0 ) current->lineNo = yyLineNr ;
					  current->startLine = yyLineNr ;
				  	  msg( "  has name       ", current->name ) ;
				  	  BEGIN( Curly ) ;
					}
	YY_BREAK
case 83:
YY_RULE_SETUP
{ 
					  //current->extends += yytext ;
					  if( !current->args.empty() ) current->args += " " ;
					  current->args += yytext ;
					}
	YY_BREAK
case 84:
YY_RULE_SETUP
{ current->args += ',' ; }
	YY_BREAK
case 85:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 86:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 87:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 88:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  BEGIN( Curly ) ;
					}
	YY_BREAK
case 89:
YY_RULE_SETUP
{ 
					  if( !current->type.empty() && !current->name.empty() ) current->type += " " ;
					  current->type += current->name ;
				  	  current->name = yytext ;
					  current->lineNo = yyLineNr ;
		
					  lastTContext = 0;
					  msg( "  has name       ", current->name ) ;

					  int section = current->section;
					  current_root->addNextEntry( current ) ;
					  current = new Entry ;
					  current->protection = protection ;
					  if( section == CLASS_SEC ) current->protection = GLOB ;

					  BEGIN( NextSemi ) ;
					}
	YY_BREAK
case 90:
YY_RULE_SETUP
{
					  lastTContext = 0;
					  msg( "  has name       ", current->name ) ;

					  int section = current->section;
					  current_root->addNextEntry( current ) ;
					  current = new Entry ;
					  current->protection = protection ;
					  if( section == CLASS_SEC ) current->protection = GLOB ;

					  if( *yytext == ',' )
					    BEGIN( NextSemi ) ;
					  else
					    BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 91:
YY_RULE_SETUP
{ 
					  lineCount() ;
					  previous = current;
					  if( current_root->sub ) previous = current_root->sub;
					  if( !current->doc.empty()
					      || !current->memo.empty() )
					  {
					    msg( "found doc entry" ) ;
					    current->lineNo = yyLineNr ;
					    current_root->addSubEntry( current ) ;
					    current = new Entry ;
					  }
					  BEGIN( Cxx_Memo ) ;
					}
	YY_BREAK
case 92:
YY_RULE_SETUP
{ 
					  lineCount() ;
					  if( !current->doc.empty()
					      || !current->memo.empty() )
					  {
					    msg( "found doc entry" ) ;
					    current->lineNo = yyLineNr ;
					    current_root->addSubEntry( current ) ;
					    current = new Entry ;
					  }
					  previous = current;
					  BEGIN( Cxx_Memo ) ;
					}
	YY_BREAK
case 93:
YY_RULE_SETUP
{ previous->memo += yytext ; }
	YY_BREAK
case 94:
YY_RULE_SETUP
{ 
					  yyLineNr++ ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 95:
YY_RULE_SETUP
{ lineCount() ; }
	YY_BREAK
case 96:
YY_RULE_SETUP
{ lineCount() ; }
	YY_BREAK
case 97:
YY_RULE_SETUP
{ lineCount() ; }
	YY_BREAK
case 98:
YY_RULE_SETUP
{ 
					  lineCount() ;
					  lastCContext = YY_START ;
					  BEGIN( SkipComment ) ;
					}
	YY_BREAK
case 99:
YY_RULE_SETUP
{ 
					  lineCount() ;
					  if( !current->doc.empty() 
					      ||  !current->memo.empty() )
					  {
					    msg( "found doc entry" ) ;
					    current->lineNo = yyLineNr ;
					    current_root->addSubEntry( current ) ;
					    current = new Entry ;
					  }
					  BEGIN( Doc ) ;
					}
	YY_BREAK
case 100:
YY_RULE_SETUP
{ 
					  yyLineNr++; 
					  BEGIN( FindMembers ) ; 
					}
	YY_BREAK
case 101:
YY_RULE_SETUP
{ 
					  current->doc += yytext ;
					  BEGIN( VerbDoc ) ;
					}
	YY_BREAK
case 102:
YY_RULE_SETUP
{ 
					  current->doc += '\n' ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 103:
YY_RULE_SETUP
{ 
					  current->doc += yytext ;
					  BEGIN( Doc ) ;
					}
	YY_BREAK
case 104:
YY_RULE_SETUP

	YY_BREAK
case 105:
YY_RULE_SETUP
{ 
					  if( !current->doc.empty() ) current->doc += '\n' ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 106:
YY_RULE_SETUP
{ current->doc += *yytext ; }
	YY_BREAK
case 107:
YY_RULE_SETUP
{ current->doc += yytext ; }
	YY_BREAK
case 108:
YY_RULE_SETUP
{ current->doc += yytext ; }
	YY_BREAK
case 109:
YY_RULE_SETUP
{ BEGIN( FindMembers ) ; }
	YY_BREAK
case 110:
YY_RULE_SETUP
{ 
					  current->memo += yytext ;
					  current->doc  += yytext ; 
					}
	YY_BREAK
case 111:
YY_RULE_SETUP
{ 
					  BEGIN( CppDoc ) ;
					  lineCount();
					  current->doc  += yytext ; 
					}
	YY_BREAK
case 112:
YY_RULE_SETUP
{ 
					  current->doc  += *yytext ; 
					  lineCount();
					}
	YY_BREAK
case 113:
YY_RULE_SETUP
{ current->memo += yytext ; }
	YY_BREAK
case 114:
YY_RULE_SETUP
{ current->doc  += yytext ; }
	YY_BREAK
case 115:
YY_RULE_SETUP
{
					  lineCount() ;
					  BEGIN( See ) ;
					}
	YY_BREAK
case 116:
YY_RULE_SETUP
{
					  lineCount() ;
					  BEGIN( Author ) ; }
	YY_BREAK
case 117:
YY_RULE_SETUP
{
					  lineCount() ;
					  BEGIN( Version ) ; }
	YY_BREAK
case 118:
YY_RULE_SETUP
{
					  lineCount() ;
					  BEGIN( Param ) ;
					}
	YY_BREAK
case 119:
YY_RULE_SETUP
{
					  lineCount() ;
					  BEGIN( Exception ) ;
					}
	YY_BREAK
case 120:
YY_RULE_SETUP
{
					  lineCount() ;
					  BEGIN( Return ) ; }
	YY_BREAK
case 121:
YY_RULE_SETUP
{
					  current->name.clear() ;
					  current->section = MANUAL_SEC ;
					  BEGIN( Name ) ;
					}
	YY_BREAK
case 122:
YY_RULE_SETUP
{
					  lineCount() ;
					  current->memo.clear() ;
					  BEGIN( Memo ) ;
					}
	YY_BREAK
case 123:
YY_RULE_SETUP
{
					  lineCount() ;
					  current->type.clear() ;
					  BEGIN( Type ) ;
					}
	YY_BREAK
case 124:
YY_RULE_SETUP
{
					  lineCount() ;
					  current->args.clear() ;
					  BEGIN( Args ) ;
					}
	YY_BREAK
case 125:
YY_RULE_SETUP
{ current->name = yytext ; }
	YY_BREAK
case 126:
YY_RULE_SETUP
{ ++yyLineNr ; BEGIN( CppDoc ) ; }
	YY_BREAK
case 127:
YY_RULE_SETUP
{ current->type = yytext ; }
	YY_BREAK
case 128:
YY_RULE_SETUP
{ ++yyLineNr ; BEGIN( CppDoc ) ; }
	YY_BREAK
case 129:
YY_RULE_SETUP
{ current->args = yytext ; }
	YY_BREAK
case 130:
YY_RULE_SETUP
{ ++yyLineNr ; BEGIN( CppDoc ) ; }
	YY_BREAK
case 131:
YY_RULE_SETUP
{ current->author += *yytext ; }
	YY_BREAK
case 132:
YY_RULE_SETUP
{ current->version += *yytext ; }
	YY_BREAK
case 133:
YY_RULE_SETUP
{ *(current->see.last()) += *yytext ; }
	YY_BREAK
case 134:
YY_RULE_SETUP
{ *(current->param.last()) += *yytext ; }
	YY_BREAK
case 135:
YY_RULE_SETUP
{ *(current->exception.last()) += *yytext ; }
	YY_BREAK
case 136:
YY_RULE_SETUP
{ current->memo += *yytext ; }
	YY_BREAK
case 137:
YY_RULE_SETUP
{ current->retrn += *yytext ; }
	YY_BREAK
case 138:
YY_RULE_SETUP
{ current->author  += '\n' ; lineCount() ; }
	YY_BREAK
case 139:
YY_RULE_SETUP
{ current->version += '\n' ; lineCount() ; }
	YY_BREAK
case 140:
YY_RULE_SETUP
{ *(current->see.last()) += '\n' ; lineCount() ; }
	YY_BREAK
case 141:
YY_RULE_SETUP
{ *(current->param.last()) += '\n' ; lineCount() ; }
	YY_BREAK
case 142:
YY_RULE_SETUP
{ *(current->exception.last()) += '\n' ; lineCount() ; }
	YY_BREAK
case 143:
YY_RULE_SETUP
{ current->memo += *yytext ; lineCount() ; }
	YY_BREAK
case 144:
YY_RULE_SETUP
{ current->retrn += *yytext ; lineCount() ; }
	YY_BREAK
case 145:
YY_RULE_SETUP

	YY_BREAK
case 146:
YY_RULE_SETUP
{ yyLineNr++ ; }
	YY_BREAK
case 147:
YY_RULE_SETUP
{ 
					  lastCContext = YY_START ;
					  BEGIN( SkipComment ) ;
					}
	YY_BREAK
case 148:
YY_RULE_SETUP
{ BEGIN( lastCContext ) ; }
	YY_BREAK
case 149:
YY_RULE_SETUP

	YY_BREAK
case 150:
YY_RULE_SETUP

	YY_BREAK
case 151:
YY_RULE_SETUP
{ 
					  lastCContext = YY_START ;
					  BEGIN( SkipCxxComment ) ;
					}
	YY_BREAK
case 152:
YY_RULE_SETUP
{ 
					  yyLineNr++ ;
					  BEGIN( lastCContext ) ;
					}
	YY_BREAK
case 153:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Cxx_Memo):
case YY_STATE_EOF(Doc):
case YY_STATE_EOF(VerbDoc):
case YY_STATE_EOF(Define):
case YY_STATE_EOF(DefineEnd):
case YY_STATE_EOF(DefineEnded):
case YY_STATE_EOF(ClassName):
case YY_STATE_EOF(NamespaceName):
case YY_STATE_EOF(TypedefName):
case YY_STATE_EOF(Bases):
case YY_STATE_EOF(NextSemi):
case YY_STATE_EOF(FindMembers):
case YY_STATE_EOF(Function):
case YY_STATE_EOF(Operator):
case YY_STATE_EOF(Throws):
case YY_STATE_EOF(Array):
case YY_STATE_EOF(Round):
case YY_STATE_EOF(Curly):
case YY_STATE_EOF(SkipCurly):
case YY_STATE_EOF(SkipRound):
case YY_STATE_EOF(SkipInits):
case YY_STATE_EOF(SkipDefine):
case YY_STATE_EOF(SkipElse):
case YY_STATE_EOF(Sharp):
case YY_STATE_EOF(Comment):
case YY_STATE_EOF(SkipComment):
case YY_STATE_EOF(SkipCxxComment):
case YY_STATE_EOF(CppDoc):
case YY_STATE_EOF(CppMemo):
case YY_STATE_EOF(See):
case YY_STATE_EOF(Args):
case YY_STATE_EOF(Type):
case YY_STATE_EOF(Author):
case YY_STATE_EOF(Name):
case YY_STATE_EOF(Version):
case YY_STATE_EOF(Param):
case YY_STATE_EOF(Memo):
case YY_STATE_EOF(Return):
case YY_STATE_EOF(Exception):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_last_accepting_cpos;
				yy_current_state = yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 759 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 759 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 758);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif



/*@ ----------------------------------------------------------------------------
 */
void parseDoc(Entry* rt)
{
	if( !rt->doc.empty() )
	{
		Entry* _current = current ;
		rt->program = rt->doc ;
		rt->doc.clear() ;
		inputString   = rt->program ;
		inputPosition = 0 ;
		current = rt ;
		cpprestart( cppin ) ;
		if( !rt->memo.empty() )
			BEGIN( CppDoc ) ;
		else
			BEGIN( CppMemo ) ;
		cpplex() ;
		rt->program.clear() ;
		if( rt->memo.length()+2 >= rt->doc.length() )
			rt->doc.clear() ;
		current = _current ;
	}
}

void callcpplex()
{
	cpplex() ;
	if( ( !current->name.empty()  ||  !current->program.empty()  ||
		  !current->memo.empty()  ||  !current->doc.empty() ) )
	{
		if( current->section == EMPTY_SEC )
			current->section = VARIABLE_SEC ;
		current_root->addSubEntry( current ) ;
		current = new Entry ;
		current->protection = protection ;
	}
}

void parseCppClasses(Entry* rt)
{
    if( rt == 0 ) return ;
    for( Entry *cr = rt ; cr ; cr = cr->next )
    {
		if( !cr->program.empty() )
		{
#ifdef _DEBUG
			if (verb)
				printf("Scanning substuff of (%s) %s\n",
				   (const char *)cr->type,
				   (const char *)cr->name);
#endif
			inputString   = cr->program ;
			inputPosition = 0 ;
			cpprestart( cppin ) ;
			BEGIN( FindMembers ) ;
			current_root = cr ;
			yyLineNr = cr->startLine ;
			current->type.clear() ;
			current->name.clear() ;
			current->args.clear() ;
			current->section = EMPTY_SEC ;
			if( cr->section == CLASS_SEC )
				current->protection = protection = PRIV ;
			else if( cr->section == STRUCT_SEC )
				current->protection = protection = PUBL ;
			else if( cr->section == UNION_SEC )
				current->protection = protection = PUBL ;
			else if( cr->section == ENUM_SEC )
				current->protection = protection = PUBL ;
			else
				current->protection = protection = GLOB ;
			callcpplex() ;
			cr->program.clear() ;
		}
    }
    parseDoc( rt ) ;
}

void parseCpp(Entry* rt)
{
	current_root  = rt ;
	protection    = GLOB ;
	current       = new Entry ;
	yyLineNr      = 1 ;
	bracketCount  = 0 ;
	sharpCount    = 0 ;
	elseCount     = 0 ;
	lastTContext  = 0 ;
	lastCContext  = 0 ;
	lastContext   = 0 ;
	nmspc         = "" ;

	inputString   = rt->program ;
	inputPosition = 0 ;
	cpprestart( cppin ) ;
	BEGIN( FindMembers ) ;
	callcpplex() ;
	rt->program.clear() ;
	parseCppClasses( rt ) ;

	delete current;
}

extern "C" {
	int	cppwrap()	{ return 1 ; }
};
