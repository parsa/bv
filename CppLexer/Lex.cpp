#define yy_create_buffer cpp_create_buffer
#define yy_delete_buffer cpp_delete_buffer
#define yy_scan_buffer cpp_scan_buffer
#define yy_scan_string cpp_scan_string
#define yy_scan_bytes cpp_scan_bytes
#define yy_flex_debug cpp_flex_debug
#define yy_init_buffer cpp_init_buffer
#define yy_flush_buffer cpp_flush_buffer
#define yy_load_buffer_state cpp_load_buffer_state
#define yy_switch_to_buffer cpp_switch_to_buffer
#define yyin cppin
#define yyleng cppleng
#define yylex cpplex
#define yyout cppout
#define yyrestart cpprestart
#define yytext cpptext
#define yywrap cppwrap

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

typedef int FILE; //#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplusx
#define __cplusplusx
#endif
#endif


#ifdef __cplusplus

//#include <stdlib.h>
//#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
//#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 147
#define YY_END_OF_BUFFER 148
static yyconst short int yy_acclist[961] =
    {   0,
       76,   76,   18,   18,   42,   42,  124,  124,  122,  122,
      120,  120,  148,  140,  147,  140,  147,  141,  147,  140,
      147,   76,  140,  147,   76,  140,  147,   77,  141,  147,
       76,  140,  147,   94,  140,  147,   94,  140,  147,   95,
      141,  147,   94,  140,  147,  100,  140,  147,  100,  140,
      147,  101,  141,  147,  100,  140,  147,  100,  140,  147,
      103,  140,  147,  103,  140,  147,  104,  141,  147,  103,
      140,  147,   87,  140,  147,   87,  140,  147,   86,  141,
      147,   87,  140,  147,   87,  140,  147,   87,  140,  147,
       84,  141,  147,   87,  140,  147,   27,  140,  147,   28,

      140,  147,   31,  141,  147,  140,  147,  140,  147,  140,
      147,   65,  140,  147,   66,  140,  147,   64,  140,  147,
       67,  140,  147,   73,  140,  147,   74,  140,  147,  140,
      147,   68,  140,  147,   69,  140,  147,  140,  147,  140,
      147,    2,  140,  147,  140,  147,  141,  147,  140,  147,
       32,  140,  147,   51,  140,  147,   33,  140,  147,   19,
      140,  147,  140,  147,   38,  140,  147,   34,  140,  147,
       19,  140,  147,   19,  140,  147,   19,  140,  147,   19,
      140,  147,   19,  140,  147,   19,  140,  147,   19,  140,
      147,   19,  140,  147,  140,  147,   20,  140,  147,   19,

      140,  147,  140,  147,   59,  140,  147,   60,  140,  147,
      140,  147,  140,  147,   18,  140,  147,   18,  140,  147,
       18,  141,  147,   18,  140,  147,   37,  140,  147,   37,
      140,  147,   37,  140,  147,   36,   37,  140,  147,   35,
       37,  140,  147,   56,  140,  147,   56,  140,  147,   55,
       56,  140,  147,   55,  141,  147,   52,   56,  140,  147,
       53,   56,  140,  147,   54,   56,  140,  147,   56,  140,
      147,   42,   50,  140,  147,   42,   50,  140,  147,   49,
      141,  147,   50,  140,  147,   50,  140,  147,   47,   50,
      140,  147,   48,   50,  140,  147,   62,  140,  147,   63,

      140,  147,   61,  140,  147,   21,  140,  147,   21,  140,
      147,   24,  141,  147,   21,  140,  147,   21,  140,  147,
       41,  140,  147,   41,  140,  147,   41,  140,  147,   40,
       41,  140,  147,   39,   41,  140,  147,   71,  140,  147,
       71,  140,  147,   70,  141,  147,   71,  140,  147,   71,
      140,  147,  140,  147,  140,  147,  140,  147,  140,  147,
      140,  147,  141,  146,  147,  140,  147,  107,  140,  147,
      107,  140,  147,  107,  141,  147,  107,  140,  147,  107,
      140,  147,  105,  140,  147,  105,  140,  147,  105,  141,
      147,  106,  140,  147,  105,  140,  147,  105,  140,  147,

      128,  140,  147,  128,  140,  147,  135,  141,  147,  128,
      140,  147,  128,  140,  147,  124,  140,  147,  124,  140,
      147,  125,  141,  147,  124,  140,  147,  124,  140,  147,
      122,  140,  147,  122,  140,  147,  123,  141,  147,  122,
      140,  147,  122,  140,  147,  126,  140,  147,  126,  140,
      147,  133,  141,  147,  126,  140,  147,  126,  140,  147,
      120,  140,  147,  120,  140,  147,  121,  141,  147,  120,
      140,  147,  127,  140,  147,  127,  140,  147,  134,  141,
      147,  127,  140,  147,  127,  140,  147,  129,  140,  147,
      129,  140,  147,  136,  141,  147,  129,  140,  147,  129,

      140,  147,  131,  140,  147,  131,  140,  147,  138,  141,
      147,  131,  140,  147,  131,  140,  147,  132,  140,  147,
      132,  140,  147,  139,  141,  147,  132,  140,  147,  132,
      140,  147,  130,  140,  147,  130,  140,  147,  137,  141,
      147,  130,  140,  147,  130,  140,  147,    1,  142,  145,
       76,   76,    1,   76,   76,  142,   76,  145,   92,  142,
       93,  145,  102,   98,  142,   99,  145,   86,   86,   90,
       89,  142,   88,  145,   27,   29,   30,   66,   67,   65,
       66,   67,   73,   74,   68,    3,   32,   19,  142,  145,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   20,

       19,   18,   18,    1,   18,   18,  142,   18,  145,   55,
       54,   54,   42,   42,    1,   42,   44,   45,  142,   43,
      145,   22,  145,   23,    1,   72,  142,  145,  144,  143,
      145,  146,    1,  146,  142,  145,  109,  142,  109,  145,
      106,  108,  142,  108,  145,  135,  124,  124,    1,  124,
      124,  142,  124,  145,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  122,  122,    1,  122,  122,  142,  122,
      145,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      133,  120,  120,    1,  120,  120,  142,  120,  145,  134,
      136,  138,  139,  137,   86,   82,   81,   78,16459,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       45,   46,   45,   43,   72,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,   81,   80,   79, 8267, 8267,
       78,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,  110,  124,  124,  124,  124,  124,  124,  124,
      110,  124,  124,  124,  122,  122,  122,  122,  122,  122,
      122,  110,  122,  122,  122,   96,   97, 8267,   91,   19,
       15,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       57,  119,  117,  116,  110,  118,  119,  124,  124,  124,

      117,  124,  116,  124,  124,  124,  110,  124,  118,  124,
      124,  119,  122,  122,  122,  117,  122,  116,  122,  122,
      122,  110,  122,  118,  122,  122,   13,   19,   19,   19,
       19,   19,   19,   19,   16,   25,   57,   58,  119,  117,
      116,  113,  118,  119,  124,  124,  124,  117,  124,  116,
      124,  113,  124,  124,  118,  124,  124,  119,  122,  122,
      122,  117,  122,  116,  122,  113,  122,  122,  118,  122,
      122,   19,   19,   19,   19,    4,   19,   14,   19,  111,
      113,  115,  111,  124,  124,  113,  124,  115,  124,  124,
      111,  122,  122,  113,  122,  115,  122,  122,    4,   19,

       19,    6,   19,   19,    4,   26,  111,  115,  112,  111,
      124,  124,  115,  124,  112,  124,  111,  122,  122,  115,
      122,  112,  122,    6,   19,   17,   17,   19,    6,   19,
      112,  124,  112,  124,  122,  112,  122,   12,    5,   19,
      114,  114,  124,  114,  122,    5,    5,  114,  114,  124,
      114,  122,   10,   85,    7,   11,    8,    9,   83,    9
    } ;

static yyconst short int yy_accept[815] =
    {   0,
        1,    1,    1,    2,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    4,    5,    5,    5,    5,    5,    5,
        5,    6,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    8,    9,   10,   11,   11,   11,   12,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   14,   16,   18,   20,   22,   25,   28,   31,   34,
       37,   40,   43,   46,   49,   52,   55,   58,   61,   64,

       67,   70,   73,   76,   79,   82,   85,   88,   91,   94,
       97,  100,  103,  106,  108,  110,  112,  115,  118,  121,
      124,  127,  130,  132,  135,  138,  140,  142,  145,  147,
      149,  151,  154,  157,  160,  163,  165,  168,  171,  174,
      177,  180,  183,  186,  189,  192,  195,  197,  200,  203,
      205,  208,  211,  213,  215,  218,  221,  224,  227,  230,
      233,  236,  240,  244,  247,  250,  254,  257,  261,  265,
      269,  272,  276,  280,  283,  286,  289,  293,  297,  300,
      303,  306,  309,  312,  315,  318,  321,  324,  327,  330,
      334,  338,  341,  344,  347,  350,  353,  355,  357,  359,

      361,  363,  366,  368,  371,  374,  377,  380,  383,  386,
      389,  392,  395,  398,  401,  404,  407,  410,  413,  416,
      419,  422,  425,  428,  431,  434,  437,  440,  443,  446,
      449,  452,  455,  458,  461,  464,  467,  470,  473,  476,
      479,  482,  485,  488,  491,  494,  497,  500,  503,  506,
      509,  512,  515,  518,  521,  524,  527,  530,  533,  536,
      539,  542,  545,  548,  548,  549,  550,  551,  552,  553,
      555,  557,  559,  561,  563,  564,  566,  568,  569,  570,
      571,  573,  575,  575,  575,  575,  575,  576,  576,  577,
      578,  578,  579,  580,  581,  582,  583,  584,  585,  585,

      586,  586,  586,  586,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  588,  589,  590,  591,  592,
      593,  594,  595,  596,  597,  598,  599,  600,  600,  601,
      601,  601,  601,  602,  602,  602,  602,  602,  602,  603,
      604,  606,  608,  610,  611,  612,  613,  614,  615,  617,
      617,  618,  620,  622,  624,  625,  625,  625,  625,  626,
      626,  627,  628,  629,  629,  629,  630,  632,  632,  633,
      633,  634,  635,  636,  637,  639,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  642,  644,  646,  647,
      648,  649,  651,  653,  655,  656,  657,  658,  659,  660,

      661,  662,  663,  664,  665,  666,  668,  670,  672,  673,
      674,  675,  676,  677,  678,  679,  680,  681,  682,  683,
      684,  686,  688,  690,  691,  692,  693,  694,  695,  695,
      695,  696,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  698,  698,  699,  700,  700,
      701,  702,  703,  704,  705,  706,  707,  708,  709,  710,
      710,  710,  711,  711,  711,  712,  713,  714,  715,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      717,  718,  719,  720,  721,  722,  723,  724,  725,  726,
      727,  728,  729,  730,  731,  732,  733,  734,  735,  736,

      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  737,  738,  739,  739,  740,
      742,  742,  742,  743,  744,  745,  746,  747,  748,  749,
      750,  751,  752,  752,  752,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  754,  754,  754,  755,  756,
      757,  758,  759,  760,  761,  763,  764,  765,  766,  767,
      768,  769,  770,  771,  772,  774,  775,  776,  776,  776,
      776,  776,  776,  777,  777,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      779,  779,  780,  781,  782,  783,  784,  785,  786,  787,

      788,  789,  790,  790,  790,  791,  792,  792,  793,  793,
      793,  794,  795,  795,  795,  796,  797,  797,  799,  800,
      801,  803,  805,  806,  807,  809,  811,  812,  814,  815,
      816,  818,  820,  821,  822,  824,  826,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  828,  829,
      830,  831,  832,  833,  834,  835,  836,  836,  836,  837,
      838,  838,  839,  840,  840,  840,  841,  842,  843,  843,
      844,  844,  846,  847,  848,  850,  852,  854,  855,  857,
      858,  860,  861,  862,  864,  866,  868,  869,  871,  872,
      872,  872,  872,  872,  872,  872,  872,  872,  873,  874,

      875,  876,  878,  879,  880,  880,  881,  881,  882,  883,
      883,  885,  886,  888,  890,  891,  893,  894,  896,  898,
      899,  899,  899,  899,  899,  899,  900,  900,  901,  902,
      904,  905,  906,  906,  907,  908,  908,  909,  910,  912,
      913,  915,  917,  919,  920,  922,  924,  924,  924,  924,
      925,  925,  926,  927,  929,  930,  931,  931,  931,  931,
      931,  931,  932,  933,  935,  936,  938,  938,  938,  938,
      938,  939,  941,  941,  941,  941,  941,  942,  944,  946,
      946,  946,  947,  948,  948,  948,  948,  948,  949,  951,
      953,  953,  953,  953,  953,  953,  953,  953,  953,  953,

      954,  954,  954,  954,  955,  956,  956,  957,  957,  958,
      959,  960,  961,  961
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    3,    4,
        1,    1,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    1,    6,    7,    1,    1,    8,    1,    9,
       10,   11,    1,   12,    1,   13,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,   17,   18,
       19,   20,    1,   21,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       22,   23,   24,    1,   15,    1,   25,   26,   27,   28,

       29,   30,   31,   32,   33,   15,   15,   34,   35,   36,
       37,   38,   15,   39,   40,   41,   42,   43,   44,   45,
       46,   15,   47,    1,   48,   49,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[50] =
    {   0,
        1,    1,    1,    2,    1,    3,    1,    4,    5,    1,
        6,    1,    7,    3,    8,    9,    1,   10,    1,   10,
        1,    4,    1,    4,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    3,    3,   11
    } ;

static yyconst short int yy_base[873] =
    {   0,
        0,    1,    4,    5,    8,    9,   22,   23,   26,   27,
       40,   41,   45,   46,   69,    0,  117,  120,  123,  128,
      151,    0,  200,    0,  249,    0,  297,  304,  321,  368,
      409,    0,  370,  374,  131,  134,  378,  383,  455,  468,
      387,  392,  415,  428,  439,  447,  477,  481,  485,  488,
      505,  509,  522,  526,  508,  513,  530,  537,  541,  546,
      559,  560,  564,  568,  573,  581,  582,  586,  589,  590,
      595,  604,  608,  609,  612,  613,  617,  631,  634,  635,
     2195, 2196, 2192, 2196,    6,    0,   63, 2196,   21, 2196,
     2191, 2196,   47, 2196, 2190, 2196, 2177,  130, 2196, 2188,

     2196,  136, 2196, 2187,   35, 2174,  291, 2161,  301, 2157,
        0, 2196, 2196, 2175, 2180,  374,    0, 2180, 2196, 2179,
        0,    4,  400,    0, 2196,  314, 2175, 2196,  654,  441,
      637,  416, 2196, 2196,    0,  417, 2196, 2196, 2146, 2143,
     2142, 2139,  454, 2135, 2129, 2138,  511,  392,   26,  411,
     2196, 2196, 2136, 2140,    0,  406,    0,  487, 2196, 2169,
      524, 2196, 2196, 2196, 2168,  650,  660, 2196, 2196,  666,
      535,    0,  671, 2196, 2163,  565, 2196, 2196, 2196, 2196,
     2196, 2196, 2166, 2196,  587, 2163, 2196, 2164,  618, 2196,
     2196, 2154,  678, 2196,  632,  633,  370, 2150,  665, 2159,

      311, 2196,  686, 2196, 2160, 2196,  677,  695, 2196, 2159,
     2196,  698,  693,    0, 2196, 2158,  705,  700,    0,    0,
      464, 2196,  701,  714,    0,  567, 2196,  702,  733, 2196,
     2157,  718,  714,    0,    0,  682, 2196,  715, 2196, 2156,
      737,  733,    0, 2196, 2155,  756,  734,    0, 2196, 2154,
      760,  756,    0, 2196, 2153,  774,  769,    0, 2196, 2152,
      781,  776,    0, 2151, 2196, 2196, 2196,    0,  787,    0,
        0,    0, 2131, 2130, 2196, 2196, 2196,  554,  785, 2196,
     2196, 2196, 2121,  617,  781, 2113,    0, 2138, 2196, 2196,
      658, 2144, 2143,    0, 2142, 2141,    0,  387,  577,    0,

      791, 2137, 2136, 2196,    0,  797,  792, 2107, 2104, 2103,
      765, 2097, 2091, 2100,  797,    0,  128,  646, 2110, 2092,
     2092, 2103,  400, 2105, 2091, 2091, 2095,    0,  528,  448,
      753, 2098, 2093,  790, 2088, 2092, 2087, 2083,    0,  407,
        0,    0,    0,  809,  815,  819,    0,  823,    0, 2115,
     2196,  695,    0, 2196, 2196, 2109,  819,  824, 2108,  830,
     2107,  825, 2106,  835, 2102, 2196, 2196, 2111, 2196,  838,
     2110, 2111, 2108, 2107, 2196, 2196,  806, 2065, 2080, 2083,
     2082, 2077, 2076, 2058, 2074,  846, 2196, 2196,  849,    0,
      853,    0,    0,    0,  817, 2057, 2072, 2075, 2074, 2069,

     2068, 2050, 2066,    0,  856,    0,    0,    0,  822, 2049,
     2064, 2067, 2066, 2061, 2060, 2042, 2058,  862,    0,  870,
        0,    0,    0,  872,  875,  878,  881,  884,  762,  768,
     2083, 2196, 2054, 2056, 2072,  538, 2057, 2039, 2039,  810,
     2053, 2039, 2039, 2043,  887, 2028, 2196,  713, 2027, 2033,
     2037, 2042, 2031, 2026, 2027, 2033, 2024, 2036, 2027, 2030,
     2032, 2025, 2020, 2022,  859, 2196,  888,    0,  891, 2027,
     2016, 2029, 2020, 2019, 2014, 2011, 2022, 2012, 2010, 2017,
     2006, 2019, 2010, 2009, 2004, 2001, 2012, 2002, 2000, 2007,
     1996, 2009, 2000, 1999, 1994, 1991, 2002, 1992, 1990, 2017,

     2016, 2022, 2021, 1991, 1976, 1982, 1986, 1991, 1976, 1977,
     1983, 1974, 1986, 1977, 2010,  883, 2196, 2001, 2008, 2007,
      892, 2005, 1968,  900, 1968, 1981, 1980, 1975, 1970, 1975,
     1973, 1964, 1963, 1965, 1966, 1955, 1951, 1954, 1961, 1963,
     1954, 1961, 1964, 1946,  904, 1958, 1946, 1945, 1952, 1954,
     1945, 1952, 1955, 1937,  907, 1949, 1937, 1936, 1943, 1945,
     1936, 1943, 1946, 1928,  910, 1940, 1928, 1956,  905, 1955,
      906, 1961, 2196, 1960, 2196, 1927, 1919, 1921,  918, 1921,
     1934, 1929, 1924, 1929, 1927, 1918,  913, 1942,  914, 1949,
     1947, 2196,  926,  929, 1920, 1908, 1907, 1920, 1919, 1904,

     1915,  932, 1912, 1906, 1938,  935,  938,  941, 1903, 1901,
      945, 1935, 1902, 1897,  948,  951, 1902,  954, 1897, 1895,
      957, 1929, 1896, 1891,  960,  963, 1896,  966, 1891, 1889,
      969, 1923, 1890, 1885,  972,  975, 1890, 1875, 1892,  978,
     1890, 1878, 1891, 1890, 1875, 1886,  981,  984, 1889, 1876,
     1883, 1870, 1894,  987, 1793,  990, 1798, 1750, 1754,  993,
      996, 2196,  999, 1674, 1661, 1003, 1678, 1006, 1644, 1009,
     1624, 1012, 1616, 1601, 1015, 1636, 1018, 1598, 1021, 1595,
     1024, 1590, 1586, 1027, 1588, 1030, 1255, 1033, 1253, 1246,
     1249, 1262, 1256, 1243, 1267, 1036, 1252, 1254, 1241, 1263,

     1249, 1039, 1042, 1045, 1274, 1048, 1243, 1051, 1054, 1239,
     1057, 1241, 1060, 1063, 1237, 1066, 1239, 1069, 1072, 1235,
     1241, 1243, 1241, 1251, 1237, 1075, 1078, 1236, 1083, 1130,
     1236, 1133, 1136, 1260, 1139, 1225, 1142, 1145, 1148, 1224,
     1151, 1154, 1157, 1223, 1163, 1166, 1220, 1233, 1228, 1169,
     1149, 1176, 2196,    0, 1179, 1159, 1130,  890,  877,  864,
      837, 1182,  833, 1185,  832, 1188,  772,  741, 1191,  759,
     1194, 1197,  741,  709,  707,  704, 1200, 1203, 1206,  707,
      660, 1209, 1212,  638,  631,  563,  510, 1215, 1218, 1221,
      480,  462,  434, 1224,  427,  412,  389,  338, 1227, 1230,

      278, 1233,   93, 2196, 1236, 1239, 1242,    5, 1245, 1248,
     2196, 1251, 2196, 1292, 1303, 1314, 1325, 1336, 1347, 1358,
     1369, 1380, 1391, 1402, 1413, 1424, 1435, 1446, 1457, 1468,
     1479, 1490, 1501, 1512, 1523, 1534, 1545, 1556, 1567, 1578,
     1589, 1600, 1605, 1614, 1622, 1627, 1630, 1640, 1645, 1656,
     1667, 1678, 1689, 1700, 1711, 1722, 1733, 1744, 1755, 1766,
     1777, 1788, 1799, 1810, 1821, 1832, 1843, 1854, 1865, 1876,
     1887, 1898
    } ;

static yyconst short int yy_def[873] =
    {   0,
      814,  814,  815,  815,  816,  816,  817,  817,  818,  818,
      819,  819,  819,  819,  813,   15,  814,  814,  814,  814,
      813,   21,  813,   23,  813,   25,  814,  814,  813,   29,
      814,   31,  820,  820,  814,  814,  821,  821,  822,  822,
      823,  823,  814,  814,  814,  814,  824,  824,  825,  825,
      826,  826,  814,  814,  827,  827,  828,  828,  829,  829,
      830,  830,  831,  831,  832,  832,  833,  833,  834,  834,
      835,  835,  836,  836,  837,  837,  838,  838,  839,  839,
      813,  813,  840,  813,  813,  841,  842,  813,  841,  813,
      840,  813,  813,  813,  840,  813,  813,  813,  813,  840,

      813,  813,  813,  840,  813,  813,  813,  813,  813,  813,
      843,  813,  813,  844,  813,  813,  845,  813,  813,  813,
      846,  813,  813,  847,  813,  813,  848,  813,  813,  813,
      813,  813,  813,  813,  849,  813,  813,  813,  849,  849,
      849,  849,  849,  849,  849,  849,  129,  813,  849,  813,
      813,  813,  813,  813,  850,  851,  850,  850,  813,  840,
      813,  813,  813,  813,  840,  813,  813,  813,  813,  813,
      813,  852,  853,  813,  854,  813,  813,  813,  813,  813,
      813,  813,  840,  813,  813,  813,  813,  840,  813,  813,
      813,  855,  856,  813,  855,  855,  813,  813,  813,  857,

      858,  813,  857,  813,  840,  813,  813,  813,  813,  840,
      813,  813,  813,  208,  813,  840,  813,  813,  208,  859,
      860,  813,  859,  859,  861,  862,  813,  861,  861,  813,
      840,  813,  813,  208,  863,  864,  813,  863,  813,  840,
      813,  813,  208,  813,  840,  813,  813,  208,  813,  840,
      813,  813,  208,  813,  840,  813,  813,  208,  813,  840,
      813,  813,  208,  840,  813,  813,  813,  841,  842,  841,
      841,  841,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  843,  844,  813,  813,
      813,  813,  813,  845,  813,  813,  846,  813,  813,  847,

      813,  848,  848,  813,  129,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  849,  813,  813,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  147,  813,  813,
      813,  813,  849,  813,  813,  813,  813,  813,  850,  851,
      850,  850,  850,  813,  813,  813,  852,  853,  852,  854,
      813,  813,  865,  813,  813,  855,  855,  856,  855,  856,
      855,  855,  855,  813,  813,  813,  813,  857,  813,  858,
      857,  840,  857,  857,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  859,
      860,  859,  859,  859,  859,  859,  859,  859,  859,  859,

      859,  859,  859,  861,  862,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  813,  863,  864,
      863,  863,  863,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  866,  813,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  849,  813,
      813,  849,  813,  813,  813,  813,  813,  865,  856,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  859,
      859,  859,  859,  859,  859,  859,  859,  859,  859,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  867,

      868,  869,  870,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  871,  813,  813,
      813,  872,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  813,  813,  849,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  859,  859,  859,
      859,  859,  859,  859,  859,  859,  859,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  867,  813,  868,
      813,  869,  813,  870,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  871,  813,  813,
      872,  813,  849,  813,  849,  849,  849,  849,  849,  849,

      849,  849,  813,  813,  849,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  859,  859,  859,
      859,  859,  859,  859,  859,  859,  859,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  849,  849,
      849,  849,  849,  849,  849,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  859,  859,  859,  859,  859,  859,  859,  859,  859,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  813,
      813,  813,  813,  813,  813,  813,  813,  849,  849,  849,

      849,  849,  813,  849,  813,  813,  813,  813,  813,  813,
      859,  859,  859,  859,  859,  861,  861,  861,  861,  861,
      813,  813,  813,  813,  813,  813,  813,  849,  813,  849,
      849,  813,  813,  813,  813,  813,  813,  813,  859,  859,
      859,  859,  861,  861,  861,  861,  813,  813,  813,  813,
      813,  849,  813,  849,  813,  849,  813,  813,  813,  813,
      813,  813,  859,  859,  861,  861,  813,  813,  813,  813,
      813,  849,  813,  813,  813,  813,  813,  859,  861,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  859,  861,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,

      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,    0,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813
    } ;

static yyconst short int yy_nxt[2246] =
    {   0,
      813,   83,   83,   84,   84,   87,   87,   88,   88,   91,
       91,   92,   92,   85,   85,  298,  266,   89,   89,  267,
      298,   93,   93,   95,   95,   96,   96,  100,  100,  101,
      101,  271,   97,   97,  272,   98,   98,  278,  813,  102,
      102,  104,  104,  105,  105,  279,  104,  104,  109,  109,
      106,  106,  811,  107,  107,  106,  106,  273,  107,  107,
      274,  327,  108,  108,  270,  333,  264,  110,  110,   82,
       83,   82,   84,   82,   82,   82,   82,   82,   82,   82,
       82,  111,   85,  111,  111,   82,   82,   82,   82,   82,
       82,   82,   82,  111,  111,  111,  111,  111,  111,  111,

      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,   82,   82,   82,   83,  112,
      113,   83,  112,  113,   83,  114,  113,  808,  114,   83,
       85,  113,   83,   85,   84,   83,   85,   84,  445,  115,
      276,   85,  115,  277,   85,  115,  276,   85,  446,  277,
      115,   82,   83,  116,   84,   82,   82,   82,  117,   82,
       82,  117,   82,   82,   85,  117,  118,  119,   82,   82,
       82,   82,  117,   82,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  120,   82,   82,

       82,   83,   82,   84,   82,   82,   82,  121,   82,   82,
      121,  122,   82,   85,  121,   82,  122,   82,   82,   82,
       82,  121,   82,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,   82,   82,   82,   82,
       83,  123,   84,   82,   82,   82,   82,   82,   82,  124,
      125,  124,   85,  124,   82,  119,  124,   82,  124,   82,
       82,   82,   82,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  120,   82,   82,   83,  126,

       84,  281,  127,  284,  282,   83,  126,   84,  128,  127,
       85,  285,  371,  128,  372,  128,  301,   85,  806,  302,
      128,   82,   83,  129,  130,  131,   82,   82,  132,  133,
       82,  132,  134,  135,  136,  135,  135,  134,  137,  134,
       82,   82,  138,   82,   82,  135,  135,  139,  135,  140,
      135,  135,  135,  141,  135,  135,  135,  142,  143,  135,
      144,  145,  146,  135,  135,  135,  135,   82,   82,  135,
      147,  156,  364,  157,  148,  156,  291,  157,   82,  160,
      365,   84,   82,  158,  160,  804,   84,  158,  173,  292,
      174,  161,  175,  173,  331,  174,  161,  175,  298,  162,

      176,  163,  299,  298,  162,  176,  163,  341,  341,  149,
       83,  150,   84,  334,  264,  264,   83,  151,   84,  332,
      293,  803,   85,  315,  152,  152,  315,  317,   85,   83,
      318,   84,  454,  177,  178,  153,  455,  335,  177,  178,
       83,   85,   84,  306,  306,  306,  293,  802,   83,  154,
       84,  336,   85,  801,  307,  152,  165,  166,  167,  166,
       85,  179,  180,  168,  169,  392,  170,  264,  171,  165,
      166,  167,  166,  799,  179,  180,  168,  169,  183,  170,
      184,  171,  183,  444,  184,  181,  188,  460,   84,  188,
      185,   84,  323,  181,  185,  324,  798,  342,  189,  186,

      343,  189,  190,  186,  191,  190,  193,  191,  194,  201,
      193,  202,  194,  328,  201,  195,  202,  329,  196,  195,
      797,  203,  196,   83,  197,   84,  203,   83,  197,   84,
      331,  205,  198,  206,  266,  199,  198,  267,  205,  199,
      206,  447,  210,  207,  211,  266,  796,  210,  267,  211,
      207,  448,  330,  212,  213,  332,  278,  208,  212,  213,
      216,  216,  217,  217,  279,  221,  214,  222,  406,  221,
      264,  222,  218,  218,  226,  352,  227,  223,  353,  299,
      219,  223,  226,  231,  227,  232,  228,  231,  224,  232,
      236,  236,  237,  237,  228,  233,  240,  266,  241,  233,

      354,  229,  238,  238,  795,  240,  234,  241,  242,  245,
      245,  246,  246,  250,  250,  251,  251,  242,  255,  284,
      256,  247,  247,  293,  243,  252,  252,  285,  266,  248,
      257,  267,  255,  253,  256,  260,  260,  261,  261,  306,
      306,  306,  357,  362,  257,  361,  363,  262,  262,  447,
      307,  258,  344,  344,  344,  263,  305,  306,  306,  448,
      291,  345,  344,  344,  344,  794,  449,  307,  346,  346,
      346,  345,  349,  292,  264,  266,  264,  793,  367,  359,
      308,  264,  309,  421,  264,  264,  310,  375,  360,  369,
      376,  311,  792,  312,  313,  314,  373,  465,  466,  374,

      386,  386,  386,  387,  293,  467,  388,  389,  389,  389,
      266,  393,  407,  267,  394,  408,  520,  264,  264,  377,
      418,  418,  418,  378,  266,  422,  521,  267,  423,  379,
      380,  791,  381,  382,  383,  384,  787,  385,  395,  424,
      424,  424,  396,  266,  266,  786,  267,  267,  397,  398,
      785,  399,  400,  401,  402,  331,  403,  409,  425,  425,
      425,  410,  426,  426,  426,  784,  266,  411,  412,  267,
      413,  414,  415,  416,  782,  417,  427,  427,  427,  266,
      332,  781,  267,  428,  428,  428,  266,  431,  270,  267,
      264,  285,  334,  301,  432,  279,  302,  780,  432,  306,

      306,  306,  435,  440,  315,  436,  441,  315,  500,  501,
      307,  344,  344,  344,  502,  503,  335,  346,  346,  346,
      345,  346,  346,  346,  349,  359,  264,  264,  264,  357,
      336,  359,  361,  264,  360,  357,  264,  364,  361,  371,
      360,  372,  509,  469,  470,  365,  510,  471,  386,  386,
      386,  389,  389,  389,  392,  480,  264,  406,  481,  264,
      490,  465,  466,  491,  418,  418,  418,  779,  778,  264,
      264,  421,  777,  264,  424,  424,  424,  425,  425,  425,
      426,  426,  426,  427,  427,  427,  428,  428,  428,  515,
      465,  466,  359,  587,  264,  447,  517,  516,  467,  776,

      517,  360,  594,  594,  594,  521,  615,  615,  615,  625,
      615,  625,  635,  615,  635,  569,  571,  775,  573,  575,
      594,  594,  594,  587,  589,  774,  517,  592,  648,  648,
      648,  594,  594,  594,  656,  656,  656,  660,  660,  660,
      661,  661,  661,  663,  663,  663,  662,  666,  666,  666,
      615,  615,  615,  670,  670,  670,  672,  663,  672,  675,
      666,  675,  625,  615,  625,  679,  670,  679,  681,  663,
      681,  684,  666,  684,  635,  615,  635,  688,  670,  688,
      648,  648,  648,  656,  656,  656,  648,  648,  648,  703,
      703,  703,  656,  656,  656,  660,  660,  660,  661,  661,

      661,  663,  663,  663,  662,  666,  666,  666,  708,  708,
      708,  670,  670,  670,  672,  663,  672,  675,  666,  675,
      713,  708,  713,  679,  670,  679,  681,  663,  681,  684,
      666,  684,  718,  708,  718,  688,  670,  688,  703,  703,
      703,  732,  732,  732,  703,  703,  703,  733,  733,  733,
      735,  735,  735,  708,  708,  708,  737,  737,  737,  739,
      735,  739,  713,  708,  713,  741,  737,  741,  743,  735,
      743,  718,  708,  718,  745,  737,  745,  732,  732,  732,
      733,  733,  733,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  754,  753,  316,  754,  753,

      753,  753,  753,  753,  753,  753,  753,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  753,
      753,  754,  755,  755,  755,  732,  732,  732,  733,  733,
      733,  735,  735,  735,  737,  737,  737,  762,  762,  762,
      739,  735,  739,  741,  737,  741,  764,  762,  764,  743,
      735,  743,  757,  773,  758,  745,  737,  745,  766,  762,
      766,  755,  755,  755,  772,  759,  770,  760,  771,  771,
      771,  755,  755,  755,  762,  762,  762,  764,  762,  764,
      766,  762,  766,  771,  771,  771,  771,  771,  771,  783,

      783,  783,  788,  788,  788,  789,  788,  789,  790,  788,
      790,  783,  783,  783,  783,  783,  783,  788,  788,  788,
      789,  788,  789,  790,  788,  790,  800,  800,  800,  805,
      805,  805,  800,  800,  800,  807,  807,  807,  805,  805,
      805,  809,  809,  809,  807,  807,  807,  809,  809,  809,
      812,  812,  812,  812,  812,  812,  769,  768,  767,  765,
      763,  761,  734,  756,  752,  751,  750,  749,  748,  747,
      746,  744,  742,  740,  738,  736,  734,  731,  730,  729,
      728,  727,  726,  725,  724,  810,  723,  722,  721,  720,
      719,  810,   82,   82,   82,   82,   82,   82,   82,   82,

       82,   82,   82,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  172,  172,  172,  172,  172,  172,  172,  172,  172,

      172,  172,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,

      225,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  268,
      685,  268,  268,  268,  268,  268,  268,  268,  268,  268,

      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  287,  287,  287,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  294,  717,  294,  716,  294,
      297,  715,  297,  714,  297,  300,  300,  300,  676,  300,
      303,  712,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  316,  316,  316,  711,  316,  339,  339,  339,  339,
      710,  339,  339,  339,  339,  339,  339,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  347,  709,
      667,  347,  347,  347,  347,  347,  347,  347,  347,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,

      350,  707,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  356,  706,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  390,  659,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  404,  705,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  419,

      659,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  468,  704,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  588,  588,  588,
      588,  588,  588,  588,  588,  588,  588,  588,  591,  591,

      591,  591,  591,  591,  591,  591,  591,  591,  591,  702,
      701,  700,  699,  698,  697,  696,  695,  694,  693,  692,
      691,  690,  689,  687,  686,  685,  683,  682,  680,  678,
      677,  676,  674,  673,  671,  669,  668,  667,  665,  664,
      659,  658,  657,  655,  654,  653,  652,  651,  650,  649,
      592,  590,  589,  647,  646,  645,  644,  643,  642,  641,
      640,  639,  638,  575,  573,  571,  569,  637,  636,  634,
      633,  632,  631,  630,  629,  628,  627,  626,  624,  623,
      622,  621,  620,  619,  618,  617,  616,  614,  613,  612,
      611,  610,  609,  608,  607,  606,  605,  604,  603,  602,

      601,  600,  599,  598,  597,  596,  595,  593,  592,  590,
      590,  589,  515,  586,  585,  584,  583,  582,  581,  580,
      579,  578,  577,  576,  575,  573,  571,  569,  567,  566,
      565,  564,  563,  562,  561,  560,  559,  558,  557,  556,
      555,  554,  553,  552,  551,  550,  549,  548,  547,  546,
      545,  544,  543,  542,  541,  540,  539,  538,  537,  536,
      535,  534,  533,  532,  531,  530,  529,  528,  527,  526,
      525,  524,  523,  522,  518,  514,  513,  512,  511,  508,
      507,  506,  445,  505,  504,  431,  499,  498,  497,  496,
      495,  494,  493,  492,  489,  488,  487,  486,  485,  484,

      483,  482,  479,  478,  477,  476,  475,  474,  473,  472,
      369,  369,  265,  369,  369,  366,  357,  357,  357,  357,
      351,  464,  463,  338,  337,  462,  461,  459,  458,  457,
      456,  453,  452,  451,  450,  444,  443,  442,  439,  438,
      437,  304,  304,  296,  295,  296,  295,  289,  434,  433,
      430,  429,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  369,  366,  357,  265,  355,  265,  351,  265,
      265,  338,  337,  327,  326,  325,  322,  321,  320,  319,
      304,  296,  295,  290,  289,  286,  283,  280,  265,  265,
      275,  265,  265,  265,  813,   81,  813,  813,  813,  813,

      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813
    } ;

static yyconst short int yy_chk[2246] =
    {   0,
        0,    1,    2,    1,    2,    3,    4,    3,    4,    5,
        6,    5,    6,    1,    2,  122,   85,    3,    4,   85,
      122,    5,    6,    7,    8,    7,    8,    9,   10,    9,
       10,   89,    7,    8,   89,    7,    8,  105,    0,    9,
       10,   11,   12,   11,   12,  105,   13,   14,   13,   14,
       11,   12,  808,   11,   12,   13,   14,   93,   13,   14,
       93,  149,   11,   12,   87,  149,   87,   13,   14,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   17,   17,
       17,   18,   18,   18,   19,   17,   19,  803,   18,   20,
       17,   20,   35,   18,   35,   36,   19,   36,  317,   17,
       98,   20,   18,   98,   35,   19,  102,   36,  317,  102,
       20,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   27,   27,

       27,  107,   27,  109,  107,   28,   28,   28,   27,   28,
       27,  109,  201,   27,  201,   28,  126,   28,  801,  126,
       28,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       30,   33,  197,   33,   30,   34,  116,   34,   33,   37,
      197,   37,   34,   33,   38,  798,   38,   34,   41,  116,
       41,   37,   41,   42,  148,   42,   38,   42,  298,   37,

       41,   37,  123,  298,   38,   42,   38,  156,  340,   30,
       31,   31,   31,  150,  156,  340,   43,   31,   43,  148,
      116,  797,   31,  132,   31,   31,  132,  136,   43,   44,
      136,   44,  323,   41,   41,   31,  323,  150,   42,   42,
       45,   44,   45,  130,  130,  130,  123,  796,   46,   31,
       46,  150,   45,  795,  130,   31,   39,   39,   39,   39,
       46,   43,   43,   39,   39,  221,   39,  221,   39,   40,
       40,   40,   40,  793,   44,   44,   40,   40,   47,   40,
       47,   40,   48,  330,   48,   45,   49,  330,   49,   50,
       47,   50,  143,   46,   48,  143,  792,  158,   49,   47,

      158,   50,   49,   48,   49,   50,   51,   50,   51,   55,
       52,   55,   52,  147,   56,   51,   56,  147,   51,   52,
      791,   55,   52,   53,   53,   53,   56,   54,   54,   54,
      329,   57,   53,   57,  161,   53,   54,  161,   58,   54,
       58,  436,   59,   57,   59,  171,  787,   60,  171,   60,
       58,  436,  147,   59,   59,  329,  278,   58,   60,   60,
       61,   62,   61,   62,  278,   63,   60,   63,  226,   64,
      226,   64,   61,   62,   65,  176,   65,   63,  176,  299,
       62,   64,   66,   67,   66,   67,   65,   68,   64,   68,
       69,   70,   69,   70,   66,   67,   71,  185,   71,   68,

      185,   66,   69,   70,  786,   72,   68,   72,   71,   73,
       74,   73,   74,   75,   76,   75,   76,   72,   77,  284,
       77,   73,   74,  299,   72,   75,   76,  284,  189,   74,
       77,  189,   78,   76,   78,   79,   80,   79,   80,  131,
      131,  131,  195,  196,   78,  195,  196,   79,   80,  318,
      131,   78,  166,  166,  166,   80,  129,  129,  129,  318,
      291,  166,  167,  167,  167,  785,  318,  129,  170,  170,
      170,  167,  173,  291,  173,  199,  173,  784,  199,  193,
      129,  193,  129,  236,  173,  236,  129,  207,  193,  203,
      207,  129,  781,  129,  129,  129,  203,  352,  352,  203,

      212,  212,  212,  213,  291,  352,  213,  217,  217,  217,
      218,  223,  228,  218,  223,  228,  448,  173,  173,  208,
      232,  232,  232,  208,  233,  238,  448,  233,  238,  208,
      208,  780,  208,  208,  208,  208,  776,  208,  224,  241,
      241,  241,  224,  242,  247,  775,  242,  247,  224,  224,
      774,  224,  224,  224,  224,  331,  224,  229,  246,  246,
      246,  229,  251,  251,  251,  773,  252,  229,  229,  252,
      229,  229,  229,  229,  770,  229,  256,  256,  256,  257,
      331,  768,  257,  261,  261,  261,  262,  279,  269,  262,
      269,  285,  334,  301,  285,  279,  301,  767,  279,  306,

      306,  306,  307,  311,  315,  307,  311,  315,  429,  429,
      306,  344,  344,  344,  430,  430,  334,  345,  345,  345,
      344,  346,  346,  346,  348,  358,  348,  358,  348,  357,
      334,  360,  357,  360,  358,  362,  348,  364,  362,  370,
      360,  370,  440,  360,  377,  364,  440,  377,  386,  386,
      386,  389,  389,  389,  391,  395,  391,  405,  395,  405,
      409,  465,  465,  409,  418,  418,  418,  765,  763,  348,
      348,  420,  761,  420,  424,  424,  424,  425,  425,  425,
      426,  426,  426,  427,  427,  427,  428,  428,  428,  445,
      467,  467,  469,  516,  469,  521,  516,  445,  467,  760,

      445,  469,  524,  524,  524,  521,  545,  545,  545,  555,
      555,  555,  565,  565,  565,  569,  571,  759,  569,  571,
      579,  579,  579,  587,  589,  758,  587,  589,  593,  593,
      593,  594,  594,  594,  602,  602,  602,  606,  606,  606,
      607,  607,  607,  608,  608,  608,  607,  611,  611,  611,
      615,  615,  615,  616,  616,  616,  618,  618,  618,  621,
      621,  621,  625,  625,  625,  626,  626,  626,  628,  628,
      628,  631,  631,  631,  635,  635,  635,  636,  636,  636,
      640,  640,  640,  647,  647,  647,  648,  648,  648,  654,
      654,  654,  656,  656,  656,  660,  660,  660,  661,  661,

      661,  663,  663,  663,  661,  666,  666,  666,  668,  668,
      668,  670,  670,  670,  672,  672,  672,  675,  675,  675,
      677,  677,  677,  679,  679,  679,  681,  681,  681,  684,
      684,  684,  686,  686,  686,  688,  688,  688,  696,  696,
      696,  702,  702,  702,  703,  703,  703,  704,  704,  704,
      706,  706,  706,  708,  708,  708,  709,  709,  709,  711,
      711,  711,  713,  713,  713,  714,  714,  714,  716,  716,
      716,  718,  718,  718,  719,  719,  719,  726,  726,  726,
      727,  727,  727,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,

      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  730,  730,  730,  732,  732,  732,  733,  733,
      733,  735,  735,  735,  737,  737,  737,  738,  738,  738,
      739,  739,  739,  741,  741,  741,  742,  742,  742,  743,
      743,  743,  733,  757,  733,  745,  745,  745,  746,  746,
      746,  750,  750,  750,  756,  733,  751,  733,  752,  752,
      752,  755,  755,  755,  762,  762,  762,  764,  764,  764,
      766,  766,  766,  769,  769,  769,  771,  771,  771,  772,

      772,  772,  777,  777,  777,  778,  778,  778,  779,  779,
      779,  782,  782,  782,  783,  783,  783,  788,  788,  788,
      789,  789,  789,  790,  790,  790,  794,  794,  794,  799,
      799,  799,  800,  800,  800,  802,  802,  802,  805,  805,
      805,  806,  806,  806,  807,  807,  807,  809,  809,  809,
      810,  810,  810,  812,  812,  812,  749,  748,  747,  744,
      740,  736,  734,  731,  728,  725,  724,  723,  722,  721,
      720,  717,  715,  712,  710,  707,  705,  701,  700,  699,
      698,  697,  695,  694,  693,  806,  692,  691,  690,  689,
      687,  809,  814,  814,  814,  814,  814,  814,  814,  814,

      814,  814,  814,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  816,  816,  816,  816,  816,  816,
      816,  816,  816,  816,  816,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  823,  823,  823,  823,  823,  823,  823,  823,  823,

      823,  823,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,

      832,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  835,  835,  835,  835,  835,  835,  835,
      835,  835,  835,  835,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  841,
      685,  841,  841,  841,  841,  841,  841,  841,  841,  841,

      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  843,  843,  843,  844,  844,  844,  844,  844,  844,
      844,  844,  844,  844,  844,  845,  683,  845,  682,  845,
      846,  680,  846,  678,  846,  847,  847,  847,  676,  847,
      848,  674,  848,  848,  848,  848,  848,  848,  848,  848,
      848,  849,  849,  849,  673,  849,  850,  850,  850,  850,
      671,  850,  850,  850,  850,  850,  850,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  852,  669,
      667,  852,  852,  852,  852,  852,  852,  852,  852,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,

      854,  665,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  855,  664,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  856,  856,  856,  856,  856,  856,  856,  856,
      856,  856,  856,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  859,  659,  859,  859,  859,
      859,  859,  859,  859,  859,  859,  860,  860,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  861,  658,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  862,  862,
      862,  862,  862,  862,  862,  862,  862,  862,  862,  863,

      657,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  865,  655,  865,  865,  865,  865,  865,  865,  865,
      865,  865,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  867,  867,  867,  867,  867,  867,  867,
      867,  867,  867,  867,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  871,  871,  872,  872,

      872,  872,  872,  872,  872,  872,  872,  872,  872,  653,
      652,  651,  650,  649,  646,  645,  644,  643,  642,  641,
      639,  638,  637,  634,  633,  632,  630,  629,  627,  624,
      623,  622,  620,  619,  617,  614,  613,  612,  610,  609,
      605,  604,  603,  601,  600,  599,  598,  597,  596,  595,
      591,  590,  588,  586,  585,  584,  583,  582,  581,  580,
      578,  577,  576,  574,  572,  570,  568,  567,  566,  564,
      563,  562,  561,  560,  559,  558,  557,  556,  554,  553,
      552,  551,  550,  549,  548,  547,  546,  544,  543,  542,
      541,  540,  539,  538,  537,  536,  535,  534,  533,  532,

      531,  530,  529,  528,  527,  526,  525,  523,  522,  520,
      519,  518,  515,  514,  513,  512,  511,  510,  509,  508,
      507,  506,  505,  504,  503,  502,  501,  500,  499,  498,
      497,  496,  495,  494,  493,  492,  491,  490,  489,  488,
      487,  486,  485,  484,  483,  482,  481,  480,  479,  478,
      477,  476,  475,  474,  473,  472,  471,  470,  464,  463,
      462,  461,  460,  459,  458,  457,  456,  455,  454,  453,
      452,  451,  450,  449,  446,  444,  443,  442,  441,  439,
      438,  437,  435,  434,  433,  431,  417,  416,  415,  414,
      413,  412,  411,  410,  403,  402,  401,  400,  399,  398,

      397,  396,  385,  384,  383,  382,  381,  380,  379,  378,
      374,  373,  372,  371,  368,  365,  363,  361,  359,  356,
      350,  338,  337,  336,  335,  333,  332,  327,  326,  325,
      324,  322,  321,  320,  319,  314,  313,  312,  310,  309,
      308,  303,  302,  296,  295,  293,  292,  288,  286,  283,
      274,  273,  264,  260,  255,  250,  245,  240,  231,  216,
      210,  205,  200,  198,  192,  188,  186,  183,  175,  165,
      160,  154,  153,  146,  145,  144,  142,  141,  140,  139,
      127,  120,  118,  115,  114,  110,  108,  106,  104,  100,
       97,   95,   91,   83,   81,  813,  813,  813,  813,  813,

      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
yy_lp = yy_full_lp; /* restore orig. accepting pos. */ \
yy_state_ptr = yy_full_state; /* restore orig. state */ \
yy_current_state = *yy_state_ptr; /* restore curr. state */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "cpp.l"
#define INITIAL 0
/*************************************************************************

    CPP lexer

    The file is derived from the DOC++ source by Roland Wunderling
    and Malte Zoeckler.

    Better handling of typedefs, linenumbers, formatting, comments
    and various other improvements was made. Still a lot to be done
    to handle all modern C++ constructs. <bjarke@viksoe.dk>

 *************************************************************************/
#line 16 "cpp.l"

#pragma code_seg( "MISC" )

/*
 *	Includes
 */

#include "CppTypes.h"


/* -----------------------------------------------------------------
 *
 *	statics
 */
static const char*	inputString ;
static int		inputPosition ;
static int		lastContext ;
static int		lastCContext ;
static int		lastTContext;
static int		protection   = GLOB ;
static int		bracketCount = 0 ;
static int		sharpCount   = 0 ;
static Entry*		current_root = 0 ;
static Entry*		global_root  = 0 ;
static Entry*		current      = 0 ;

static int		yyLineNr = 1 ;
static char		yyFileName[264] ;
static McString*	currentString ;

static void msg( const char* str, const char* str2=NULL )
{
#ifdef _DEBUG
	if( verb )
	{
		printf( "%s(%d):\t%s", yyFileName, yyLineNr, str ) ;
		if( str2 ) printf( "%s", str2 ) ;
		printf( "\n" ) ;
	}
#endif
}

static void lineCount()
{
	for( const char* c = yytext ; *c ; ++c )
		yyLineNr += (*c == '\n') ;
}


static void addType( Entry* current )
{
   if( !current->name.empty() ) {
      if( !current->type.empty() ) current->type += ' ' ;
      current->type += current->name ;
      current->name.clear() ;
   }
   if( !current->args.empty() ) {
      if( !current->type.empty() ) current->type += ' ' ;
      current->type += current->args ;
      current->args.clear() ;
   }
}

/* -----------------------------------------------------------------
 */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result = yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
	int c = 0;
	while( c < max_size && inputString[inputPosition] )
	{
		*buf = inputString[inputPosition++] ;
		c++; buf++;
	}
	return c;
}

#define Cxx_Memo 1

#define SubDoc 2

#define SubDocComment 3

#define SubDocCppComment 4

#define Doc 5

#define VerbDoc 6

#define Define 7

#define DefineEnd 8

#define DefineEnded 9

#define ClassName 10

#define TypedefName 11

#define Bases 12

#define NextSemi 13

#define FindMembers 14

#define Function 15

#define Operator 16

#define Throws 17

#define Array 18

#define Round 19

#define Curly 20

#define SkipCurly 21

#define SkipInits 22

#define SkipCPP 23

#define Sharp 24

#define Comment 25

#define SkipComment 26

#define SkipCxxComment 27

#define CppDoc 28

#define CppMemo 29

#define See 30

#define Args 31

#define Type 32

#define Author 33

#define Name 34

#define Version 35

#define Param 36

#define Memo 37

#define Return 38

#define Exception 39

#line 1448 "lex.cpp.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplusx
//#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 142 "cpp.l"


#line 1605 "lex.cpp.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 814 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 813 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yy_looking_for_trail_begin )
					{
					if ( yy_act == yy_looking_for_trail_begin )
						{
						yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					yy_full_match = yy_cp;
					yy_full_state = yy_state_ptr;
					yy_full_lp = yy_lp;
					break;
					}
				++yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 144 "cpp.l"
{ 
					  yyLineNr = 1 ; 
					  int i;
					  for( i = 0 ; yytext[i+1] != 6 ; i++ )
						yyFileName[i] = yytext[i+1] ;
					  yyFileName[i] = 0 ;
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 152 "cpp.l"
{ BEGIN( FindMembers ) ; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 153 "cpp.l"

	YY_BREAK
case 4:
YY_RULE_SETUP
#line 155 "cpp.l"
{ 
					  current->protection = protection = PUBL ;
					  lineCount() ;
					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 159 "cpp.l"
{ 
					  current->protection = protection = PROT ;
					  lineCount() ;
					}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 163 "cpp.l"
{ 
					  current->protection = protection = PRIV ;
					  lineCount() ;
					}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 168 "cpp.l"
{
					  msg( "found class    ", current->name ) ;
					  current->section = TYPEDEF_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef class" ;
					  current->name.clear() ;
					  lineCount() ;
					}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 177 "cpp.l"
{
					  msg( "found struct   ", current->name ) ;
					  current->section = STRUCT_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef struct" ;
					  current->name.clear() ;
					  lastTContext = 1;
					  lineCount() ;
				  	  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 187 "cpp.l"
{
					  msg( "found struct   ", current->name ) ;
					  current->section = STRUCT_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef struct" ;
					  current->name.clear() ;
					  lineCount() ;
					  current->file = yyFileName ;
					  current->startLine = yyLineNr ;
					  lastTContext = 1;
				  	  BEGIN( Curly ) ;
					}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 200 "cpp.l"
{
					  msg( "found enum     ", current->name ) ;
					  current->section = ENUM_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef enum" ;
					  current->name.clear() ;
					  lineCount() ;
				  	  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 210 "cpp.l"
{
					  msg( "found union    ", current->name ) ;
					  current->section = UNION_SEC ;
					  current->lineNo = yyLineNr;
					  current->type = "typedef union" ;
					  current->name.clear() ;
					  lineCount() ;
				  	  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 220 "cpp.l"
{ 
					  current->section = CLASS_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "interface" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 229 "cpp.l"
{ 
					  current->section = CLASS_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "class" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 238 "cpp.l"
{ 
					  current->section = STRUCT_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "struct" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 247 "cpp.l"
{ 
					  current->section = ENUM_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "enum" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 256 "cpp.l"
{ 
					  current->section = UNION_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "union" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 17:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 266 "cpp.l"
{ 
					  addType( current ) ;
					  current->lineNo = yyLineNr;
					  current->name  = yytext ;
					  BEGIN( Operator ) ;
					}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 272 "cpp.l"
{ 
					  current->name += yytext ;
					  current->lineNo = yyLineNr;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 278 "cpp.l"
{ 
					  addType( current ) ;
				          current->lineNo = yyLineNr;
					  current->name  = yytext ;
					}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 284 "cpp.l"
{ BEGIN( SkipCPP ) ; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 285 "cpp.l"

	YY_BREAK
case 22:
YY_RULE_SETUP
#line 286 "cpp.l"

	YY_BREAK
case 23:
YY_RULE_SETUP
#line 287 "cpp.l"
{ yyLineNr++ ; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 288 "cpp.l"
{ 
					  yyLineNr++ ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 293 "cpp.l"
{ 
					  current->type = "using " ;
					  BEGIN( Define ) ;
					}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 297 "cpp.l"
{ 
					  current->type = "#define" ;
					  BEGIN( Define ) ;
					}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 301 "cpp.l"
{ 
					  current->name = yytext ;
					  current->lineNo = yyLineNr;
					  BEGIN( DefineEnd ) ;
					}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 306 "cpp.l"
{ BEGIN( DefineEnd ) ; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 307 "cpp.l"
{ 
					  current->args = yytext ;
					  BEGIN( DefineEnded ) ;
					}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 311 "cpp.l"
{ yyLineNr++ ; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 312 "cpp.l"
{ 
					  if( current->done == onlyDocs )
					  {
					    current->section = MACRO_SEC ;
					    current->lineNo = yyLineNr;
					    msg( "found macro    ", current->name ) ;
					    current_root->addSubEntry( current ) ;
					    current = new Entry ;
					    current->protection = protection ;
					  }
					  else
					  {
					    current->name.clear() ;
					    current->type.clear() ;
					  }
					  yyLineNr++ ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 331 "cpp.l"
{ 
					  current->name += yytext ; 
					  current->lineNo = yyLineNr;
					}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 336 "cpp.l"
{ 
					  BEGIN( FindMembers ) ;
					  if( current->lineNo == 0 ) current->lineNo = yyLineNr + 1;
					  msg( "found variable ", current->name ) ;
					  if( current->done == onlyDocs )
					  {
					    if( current->section != TYPEDEF_SEC )
						    current->section = VARIABLE_SEC ;
					    current_root->addSubEntry( current ) ;
					    current = new Entry ;
					    current->protection = protection ;
					  }
					  else
					  {
					    current->section = EMPTY_SEC ;
					    current->name.clear() ;
					    current->type.clear() ;
					    current->args.clear() ;
					  }
					  if( *yytext == '=' )
					    BEGIN( NextSemi ) ;
					}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 359 "cpp.l"
{ 
					  current->args += yytext ;
					  sharpCount=1;
					  BEGIN( Array ) ;
					}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 364 "cpp.l"
{ 
					  current->args += *yytext ;
					  if( --sharpCount<=0 )
						BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 369 "cpp.l"
{ 
					  current->args += *yytext ;
					  sharpCount++;	
					}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 373 "cpp.l"
{ current->args += *yytext ; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 375 "cpp.l"
{ 
					  addType( current ) ;
					  current->type += *yytext ;
					  sharpCount=1;
					  BEGIN( Sharp ) ;
					}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 381 "cpp.l"
{ 
					  current->type += *yytext ;
					  if (--sharpCount<=0)
	                                     BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 386 "cpp.l"
{ 
					  current->type += *yytext ;
					  sharpCount++;	
					}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 390 "cpp.l"
{ current->type += *yytext ; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 392 "cpp.l"
{ current->program += yytext ; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 393 "cpp.l"
{ current->program += yytext ; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 394 "cpp.l"
{ current->program += yytext ; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 395 "cpp.l"
{ 
					  current->program += yytext ;
					  lastContext = Curly ;
					  BEGIN( Comment ) ;
					}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 400 "cpp.l"
{ 
					  current->program += yytext ;
					  ++yyLineNr ;
					  lastContext = Curly ;
					  BEGIN( Comment ) ;
					}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 406 "cpp.l"
{ 
					  current->program += yytext ;
					  ++bracketCount ;
					}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 410 "cpp.l"
{ 
					  if( bracketCount > 0 )
					  {
						current->program += yytext ;
						--bracketCount ;
					  }
					  else
					  {
					    current->args += " {...}";

					    if( lastTContext ) 
					    {
					      BEGIN( TypedefName ) ;
					    }
					    else if( current->done == onlyDocs )
					    {
					      int section = current->section;
					      current_root->addSubEntry( current ) ;
					      current = new Entry ;
					      current->protection = protection ;
					      if( section == CLASS_SEC ) current->protection = GLOB ;
					      BEGIN( NextSemi ) ;
					    }
					    else
					    {
					      current->name.clear() ;
					      current->type.clear() ;
					      current->args.clear() ;
					      current->section = EMPTY_SEC ;
					      BEGIN( NextSemi ) ;
					    }
					  }
					}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 443 "cpp.l"
{ 
					  current->program += yytext ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 447 "cpp.l"
{ current->program += yytext ; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 449 "cpp.l"
{ 
					  current->args = yytext ;
					  BEGIN( Round ) ;
					}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 453 "cpp.l"
{ 
					  current->args += *yytext ;
					  ++bracketCount ;
					}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 457 "cpp.l"
{ 
					  current->args += *yytext ;
					  if( bracketCount > 0 )
					    --bracketCount ;
					  else
					    BEGIN( Function ) ;
					}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 464 "cpp.l"
{ lineCount() ; current->args += ", " ; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 465 "cpp.l"
{ lineCount() ; current->args += " " ; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 466 "cpp.l"
{ current->args += *yytext ; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 468 "cpp.l"
{ lineCount() ; current->args += " const " ; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 470 "cpp.l"
{ 
					  current->args += " throw(" ;
					  lineCount() ;
				  	  BEGIN( Round ) ;
					}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 475 "cpp.l"
{ 
					  current->type += current->name ;
					  current->name  = current->args ;
					  current->args  = yytext ;
					  current->lineNo = yyLineNr;
					  BEGIN( Round ) ;
					}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 482 "cpp.l"
{ 
					  msg( "found method   ", current->name ) ;
					  if( current->done == onlyDocs )
					  {
					    current->section = FUNCTION_SEC ;
					    current_root->addSubEntry(current);
					    current = new Entry ;
					    current->protection = protection ;
					  }
					  else
					  {
					    current->name.clear() ;
					    current->type.clear() ;
					    current->args.clear() ;
					  }
					  if( *yytext == '{' )
					      BEGIN( SkipCurly ) ;
					  else if( *yytext == ':' )
					      BEGIN( SkipInits ) ;
					  else
					      BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 505 "cpp.l"
{ BEGIN( SkipCurly ) ; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 506 "cpp.l"
{ ++bracketCount ; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 507 "cpp.l"
{ 
					  if( bracketCount > 0 )
					    --bracketCount ;
					  else
					    BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 514 "cpp.l"
{ 
					  if( current->done == onlyDocs )
					  {
					    current->section = VARIABLE_SEC ;
					    current_root->addSubEntry(current);
					    current = new Entry ;
					    current->protection = protection ;
					  }
					  else
					  {
					    current->section = EMPTY_SEC ;
					    current->type.clear() ;
					    current->name.clear() ;
					    current->args.clear() ;
					  }
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 531 "cpp.l"
{ 
					  if( !current->type.empty() && !current->name.empty() ) current->type += " " ;
					  current->type += current->name ;
				  	  current->name = yytext ;
					  current->lineNo = yyLineNr;
					}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 537 "cpp.l"
{ 
					  current->args = " :" ;
					  BEGIN( Bases ) ;
					}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 541 "cpp.l"
{ 
					  current->file = yyFileName ;
				  	  if( current->lineNo == 0 ) current->lineNo = yyLineNr;
					  current->startLine = yyLineNr ;
				  	  msg( "found class    ", current->name ) ;
				  	  BEGIN( Curly ) ;
					}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 548 "cpp.l"
{ 
					  current->extends.append( new McString(yytext) ) ;
					  if( !current->args.empty() ) current->args += " " ;
					  current->args += yytext ;
					}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 553 "cpp.l"
{ current->args += ',' ; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 555 "cpp.l"
{ 
					  current->program += yytext ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 559 "cpp.l"
{ current->program += yytext ; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 560 "cpp.l"
{ 
					  current->program += yytext ;
					  BEGIN( Curly ) ;
					}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 565 "cpp.l"
{ 
					  if( !current->type.empty() && !current->name.empty() ) current->type += " " ;
					  current->type += current->name ;
				  	  current->name = yytext ;
					  current->lineNo = yyLineNr;
		
				          lastTContext = 0;
					  msg( "found typedef  ", current->name ) ;

				          int section = current->section;
					  current_root->addSubEntry( current ) ;
					  current = new Entry ;
					  current->protection = protection ;
					  if( section == CLASS_SEC ) current->protection = GLOB ;

					  BEGIN( NextSemi ) ;
					}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 583 "cpp.l"
{
				          lastTContext = 0;
					  msg( "found typedef  ", current->name ) ;

					  int section = current->section;
					  current_root->addSubEntry( current ) ;
					  current = new Entry ;
					  current->protection = protection ;
					  if( section == CLASS_SEC ) current->protection = GLOB ;

				          if( *yytext == ',' )
					    BEGIN( NextSemi ) ;
					  else
					    BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 600 "cpp.l"
{ 
					  lineCount() ;
					  if( current->doc.length() > 0
						  ||  current->memo.length() > 0 )
					  {
						msg( "found explicit entry" ) ;
						current->lineNo = yyLineNr;
						current_root->addSubEntry( current ) ;
						current = new Entry ;
					  }
					  current->done = onlyDocs ;
					  BEGIN( Cxx_Memo ) ;
					}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 613 "cpp.l"
{ current->memo += yytext ; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 614 "cpp.l"
{ 
					  yyLineNr++ ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 619 "cpp.l"
{ lineCount() ; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 620 "cpp.l"
{ lineCount() ; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 621 "cpp.l"
{ 
					  lastCContext = YY_START ;
					  BEGIN( SkipComment ) ;
					}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 625 "cpp.l"
{ 
					  lineCount() ;
					  if( current->doc.length() > 0
					      ||  current->memo.length() > 0 )
					  {
					     msg( "found explicit entry" ) ;
					     current->lineNo = yyLineNr;
					     current_root->addSubEntry( current ) ;
					     current = new Entry ;
					  }
					  current->done = onlyDocs ;
					  BEGIN( Doc ) ;
					}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 638 "cpp.l"
{ yyLineNr++; BEGIN( FindMembers ) ; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 639 "cpp.l"
{ 
					  current->doc += yytext ;
					  BEGIN( VerbDoc ) ;
					}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 643 "cpp.l"
{ 
					  current->doc += '\n' ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 647 "cpp.l"
{ 
					  current->doc += yytext ;
					  BEGIN( Doc ) ;
					}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 651 "cpp.l"
{ 
					  current->doc += '\n' ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 655 "cpp.l"
{ current->doc += *yytext ; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 656 "cpp.l"
{ current->doc += yytext ; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 657 "cpp.l"
{ current->doc += yytext ; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 658 "cpp.l"
{ BEGIN( FindMembers ) ; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 660 "cpp.l"
{ 
					  lineCount() ;
					  current->file = yyFileName ;
					  if( current->lineNo == 0 ) current->lineNo = yyLineNr;
					  current->startLine = yyLineNr ;
					  BEGIN( SubDoc ) ;
					}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 667 "cpp.l"
{ 
					  current->program += yytext ;
					  BEGIN( SubDocComment ) ;
					}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 671 "cpp.l"
{ 
					  current->program += yytext ;
					  BEGIN( SubDocCppComment ) ;
					}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 675 "cpp.l"
{ current->program += *yytext ; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 676 "cpp.l"
{ 
					  current->program += *yytext ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 680 "cpp.l"
{ 
					  lineCount() ;
					  current->program += yytext ;
					  ++bracketCount ;
					}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 685 "cpp.l"
{ 
					  lineCount() ;
					  if( bracketCount > 0 )
					  {
					    current->program += yytext ;
					    --bracketCount ;
					  }
					  else
					  {
					    msg( "found explicit subentry" ) ;
					              current->lineNo = yyLineNr;
					    current_root->addSubEntry( current ) ;
					    current = new Entry ;
					    current->protection = protection ;
					    BEGIN( FindMembers ) ;
					  }
					}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 703 "cpp.l"
{ current->program += yytext ; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 704 "cpp.l"
{ current->program += yytext ; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 705 "cpp.l"
{ current->program += yytext ; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 706 "cpp.l"
{ 
					  current->program += yytext ;
					  ++yyLineNr ;
					}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 710 "cpp.l"
{ 
					  current->program += yytext ;
					  BEGIN( SubDoc ) ;
					}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 715 "cpp.l"
{ current->program += yytext ; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 716 "cpp.l"
{ 
					  current->program += yytext ;
					  ++yyLineNr ;
					  BEGIN( SubDoc ) ;
					}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 722 "cpp.l"
{ 
					  current->memo += yytext ;
					  current->doc  += yytext ; 
					}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 726 "cpp.l"
{ 
					  BEGIN( CppDoc ) ;
                      			  lineCount();
					  current->doc  += yytext ; 
					}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 731 "cpp.l"
{ 
					  current->doc  += *yytext ; 
	                  		  lineCount();
					}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 735 "cpp.l"
{ current->memo += yytext ; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 736 "cpp.l"
{ current->doc  += yytext ; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 738 "cpp.l"
{
					  current->see.append( new McString ) ;
					  BEGIN( See ) ;
					}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 742 "cpp.l"
{
					  BEGIN( Author ) ; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 744 "cpp.l"
{
					  BEGIN( Version ) ; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 746 "cpp.l"
{
					  current->param.append( new McString  ) ;
					  BEGIN( Param ) ;
					}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 750 "cpp.l"
{
					  current->exception.append( new McString ) ;
					  BEGIN( Exception ) ;
					}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 754 "cpp.l"
{
					  BEGIN( Return ) ; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 756 "cpp.l"
{
					  current->name.clear() ;
					  current->section = MANUAL_SEC ;
					  BEGIN( Name ) ;
					}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 761 "cpp.l"
{
					  current->memo.clear() ;
					  BEGIN( Memo ) ;
					}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 766 "cpp.l"
{
					  current->type.clear() ;
					  BEGIN( Type ) ;
					}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 770 "cpp.l"
{
					  current->args.clear() ;
					  BEGIN( Args ) ;
					}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 775 "cpp.l"
{ current->name = yytext ; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 776 "cpp.l"
{ BEGIN( CppDoc ) ; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 778 "cpp.l"
{ current->type = yytext ; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 779 "cpp.l"
{ BEGIN( CppDoc ) ; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 781 "cpp.l"
{ current->args = yytext ; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 782 "cpp.l"
{ BEGIN( CppDoc ) ; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 784 "cpp.l"
{ current->author += *yytext ; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 785 "cpp.l"
{ current->version += *yytext ; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 786 "cpp.l"
{ *(current->see.last()) += *yytext ; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 787 "cpp.l"
{ *(current->param.last()) += *yytext ; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 788 "cpp.l"
{ *(current->exception.last()) += *yytext ; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 789 "cpp.l"
{ current->memo += *yytext ; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 790 "cpp.l"
{ current->retrn += *yytext ; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 792 "cpp.l"
{ current->author  += '\n' ; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 793 "cpp.l"
{ current->version += '\n' ; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 794 "cpp.l"
{ *(current->see.last()) += '\n' ; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 795 "cpp.l"
{ *(current->param.last()) += '\n' ; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 796 "cpp.l"
{ *(current->exception.last()) += '\n' ; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 797 "cpp.l"
{ current->memo += *yytext ; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 798 "cpp.l"
{ current->retrn += *yytext ; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 800 "cpp.l"

	YY_BREAK
case 141:
YY_RULE_SETUP
#line 801 "cpp.l"
{ yyLineNr++ ; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 802 "cpp.l"
{ 
					  lastCContext = YY_START ;
					  BEGIN( SkipComment ) ;
					}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 806 "cpp.l"

	YY_BREAK
case 144:
YY_RULE_SETUP
#line 807 "cpp.l"
{ BEGIN( lastCContext ) ; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 808 "cpp.l"
{ 
					  lastCContext = YY_START ;
					  BEGIN( SkipCxxComment ) ;
					}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 812 "cpp.l"
{ 
					  yyLineNr++ ;
					  BEGIN( lastCContext ) ;
					}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 816 "cpp.l"
ECHO;
	YY_BREAK
#line 2935 "lex.cpp.c"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Cxx_Memo):
			case YY_STATE_EOF(SubDoc):
			case YY_STATE_EOF(SubDocComment):
			case YY_STATE_EOF(SubDocCppComment):
			case YY_STATE_EOF(Doc):
			case YY_STATE_EOF(VerbDoc):
			case YY_STATE_EOF(Define):
			case YY_STATE_EOF(DefineEnd):
			case YY_STATE_EOF(DefineEnded):
			case YY_STATE_EOF(ClassName):
			case YY_STATE_EOF(TypedefName):
			case YY_STATE_EOF(Bases):
			case YY_STATE_EOF(NextSemi):
			case YY_STATE_EOF(FindMembers):
			case YY_STATE_EOF(Function):
			case YY_STATE_EOF(Operator):
			case YY_STATE_EOF(Throws):
			case YY_STATE_EOF(Array):
			case YY_STATE_EOF(Round):
			case YY_STATE_EOF(Curly):
			case YY_STATE_EOF(SkipCurly):
			case YY_STATE_EOF(SkipInits):
			case YY_STATE_EOF(SkipCPP):
			case YY_STATE_EOF(Sharp):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(SkipComment):
			case YY_STATE_EOF(SkipCxxComment):
			case YY_STATE_EOF(CppDoc):
			case YY_STATE_EOF(CppMemo):
			case YY_STATE_EOF(See):
			case YY_STATE_EOF(Args):
			case YY_STATE_EOF(Type):
			case YY_STATE_EOF(Author):
			case YY_STATE_EOF(Name):
			case YY_STATE_EOF(Version):
			case YY_STATE_EOF(Param):
			case YY_STATE_EOF(Memo):
			case YY_STATE_EOF(Return):
			case YY_STATE_EOF(Exception):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 814 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 814 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 813);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 816 "cpp.l"



/*@ ----------------------------------------------------------------------------
 */
void parseDoc(Entry* rt)
{
	if( rt->doc.length() )
	{
		Entry* _current = current ;
		rt->program = rt->doc ;
		rt->doc.clear() ;
		inputString   = rt->program ;
		inputPosition = 0 ;
		current = rt ;
		cpprestart( cppin ) ;
		if( rt->memo.length() > 0 )
			BEGIN( CppDoc ) ;
		else
			BEGIN( CppMemo ) ;
		cpplex() ;
		rt->program.clear() ;
		if( rt->memo.length()+2 >= rt->doc.length() )
			rt->doc.clear() ;
		current = _current ;
	}
}

void callcpplex()
{
	cpplex() ;
	if( (current->name.length()  ||  current->program.length()  ||
		current->memo.length()  ||  current->doc.length() )
		&&  current->done == onlyDocs )
	{
		if( current->section == EMPTY_SEC )
			current->section = VARIABLE_SEC ;
		current_root->addSubEntry( current ) ;
		current = new Entry ;
		current->protection = protection ;
	}
}

void parseCppClasses(Entry* rt)
{
    if( rt == 0 ) return ;
    for( Entry *cr = rt->sub ; cr ; cr = cr->next )
    {
		if( cr->program.length() > 0 )
		{
#ifdef _DEBUG
			if (verb)
				printf("Scanning substuff of (%s) %s\n",
				   (const char *)cr->type,
				   (const char *)cr->name);
#endif
			inputString   = cr->program ;
			inputPosition = 0 ;
			cpprestart( cppin ) ;
			BEGIN( FindMembers ) ;
			current_root = cr ;
			strcpy( yyFileName, cr->file ) ;
			yyLineNr = cr->startLine ;
			current->type.clear() ;
			current->name.clear() ;
			current->args.clear() ;
			current->section = EMPTY_SEC ;
			if( cr->section == CLASS_SEC )
				current->protection = protection = PRIV ;
			else if( cr->section == STRUCT_SEC )
				current->protection = protection = PUBL ;
			else if( cr->section == UNION_SEC )
				current->protection = protection = PUBL ;
			else
				current->protection = protection = GLOB ;
			callcpplex() ;
			cr->program.clear() ;
		}
		parseCppClasses( cr ) ;
    }
    parseDoc( rt ) ;
}

void parseCpp(Entry* rt)
{
	current_root  = rt ;
	global_root   = rt ;
	protection    = GLOB ;
	current       = new Entry ;
	yyLineNr      = 1 ;
	yyFileName[0] = '\0' ;
	bracketCount  = 0 ;
	sharpCount    = 0 ;
	lastTContext  = 0 ;

	inputString   = rt->program ;
	inputPosition = 0 ;
	cpprestart( cppin ) ;
	BEGIN( FindMembers ) ;
	callcpplex() ;
	rt->program.clear() ;
	parseCppClasses( rt ) ;

	delete current;
}

extern "C" {
	int	cppwrap()	{ return 1 ; }
};
