#define yy_create_buffer cpp_create_buffer
#define yy_delete_buffer cpp_delete_buffer
#define yy_scan_buffer cpp_scan_buffer
#define yy_scan_string cpp_scan_string
#define yy_scan_bytes cpp_scan_bytes
#define yy_flex_debug cpp_flex_debug
#define yy_init_buffer cpp_init_buffer
#define yy_flush_buffer cpp_flush_buffer
#define yy_load_buffer_state cpp_load_buffer_state
#define yy_switch_to_buffer cpp_switch_to_buffer
#define yyin cppin
#define yyleng cppleng
#define yylex cpplex
#define yyout cppout
#define yyrestart cpprestart
#define yytext cpptext
#define yywrap cppwrap

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

typedef int FILE; //#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplusx
#define __cplusplusx
#endif
#endif


#ifdef __cplusplus

//#include <stdlib.h>
//#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
//#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 149
#define YY_END_OF_BUFFER 150
static yyconst short int yy_accept[730] =
    {   0,
        0,    0,   89,   89,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   21,   21,    0,    0,
        0,    0,    0,    0,   50,   50,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      125,  125,  123,  123,    0,    0,  121,  121,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  150,  141,
      142,  141,   89,   90,   89,  102,  101,  100,  102,  102,
      102,   98,  102,   34,   35,   39,  141,  141,  141,   77,

       78,   76,   79,   86,   87,  141,   80,   81,  141,    1,
        3,  141,  142,   40,   58,   41,   23,  141,   46,   42,
       23,   23,   23,   23,   23,   23,   23,   23,   23,  141,
       24,  141,   66,   67,  141,  141,   21,   21,   21,   45,
       45,   44,   43,   63,   62,   62,   59,   60,   61,   63,
       50,   56,   57,   57,   54,   55,  141,   71,   72,  141,
       74,   75,   69,   68,   27,  141,  141,  141,  141,  141,
       49,   49,   48,   47,   84,   83,   84,   84,  141,  141,
      141,  141,  142,  141,  108,  108,  108,  108,  106,  106,
      107,  106,  106,  129,  136,  129,  129,  125,  126,  125,

      125,  123,  124,  123,  123,  127,  134,  127,  127,  121,
      122,  121,  128,  135,  128,  128,  130,  137,  130,  130,
      132,  139,  132,  132,  133,  140,  133,  133,  131,  138,
      131,  131,  143,  147,   89,   89,   89,  101,  101,  105,
      104,  103,    0,    0,    0,    0,   34,    0,   36,   37,
        0,    0,   78,   79,   77,   78,   86,   87,    0,   80,
        0,    2,    0,   58,    0,   40,   58,   23,  143,  147,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,    0,   24,    0,    0,    0,    0,    0,    0,
        0,    0,   21,   21,   21,   62,   60,   61,   61,   50,

        0,   52,   53,  147,    0,   70,    0,   73,   25,    0,
       26,   29,    0,    0,    0,    0,    0,    0,   85,  143,
       82,    0,  146,  144,  145,    0,  148,  143,  147,  110,
      110,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      107,  109,  109,  136,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  134,  121,
      121,  121,  135,  137,  139,  140,  138,  101,   96,    0,
        0,   38,    0,    0,   95,    0,   88,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,    0,    0,    0,    0,   53,    0,   51,   25,   29,
        0,   30,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,    0,    0,   95,   94,   93,    0,   91,   88,
        0,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      111,    0,    0,  125,  125,  125,  125,  125,  125,  125,
      111,  125,  125,  123,  123,  123,  123,  123,  123,  123,

      111,  123,  123,    0,    0,    0,    0,   92,    0,   23,
       23,   23,   16,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,    0,   28,   64,    0,    0,    0,    0,
      120,    0,    0,  118,  117,    0,    0,  111,  119,    0,
      120,  125,  125,  118,  117,  125,  125,  111,  119,  125,
      120,  123,  123,  118,  117,  123,  123,  111,  119,  123,
        0,    0,   23,   23,   14,   23,   23,   23,   23,   23,
       23,   23,   23,   17,   32,    0,   64,    0,   65,   31,
       30,    0,  120,    0,    0,  118,  117,  114,    0,  119,
        0,  120,  125,  125,  118,  117,  114,  125,  119,  125,

      120,  123,  123,  118,  117,  114,  123,  119,  123,    0,
        0,   23,   23,    0,    0,   22,   23,   23,   23,   23,
        4,   15,   23,    0,  112,    0,  114,  116,    0,  112,
      125,  114,  116,  125,  112,  123,  114,  116,  123,    0,
        0,   23,   23,   18,   22,   23,   23,    6,   23,    0,
       33,  112,    0,  116,  113,  112,  125,  116,  113,  112,
      123,  116,  113,    0,    0,   23,   23,   23,   19,   19,
       23,    0,    0,    0,    0,    0,  113,  125,  113,  123,
      113,    0,    0,   23,   23,   13,    5,    0,    0,    0,
        0,  115,  115,  115,    0,    0,   23,   20,    0,    0,

        0,    0,  115,  115,  115,    0,    0,   23,    0,    0,
        0,    0,    0,    0,    0,   10,   11,    0,    0,    0,
       99,    7,    0,   12,    0,    8,    9,   97,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    7,    1,    8,
        9,   10,    1,   11,    1,   12,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,   16,   17,
       18,   19,    1,   20,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       21,   22,   23,    1,   24,    1,   25,   26,   27,   28,

       29,   30,   31,   32,   33,   14,   14,   34,   35,   36,
       37,   38,   14,   39,   40,   41,   42,   43,   44,   45,
       46,   14,   47,    1,   48,   49,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[50] =
    {   0,
        1,    2,    3,    4,    5,    1,    6,    7,    1,    8,
        1,    9,    5,   10,   11,    1,   12,    1,   12,    1,
        6,    1,    6,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,    5,    5,   13
    } ;

static yyconst short int yy_base[780] =
    {   0,
        0,    1,    2,    3,    7,   15,   20,   21,   43,    0,
       19,   91,   92,   93,  115,    0,  164,    0,  213,    0,
      260,  261,  308,    6,  356,  402,   94,   95,   23,   97,
      265,  266,  288,  371,  365,  383,  386,  389,  411,  437,
      374,  419,  272,  280,   98,  445,  450,  451,  398,  449,
      468,  469,  267,  292,  363,  472,  474,  477,  382,  480,
      425,  481,  452,  485,  493,  496,  499,  500,  501,  504,
      505,  507,  508,  512,  516,  520,  523,  525, 1970, 1971,
     1971,   25,    0, 1971,   99, 1971,  296, 1971, 1956,  271,
     1942,  396, 1938,    0, 1971, 1971, 1957,   36,  520,    0,

     1963, 1971, 1971,    0,  349,  360,    0, 1971, 1959, 1971,
     1971,  539,  546,  293,  423, 1971,    0,  431, 1971, 1971,
     1939, 1928,  364, 1925, 1922,  418, 1918, 1912,  327,  558,
      528,  542, 1971, 1971, 1920, 1924,    0,    0,  521, 1971,
      545, 1971, 1971, 1971,  570,  573, 1971, 1971,  583,  555,
        0, 1971, 1950,  578, 1971, 1971, 1949, 1971, 1971, 1948,
     1971, 1971, 1971, 1971, 1971,  579,  591,  586,  489,  568,
     1971,  590, 1971, 1971, 1942, 1971,  592,  594, 1946, 1937,
      596, 1946, 1971,  605, 1971, 1971,  600,  594, 1971, 1971,
      618,  601,    0, 1971,  622,  618,    0,    0, 1971,  626,

      615,    0, 1971,  628,  634, 1971,  643,  639,    0,    0,
     1971,  647, 1971,  662,  658,    0, 1971,  676,  671,    0,
     1971,  683,  678,    0, 1971,  690,  685,    0, 1971,  697,
      692,    0, 1971, 1971,    0,    0,    0,  568,  694, 1971,
     1971, 1971, 1919,  588,  693, 1911,    0, 1937, 1971, 1971,
     1942,  674, 1942, 1971,    0, 1941,    0,  445,  614,    0,
     1937, 1971,  706,  709,  705,  710,  720,    0, 1931, 1927,
      700, 1914, 1896, 1896, 1895, 1906,  693, 1908, 1894, 1894,
     1898, 1897,  729,  725,  535, 1900, 1894,  714, 1890, 1894,
     1889, 1885,    0,    0,    0,  736, 1971,  746,  754,    0,

     1918, 1971, 1912, 1918, 1915, 1971, 1914, 1971,    0,  757,
     1971,    0,  760,  734, 1882, 1887, 1906,  733, 1905,  755,
     1904, 1908, 1971, 1971, 1971, 1909, 1971, 1908, 1907, 1971,
     1971,  730, 1864, 1879, 1882, 1881, 1876, 1875, 1857, 1873,
      771, 1971, 1971,  774,    0,    0,    0,  740, 1856, 1871,
     1874, 1873, 1868, 1867, 1849, 1865,    0,    0,    0,  741,
     1848, 1863, 1866, 1865, 1860, 1859, 1841, 1857,  782,    0,
        0,    0,  785,  788,  791,  794,  797, 1883, 1971, 1853,
     1855, 1971, 1872, 1868,  800, 1877,  768, 1838, 1849, 1837,
     1841, 1846, 1845, 1834, 1829, 1830, 1836, 1827, 1839, 1830,

     1830, 1835,  506, 1824, 1826, 1852, 1858, 1971,    0,    0,
     1832,  654, 1828, 1817, 1830, 1821, 1820, 1815, 1812, 1823,
     1813, 1811, 1818, 1807, 1820, 1811, 1810, 1805, 1802, 1813,
     1803, 1801, 1808, 1797, 1810, 1801, 1800, 1795, 1792, 1803,
     1793, 1791, 1796, 1781,    5,  793, 1971, 1824, 1971, 1824,
      614, 1784, 1797, 1783,  805, 1783, 1782, 1795, 1794, 1789,
     1784, 1789, 1787, 1778, 1782, 1779, 1781, 1781, 1768, 1764,
     1774, 1777, 1777, 1764, 1771, 1773, 1764, 1771, 1774, 1756,
      812, 1768, 1756, 1755, 1762, 1764, 1755, 1762, 1765, 1747,
      815, 1759, 1747, 1746, 1753, 1755, 1746, 1753, 1756, 1738,

      818, 1750, 1738, 1741, 1733,  813, 1772, 1971,  731, 1735,
     1739,  825,  828, 1736, 1741, 1729, 1728, 1741, 1740, 1725,
     1736,  831, 1762, 1727, 1971,  834,  837, 1732, 1730, 1727,
      840, 1718, 1716,  844, 1751, 1717, 1712,  847,  850, 1715,
      853, 1707, 1705,  856, 1740, 1706, 1701,  859,  862, 1706,
      865, 1699, 1694,  868, 1729, 1695, 1690,  871,  874, 1656,
     1629, 1608, 1591, 1571,  877, 1583, 1547, 1522, 1517, 1492,
     1507,  880, 1490,  883, 1509, 1474,  886,  889, 1971, 1971,
     1971, 1459,  892, 1446, 1439,  896, 1476,  899, 1439,  902,
     1436,  905, 1406, 1114,  908, 1152,  911, 1117,  914, 1115,

      917, 1112, 1108,  920, 1146,  923, 1111,  926, 1109, 1102,
     1105, 1117, 1104,  929, 1138, 1137, 1111, 1098, 1121, 1105,
        0,  932,  935, 1131,  938, 1099,  944,  947, 1095,  950,
     1097,  953,  956, 1093,  959, 1095,  962,  965, 1091, 1097,
     1099, 1082, 1094, 1971, 1120, 1092,  969,    0, 1092, 1017,
     1117, 1020, 1081, 1023, 1026, 1029, 1080, 1032, 1035, 1038,
     1079, 1045, 1048, 1076, 1089, 1017, 1029, 1051, 1971,    0,
     1030, 1009,  908,  902,  789,  788, 1058,  776, 1061,  775,
     1064,  779,  730,  735,  744, 1067,    0,  726,  694,  690,
      664, 1070, 1073, 1076,  658,  634,  415, 1971,  622,  613,

      601,  605, 1079, 1082, 1085,  571,  545,  529,  511, 1088,
      449,  357,  348,  313, 1091, 1094, 1971,  263, 1097,  247,
     1971, 1100, 1103, 1106,  219, 1109, 1971, 1971, 1971, 1156,
     1169, 1182, 1195, 1208, 1221, 1234, 1247, 1260, 1273, 1286,
     1299, 1312, 1325, 1338, 1351, 1364, 1377, 1390, 1403, 1416,
     1429, 1442, 1447, 1458, 1466, 1471, 1474, 1486, 1491, 1504,
     1517, 1530, 1543, 1556, 1569, 1582, 1595, 1608, 1621, 1634,
     1647, 1660, 1673, 1686, 1699, 1712, 1724, 1736, 1748
    } ;

static yyconst short int yy_def[780] =
    {   0,
      730,  730,  731,  731,  732,  732,  732,  732,  729,    9,
      730,  730,  730,  730,  729,   15,  729,   17,  729,   19,
      730,  730,  729,   23,  730,  730,  733,  733,  730,  730,
      734,  734,  735,  735,  736,  736,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  737,  737,  738,  738,
      730,  730,  739,  739,  740,  740,  741,  741,  742,  742,
      743,  743,  744,  744,  745,  745,  746,  746,  747,  747,
      748,  748,  749,  749,  750,  750,  751,  751,  729,  729,
      729,  729,  752,  729,  752,  729,  729,  729,  729,  729,
      729,  729,  729,  753,  729,  729,  754,  729,  729,  755,

      729,  729,  729,  756,  729,  729,  757,  729,  758,  729,
      729,  729,  729,  729,  729,  729,  759,  729,  729,  729,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  729,
      729,  729,  729,  729,  729,  729,  760,  760,  760,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      761,  729,  762,  729,  729,  729,  763,  729,  729,  764,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  765,  729,  765,  765,  766,  729,
      729,  767,  729,  767,  729,  729,  729,  729,  729,  729,
      729,  729,  188,  729,  729,  729,  188,  768,  729,  768,

      768,  769,  729,  769,  769,  729,  729,  729,  188,  770,
      729,  770,  729,  729,  729,  188,  729,  729,  729,  188,
      729,  729,  729,  188,  729,  729,  729,  188,  729,  729,
      729,  188,  729,  729,  752,  752,  752,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  753,  754,  729,  729,
      729,  729,  729,  729,  755,  729,  756,  729,  729,  757,
      758,  729,  729,  729,  729,  729,  729,  759,  729,  771,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  760,  760,  760,  729,  729,  729,  729,  761,

      762,  729,  729,  772,  763,  729,  764,  729,  773,  729,
      729,  774,  729,  729,  729,  729,  765,  765,  765,  765,
      765,  766,  729,  729,  729,  767,  729,  767,  767,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  729,  770,
      770,  770,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  771,  729,  775,  729,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,

      759,  729,  729,  729,  729,  729,  772,  729,  773,  774,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  729,  729,  729,  729,  729,  775,  729,  729,
      776,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  769,  769,  769,  769,  769,  769,  769,

      769,  769,  769,  729,  729,  729,  776,  729,  776,  759,
      759,  759,  729,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      729,  729,  759,  759,  777,  778,  759,  759,  759,  759,
      759,  759,  759,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  768,  768,  768,  768,  768,  768,  768,  768,  768,

      769,  769,  769,  769,  769,  769,  769,  769,  769,  729,
      729,  759,  759,  777,  779,  778,  759,  759,  759,  759,
      759,  777,  759,  729,  729,  729,  729,  729,  729,  768,
      768,  768,  768,  768,  769,  769,  769,  769,  769,  729,
      729,  759,  759,  729,  779,  759,  729,  759,  759,  729,
      729,  729,  729,  729,  729,  768,  768,  768,  768,  769,
      769,  769,  769,  729,  729,  759,  759,  759,  729,  759,
      759,  729,  729,  729,  729,  729,  729,  768,  768,  769,
      769,  729,  729,  759,  759,  729,  759,  729,  729,  729,
      729,  729,  768,  769,  729,  729,  759,  729,  729,  729,

      729,  729,  729,  768,  769,  729,  729,  759,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,    0,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729
    } ;

static yyconst short int yy_nxt[2021] =
    {   0,
      729,  729,   81,   81,   84,   84,  445,  130,  445,   87,
       88,  131,   82,   82,   85,   85,   89,   87,   88,   90,
       95,   96,   92,   92,   89,   81,   97,   90,   91,   89,
       89,   82,   90,   90,  233,   82,   91,  234,  250,  251,
       98,   93,   93,   80,   80,   81,   80,   80,   80,   80,
       80,   80,   80,   80,   94,   82,   94,   94,   80,   80,
       80,   80,   80,   80,   80,   80,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   80,
       80,   80,   95,   96,   96,   96,  138,  138,   97,   81,

       81,   80,   80,   82,   82,   82,  139,  139,  236,   82,
      168,  237,   98,   98,   98,   80,   99,   81,   80,   80,
       80,  100,   80,   80,  100,   80,   80,   82,  100,  101,
      102,   80,   80,   80,   80,  100,   80,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  103,   80,   80,   80,   80,   81,   80,   80,   80,
      104,   80,   80,  104,  105,   80,   82,  104,   80,  105,
       80,   80,   80,   80,  104,   80,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,

      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
       80,   80,   80,   80,  106,   81,   80,   80,   80,   80,
       80,   80,  107,  108,  107,   82,  107,   80,  102,  107,
       80,  107,   80,   80,   80,   80,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  103,
       80,   80,   81,   81,  109,  109,  728,   81,   81,  183,
      110,  110,   82,   82,  165,  110,  110,  141,  141,  184,
      241,  725,  165,  242,  166,  142,  142,  143,  143,  145,
      146,  145,  166,  167,  183,  147,  148,  238,  149,  266,

      150,  167,  266,  723,  184,  239,  111,  111,   80,  112,
      113,  112,   80,   80,  114,  115,   80,  114,  116,  117,
      118,  117,  117,  116,  119,  116,   80,   80,  120,   80,
       80,  121,  117,  117,  122,  117,  123,  117,  117,  117,
      124,  117,  117,  117,  125,  126,  117,  127,  128,  129,
      117,  117,  117,  117,   80,   80,  117,  132,   81,  258,
      721,  259,  281,  133,  258,  186,  282,  152,   82,  153,
      134,  134,  145,  146,  145,  187,   81,  154,  147,  148,
      720,  149,  135,  150,  195,  152,   82,  153,   81,  163,
      157,   81,  719,  157,  196,  154,  136,  244,   82,  273,

      176,   82,  134,  132,   81,  245,  254,  177,  274,  133,
      178,  155,  156,   81,   82,  160,  134,  134,  161,  162,
      164,   81,  698,   82,  267,  267,  267,  199,  135,  155,
      156,   82,  158,  159,  163,  158,  159,  200,  708,   81,
      269,  160,  136,  270,  161,  162,  169,   81,  134,   82,
      170,  176,   81,   81,  203,  258,  277,  168,  177,  278,
      258,  178,  172,  172,  204,  164,  173,  173,  174,  174,
       81,   81,  179,  179,  186,  718,  190,  180,  180,  190,
      181,  181,  195,  199,  187,  191,  192,  203,  191,  192,
      313,  188,  196,  200,  314,  207,  193,  204,  207,  197,

      201,  211,  211,  214,  205,  208,  214,  218,  208,  218,
      222,  212,  212,  215,  222,  209,  215,  219,  226,  219,
      223,  252,  226,  216,  223,  230,  220,  230,  227,  285,
      294,  224,  227,  295,  253,  231,  285,  231,  467,  228,
      263,  263,  263,  288,  232,  468,  264,  263,  263,  263,
      715,  265,  685,  264,  233,  286,  287,  234,  265,  283,
      263,  263,  286,  284,  233,  264,  254,  234,  289,  238,
      265,  296,  296,  296,  296,  296,  296,  239,  297,  714,
      298,  297,  290,  298,  299,  299,  299,  303,  233,  244,
      304,  309,  310,  311,  310,  233,  315,  245,  312,  233,

      316,  318,  234,  320,  319,  233,  321,  327,  325,  330,
      342,  713,  331,  343,  328,  259,  508,  329,  332,  341,
      341,  341,  333,  344,  344,  344,  509,  233,  334,  335,
      234,  336,  337,  338,  339,  346,  340,  358,  347,  348,
      359,  712,  711,  349,  369,  369,  369,  710,  233,  350,
      351,  234,  352,  353,  354,  355,  371,  356,  360,  372,
      254,  709,  361,  373,  373,  373,  707,  233,  362,  363,
      234,  364,  365,  366,  367,  252,  368,  374,  374,  374,
      233,  472,  706,  234,  375,  375,  375,  233,  253,  473,
      234,  376,  376,  376,  233,  378,  702,  234,  377,  377,

      377,  233,  245,  239,  234,  379,  379,  263,  263,  263,
      267,  267,  267,  264,  383,  288,  266,  384,  265,  266,
      254,  267,  267,  267,  388,  395,  285,  389,  701,  396,
      283,  263,  263,  508,  284,  700,  264,  296,  296,  296,
      289,  265,  318,  509,  297,  319,  298,  299,  299,  299,
      699,  698,  286,  287,  290,  299,  299,  299,  310,  311,
      310,  313,  315,  697,  318,  314,  316,  319,  413,  450,
      696,  414,  341,  341,  341,  344,  344,  344,  423,  433,
      451,  424,  434,  369,  369,  369,  373,  373,  373,  374,
      374,  374,  375,  375,  375,  376,  376,  376,  377,  377,

      377,  445,  506,  445,  695,  447,  513,  513,  513,  446,
      694,  693,  447,  538,  538,  538,  548,  538,  548,  558,
      538,  558,  506,  692,  691,  447,  565,  565,  565,  513,
      513,  513,  574,  574,  574,  577,  577,  577,  578,  578,
      578,  583,  583,  583,  579,  586,  586,  586,  538,  538,
      538,  590,  590,  590,  592,  583,  592,  595,  586,  595,
      548,  538,  548,  599,  590,  599,  601,  583,  601,  604,
      586,  604,  558,  538,  558,  608,  590,  608,  565,  565,
      565,  622,  622,  622,  574,  574,  574,  577,  577,  577,
      578,  578,  578,  583,  583,  583,  579,  586,  586,  586,

      627,  627,  627,  590,  590,  590,  592,  583,  592,  595,
      586,  595,  632,  627,  632,  599,  590,  599,  601,  583,
      601,  604,  586,  604,  637,  627,  637,  608,  590,  608,
      729,  729,  729,  622,  622,  622,  650,  650,  650,  652,
      652,  652,  690,  689,  644,  627,  627,  627,  654,  654,
      654,  656,  652,  656,  632,  627,  632,  658,  654,  658,
      660,  652,  660,  637,  627,  637,  662,  654,  662,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      670,  669,  268,  670,  669,  669,  669,  669,  669,  669,
      669,  669,  268,  268,  268,  268,  268,  268,  268,  268,

      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  669,  669,  670,  650,  650,
      650,  652,  652,  652,  654,  654,  654,  677,  677,  677,
      656,  652,  656,  658,  654,  658,  679,  677,  679,  660,
      652,  660,  688,  672,  687,  673,  662,  654,  662,  681,
      677,  681,  686,  686,  686,  685,  674,  684,  675,  677,
      677,  677,  679,  677,  679,  681,  677,  681,  686,  686,
      686,  703,  703,  703,  704,  703,  704,  705,  703,  705,
      703,  703,  703,  704,  703,  704,  705,  703,  705,  716,
      716,  716,  722,  722,  722,  716,  716,  716,  724,  724,

      724,  722,  722,  722,  726,  726,  726,  724,  724,  724,
      726,  726,  726,  683,  682,  680,  678,  676,  651,  671,
      668,  729,  667,  666,  665,  664,  663,  661,  659,  657,
      655,  653,  651,  649,  717,  648,  647,  646,  729,  615,
      717,  643,  642,  641,  640,  639,  638,  605,  636,  727,
      635,  634,  633,  596,  631,  727,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,  137,  137,  137,  137,  137,

      137,  137,  137,  137,  137,  137,  137,  137,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  189,

      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,

      217,  217,  217,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  235,  235,  630,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  247,  247,  247,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  255,  629,  255,  628,  255,  257,  587,  257,  626,
      257,  260,  260,  260,  625,  260,  261,  261,  581,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  268,

      268,  268,  624,  268,  293,  293,  293,  293,  293,  293,
      575,  293,  293,  293,  293,  293,  293,  300,  300,  623,
      300,  621,  300,  300,  300,  300,  300,  300,  300,  300,
      301,  301,  620,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  305,  305,  619,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  307,  307,  618,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  317,
      317,  617,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  322,  322,  615,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  326,  326,  326,  326,  326,

      326,  326,  326,  326,  326,  326,  326,  326,  345,  345,
      613,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  357,  357,  612,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  370,  370,  611,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  409,  409,  610,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  410,  410,  609,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  448,

      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  614,  614,  614,  607,  606,
      605,  603,  614,  614,  614,  602,  614,  616,  600,  598,
      597,  596,  594,  593,  616,  616,  616,  591,  616,  645,
      589,  588,  587,  585,  584,  582,  645,  645,  645,  581,
      645,  580,  576,  575,  573,  572,  571,  570,  569,  568,
      567,  566,  564,  563,  508,  562,  561,  560,  559,  557,
      556,  555,  554,  553,  552,  551,  550,  549,  547,  546,
      545,  544,  543,  542,  541,  540,  539,  537,  536,  535,

      534,  533,  532,  531,  530,  529,  528,  527,  526,  525,
      525,  524,  523,  522,  521,  520,  519,  518,  517,  516,
      515,  514,  512,  511,  510,  450,  449,  505,  504,  503,
      502,  501,  500,  499,  498,  497,  496,  495,  494,  493,
      492,  491,  490,  489,  488,  487,  486,  485,  484,  483,
      482,  481,  480,  479,  478,  477,  476,  475,  474,  471,
      408,  406,  470,  469,  466,  465,  464,  463,  462,  461,
      460,  459,  458,  457,  456,  455,  454,  453,  452,  449,
      387,  385,  444,  443,  378,  442,  441,  440,  439,  438,
      437,  436,  435,  432,  431,  430,  429,  428,  427,  426,

      425,  422,  421,  420,  419,  418,  417,  416,  415,  327,
      327,  327,  323,  318,  318,  318,  412,  411,  308,  306,
      408,  406,  302,  405,  404,  292,  291,  403,  402,  401,
      400,  399,  398,  397,  394,  393,  392,  391,  390,  387,
      385,  262,  256,  256,  382,  249,  381,  380,  327,  324,
      323,  318,  308,  306,  302,  292,  291,  280,  279,  276,
      275,  272,  271,  262,  256,  249,  246,  243,  240,  729,
       79,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,

      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729
    } ;

static yyconst short int yy_chk[2021] =
    {   0,
        0,    0,    1,    2,    3,    4,  445,   24,  445,    5,
        5,   24,    1,    2,    3,    4,    5,    6,    6,    5,
       11,   11,    7,    8,    6,   29,   11,    6,    5,    7,
        8,   11,    7,    8,   82,   29,    6,   82,   98,   98,
       11,    7,    8,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,   12,   12,   13,   14,   27,   28,   12,   30,

       45,   27,   28,   12,   13,   14,   27,   28,   85,   30,
       45,   85,   12,   13,   14,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   21,   22,   21,   22,  725,   31,   32,   53,
       21,   22,   21,   22,   43,   21,   22,   31,   32,   53,
       90,  720,   44,   90,   43,   31,   32,   31,   32,   33,
       33,   33,   44,   43,   54,   33,   33,   87,   33,  114,

       33,   44,  114,  718,   54,   87,   21,   22,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   25,   25,  105,
      714,  106,  129,   25,  105,   55,  129,   35,   25,   35,
       25,   25,   34,   34,   34,   55,   41,   35,   34,   34,
      713,   34,   25,   34,   59,   36,   41,   36,   37,   41,
       37,   38,  712,   38,   59,   36,   25,   92,   37,  123,

       49,   38,   25,   26,   26,   92,  106,   49,  123,   26,
       49,   35,   35,   39,   26,   39,   26,   26,   39,   39,
       41,   42,  697,   39,  115,  115,  115,   61,   26,   36,
       36,   42,   37,   37,   42,   38,   38,   61,  697,   40,
      118,   40,   26,  118,   40,   40,   46,   46,   26,   40,
       46,   50,   47,   48,   63,  258,  126,   46,   50,  126,
      258,   50,   47,   48,   63,   42,   47,   48,   47,   48,
       51,   52,   51,   52,   56,  711,   57,   51,   52,   58,
       51,   52,   60,   62,   56,   57,   57,   64,   58,   58,
      169,   56,   60,   62,  169,   65,   58,   64,   66,   60,

       62,   67,   68,   69,   64,   65,   70,   71,   66,   72,
       73,   67,   68,   69,   74,   66,   70,   71,   75,   72,
       73,   99,   76,   70,   74,   77,   72,   78,   75,  131,
      139,   74,   76,  139,   99,   77,  285,   78,  403,   76,
      112,  112,  112,  132,   78,  403,  112,  113,  113,  113,
      709,  112,  708,  113,  141,  131,  131,  141,  113,  130,
      130,  130,  285,  130,  150,  130,   99,  150,  132,  238,
      130,  145,  145,  145,  146,  146,  146,  238,  145,  707,
      145,  146,  132,  146,  149,  149,  149,  154,  166,  244,
      154,  166,  167,  167,  167,  168,  170,  244,  168,  172,

      170,  177,  172,  178,  177,  181,  178,  184,  181,  187,
      192,  706,  187,  192,  184,  259,  451,  184,  188,  191,
      191,  191,  188,  195,  195,  195,  451,  196,  188,  188,
      196,  188,  188,  188,  188,  200,  188,  204,  200,  201,
      204,  702,  701,  201,  207,  207,  207,  700,  208,  201,
      201,  208,  201,  201,  201,  201,  212,  201,  205,  212,
      259,  699,  205,  214,  214,  214,  696,  215,  205,  205,
      215,  205,  205,  205,  205,  252,  205,  218,  218,  218,
      219,  412,  695,  219,  222,  222,  222,  223,  252,  412,
      223,  226,  226,  226,  227,  239,  691,  227,  230,  230,

      230,  231,  245,  239,  231,  245,  239,  263,  263,  263,
      264,  264,  264,  263,  265,  288,  266,  265,  263,  266,
      252,  267,  267,  267,  271,  277,  284,  271,  690,  277,
      283,  283,  283,  509,  283,  689,  283,  296,  296,  296,
      288,  283,  318,  509,  296,  318,  296,  298,  298,  298,
      688,  685,  284,  284,  288,  299,  299,  299,  310,  310,
      310,  313,  314,  684,  320,  313,  314,  320,  332,  387,
      683,  332,  341,  341,  341,  344,  344,  344,  348,  360,
      387,  348,  360,  369,  369,  369,  373,  373,  373,  374,
      374,  374,  375,  375,  375,  376,  376,  376,  377,  377,

      377,  385,  446,  385,  682,  446,  455,  455,  455,  385,
      680,  678,  385,  481,  481,  481,  491,  491,  491,  501,
      501,  501,  506,  676,  675,  506,  512,  512,  512,  513,
      513,  513,  522,  522,  522,  526,  526,  526,  527,  527,
      527,  531,  531,  531,  527,  534,  534,  534,  538,  538,
      538,  539,  539,  539,  541,  541,  541,  544,  544,  544,
      548,  548,  548,  549,  549,  549,  551,  551,  551,  554,
      554,  554,  558,  558,  558,  559,  559,  559,  565,  565,
      565,  572,  572,  572,  574,  574,  574,  577,  577,  577,
      578,  578,  578,  583,  583,  583,  578,  586,  586,  586,

      588,  588,  588,  590,  590,  590,  592,  592,  592,  595,
      595,  595,  597,  597,  597,  599,  599,  599,  601,  601,
      601,  604,  604,  604,  606,  606,  606,  608,  608,  608,
      614,  614,  614,  622,  622,  622,  623,  623,  623,  625,
      625,  625,  674,  673,  614,  627,  627,  627,  628,  628,
      628,  630,  630,  630,  632,  632,  632,  633,  633,  633,
      635,  635,  635,  637,  637,  637,  638,  638,  638,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,

      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  650,  650,
      650,  652,  652,  652,  654,  654,  654,  655,  655,  655,
      656,  656,  656,  658,  658,  658,  659,  659,  659,  660,
      660,  660,  672,  650,  671,  650,  662,  662,  662,  663,
      663,  663,  668,  668,  668,  667,  650,  666,  650,  677,
      677,  677,  679,  679,  679,  681,  681,  681,  686,  686,
      686,  692,  692,  692,  693,  693,  693,  694,  694,  694,
      703,  703,  703,  704,  704,  704,  705,  705,  705,  710,
      710,  710,  715,  715,  715,  716,  716,  716,  719,  719,

      719,  722,  722,  722,  723,  723,  723,  724,  724,  724,
      726,  726,  726,  665,  664,  661,  657,  653,  651,  649,
      646,  645,  643,  642,  641,  640,  639,  636,  634,  631,
      629,  626,  624,  620,  710,  619,  618,  617,  616,  615,
      716,  613,  612,  611,  610,  609,  607,  605,  603,  723,
      602,  600,  598,  596,  594,  726,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  733,  733,  733,  733,  733,

      733,  733,  733,  733,  733,  733,  733,  733,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  741,

      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,

      748,  748,  748,  749,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  749,  749,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  750,  750,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  752,  752,  593,  752,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  753,  753,  753,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  755,  591,  755,  589,  755,  756,  587,  756,  585,
      756,  757,  757,  757,  584,  757,  758,  758,  582,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  759,

      759,  759,  576,  759,  760,  760,  760,  760,  760,  760,
      575,  760,  760,  760,  760,  760,  760,  761,  761,  573,
      761,  571,  761,  761,  761,  761,  761,  761,  761,  761,
      762,  762,  570,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  763,  763,  569,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  764,  764,  568,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  765,
      765,  567,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  766,  766,  566,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  767,  767,  767,  767,  767,

      767,  767,  767,  767,  767,  767,  767,  767,  768,  768,
      564,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  769,  769,  563,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  770,  770,  562,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  773,  773,  561,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  774,  774,  560,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  775,

      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  777,  777,  777,  557,  556,
      555,  553,  777,  777,  777,  552,  777,  778,  550,  547,
      546,  545,  543,  542,  778,  778,  778,  540,  778,  779,
      537,  536,  535,  533,  532,  530,  779,  779,  779,  529,
      779,  528,  524,  523,  521,  520,  519,  518,  517,  516,
      515,  514,  511,  510,  507,  505,  504,  503,  502,  500,
      499,  498,  497,  496,  495,  494,  493,  492,  490,  489,
      488,  487,  486,  485,  484,  483,  482,  480,  479,  478,

      477,  476,  475,  474,  473,  472,  471,  470,  469,  468,
      467,  466,  465,  464,  463,  462,  461,  460,  459,  458,
      457,  456,  454,  453,  452,  450,  448,  444,  443,  442,
      441,  440,  439,  438,  437,  436,  435,  434,  433,  432,
      431,  430,  429,  428,  427,  426,  425,  424,  423,  422,
      421,  420,  419,  418,  417,  416,  415,  414,  413,  411,
      407,  406,  405,  404,  402,  401,  400,  399,  398,  397,
      396,  395,  394,  393,  392,  391,  390,  389,  388,  386,
      384,  383,  381,  380,  378,  368,  367,  366,  365,  364,
      363,  362,  361,  356,  355,  354,  353,  352,  351,  350,

      349,  340,  339,  338,  337,  336,  335,  334,  333,  329,
      328,  326,  322,  321,  319,  317,  316,  315,  307,  305,
      304,  303,  301,  292,  291,  290,  289,  287,  286,  282,
      281,  280,  279,  278,  276,  275,  274,  273,  272,  270,
      269,  261,  256,  253,  251,  248,  246,  243,  182,  180,
      179,  175,  160,  157,  153,  136,  135,  128,  127,  125,
      124,  122,  121,  109,  101,   97,   93,   91,   89,   79,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,

      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#define INITIAL 0
/*************************************************************************

    CPP lexer

    This file is derived from the DOC++ source by Roland Wunderling
    and Malte Zoeckler.

    Better handling of typedefs, linenumbers, formatting, comments
    and various other improvements was made. Still a lot to be done
    to handle all modern C++ constructs. <bjarke@viksoe.dk>

 *************************************************************************/

#pragma code_seg( "MISC" )

/*
 *	Includes
 */

#include "CppTypes.h"


/* -----------------------------------------------------------------
 *
 *	statics
 */
static const char*	inputString ;
static int		inputPosition ;
static int		lastContext ;
static int		lastCContext ;
static int		lastTContext;
static int		protection   = GLOB ;
static int		bracketCount = 0 ;
static int		sharpCount   = 0 ;
static int		elseCount    = 0 ;
static Entry*		current_root = 0 ;
static Entry*		global_root  = 0 ;
static Entry*		current      = 0 ;

static int		yyLineNr = 1 ;
static McString*	currentString ;

static void msg( const char* str, const char* str2=NULL )
{
#ifdef _DEBUG
	if( verb )
	{
		printf( "%d:\t%s", yyLineNr, str ) ;
		if( str2 ) printf( "%s", str2 ) ;
		printf( "\n" ) ;
	}
#endif
}

static void lineCount()
{
	for( const char* c = yytext ; *c ; ++c )
		yyLineNr += (*c == '\n') ;
}


static void addType( Entry* current )
{
   if( !current->name.empty() ) {
      if( !current->type.empty() ) current->type += ' ' ;
      current->type += current->name ;
      current->name.clear() ;
   }
   if( !current->args.empty() ) {
      if( !current->type.empty() ) current->type += ' ' ;
      current->type += current->args ;
      current->args.clear() ;
   }
}

/* -----------------------------------------------------------------
 */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result = yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
	int c = 0;
	while( c < max_size && inputString[inputPosition] )
	{
		*buf = inputString[inputPosition++] ;
		c++; buf++;
	}
	return c;
}

#define Cxx_Memo 1

#define Doc 2

#define VerbDoc 3

#define Define 4

#define DefineEnd 5

#define DefineEnded 6

#define ClassName 7

#define TypedefName 8

#define Bases 9

#define NextSemi 10

#define FindMembers 11

#define Function 12

#define Operator 13

#define Throws 14

#define Array 15

#define Round 16

#define Curly 17

#define SkipCurly 18

#define SkipRound 19

#define SkipInits 20

#define SkipDefine 21

#define SkipElse 22

#define Sharp 23

#define Comment 24

#define SkipComment 25

#define SkipCxxComment 26

#define CppDoc 27

#define CppMemo 28

#define See 29

#define Args 30

#define Type 31

#define Author 32

#define Name 33

#define Version 34

#define Param 35

#define Memo 36

#define Return 37

#define Exception 38


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplusx
//#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;




	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 730 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 729 );
		yy_cp = yy_last_accepting_cpos;
		yy_current_state = yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{ BEGIN( FindMembers ) ; }
	YY_BREAK
case 2:
YY_RULE_SETUP

	YY_BREAK
case 3:
YY_RULE_SETUP
{ BEGIN( SkipCurly ) ; }
	YY_BREAK
case 4:
YY_RULE_SETUP
{ 
					  current->protection = protection = PUBL ;
					  lineCount() ;
					}
	YY_BREAK
case 5:
YY_RULE_SETUP
{ 
					  current->protection = protection = PROT ;
					  lineCount() ;
					}
	YY_BREAK
case 6:
YY_RULE_SETUP
{ 
					  current->protection = protection = PRIV ;
					  lineCount() ;
					}
	YY_BREAK
case 7:
YY_RULE_SETUP
{
					  msg( "found class    ", current->name ) ;
					  current->section = TYPEDEF_SEC ;
					  current->lineNo = yyLineNr ;
					  current->type = "typedef class" ;
					  current->name.clear() ;
					  lineCount() ;
					}
	YY_BREAK
case 8:
YY_RULE_SETUP
{
					  msg( "found struct   ", current->name ) ;
					  current->section = STRUCT_SEC ;
					  current->lineNo = yyLineNr ;
					  current->type = "typedef struct" ;
					  current->name.clear() ;
					  lastTContext = 1;
					  lineCount() ;
				  	  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 9:
YY_RULE_SETUP
{
					  msg( "found struct   ", current->name ) ;
					  current->section = STRUCT_SEC ;
					  current->lineNo = yyLineNr ;
					  current->type = "typedef struct" ;
					  current->name.clear() ;
					  lineCount() ;
					  current->startLine = yyLineNr ;
					  lastTContext = 1;
				  	  BEGIN( Curly ) ;
					}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
					  msg( "found enum     ", current->name ) ;
					  current->section = ENUM_SEC ;
					  current->lineNo = yyLineNr ;
					  current->type = "typedef enum" ;
					  current->name.clear() ;
					  lineCount() ;
					  current->startLine = yyLineNr ;
					  lastTContext = 1;
				  	  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
					  msg( "found struct   ", current->name ) ;
					  current->section = ENUM_SEC ;
					  current->lineNo = yyLineNr ;
					  current->type = "typedef enum" ;
					  current->name.clear() ;
					  lineCount() ;
					  current->startLine = yyLineNr ;
					  lastTContext = 1;
				  	  BEGIN( Curly ) ;
					}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
					  msg( "found union    ", current->name ) ;
					  current->section = UNION_SEC ;
					  current->lineNo = yyLineNr ;
					  current->type = "typedef union" ;
					  current->name.clear() ;
					  lineCount() ;
				  	  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 13:
YY_RULE_SETUP
{ 
					  current->section = CLASS_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr ;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "interface" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 14:
YY_RULE_SETUP
{ 
					  msg( "found class     ", current->name ) ;
					  current->section = CLASS_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr ;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "class" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 15:
YY_RULE_SETUP
{ 
					  msg( "found struct    ", current->name ) ;
					  current->section = STRUCT_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr ;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "struct" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 16:
YY_RULE_SETUP
{ 
					  msg( "found enum    ", current->name ) ;
					  current->section = ENUM_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr ;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "enum" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 17:
YY_RULE_SETUP
{ 
					  current->section = UNION_SEC ;
					  addType( current ) ;
					  current->lineNo = yyLineNr ;
					  if( !current->type.empty() ) current->type += " ";
					  current->type += "union" ;
					  lineCount() ;
					  BEGIN( ClassName ) ;
					}
	YY_BREAK
case 18:
YY_RULE_SETUP
{ 
					  msg( "found forward declare  ", yytext ) ;
					  lineCount() ;
					}
	YY_BREAK
case 19:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ 
					  addType( current ) ;
					  current->lineNo = yyLineNr ;
					  current->name  = yytext ;
					  BEGIN( Operator ) ;
					}
	YY_BREAK
case 20:
YY_RULE_SETUP
{ 
					  BEGIN( SkipRound ) ;
					}
	YY_BREAK
case 21:
YY_RULE_SETUP
{ 
					  current->name += yytext ;
					  current->lineNo = yyLineNr ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 22:
YY_RULE_SETUP
{ 
					  addType( current ) ;
				          current->lineNo = yyLineNr ;
					  current->name  = yytext ;
					}
	YY_BREAK
case 23:
YY_RULE_SETUP
{ 
					  addType( current ) ;
				          current->lineNo = yyLineNr ;
					  current->name  = yytext ;
					}
	YY_BREAK
case 24:
YY_RULE_SETUP
{ 
					  msg( "found compiler.dir" ) ;
					  lineCount() ; 
					  BEGIN( SkipDefine ) ; 
					}
	YY_BREAK
case 25:
YY_RULE_SETUP

	YY_BREAK
case 26:
YY_RULE_SETUP
{ yyLineNr++ ; }
	YY_BREAK
case 27:
YY_RULE_SETUP
{ 
					  yyLineNr++ ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 28:
YY_RULE_SETUP
{ 
					  msg( "found #ELSE" ) ; 
					  BEGIN( SkipElse ) ; 
					}
	YY_BREAK
case 29:
YY_RULE_SETUP

	YY_BREAK
case 30:
YY_RULE_SETUP
{ elseCount++ ; }
	YY_BREAK
case 31:
YY_RULE_SETUP
{ if( elseCount > 0 )
					    --elseCount ;
					  else
					    BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 32:
YY_RULE_SETUP
{ 
					  current->type = "using " ;
					  BEGIN( Define ) ;
					}
	YY_BREAK
case 33:
YY_RULE_SETUP
{ 
					  current->type = "#define" ;
					  BEGIN( Define ) ;
					}
	YY_BREAK
case 34:
YY_RULE_SETUP
{ 
					  current->name = yytext ;
					  current->lineNo = yyLineNr ;
					  BEGIN( DefineEnd ) ;
					}
	YY_BREAK
case 35:
YY_RULE_SETUP
{ BEGIN( DefineEnd ) ; }
	YY_BREAK
case 36:
YY_RULE_SETUP
{ 
					  current->args = yytext ;
					  BEGIN( DefineEnded ) ;
					}
	YY_BREAK
case 37:
YY_RULE_SETUP
{ yyLineNr++ ; }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ yyLineNr++ ; }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ 
					  current->section = MACRO_SEC ;
					  current->lineNo = yyLineNr ;
					  msg( "found macro    ", current->name ) ;
					  current_root->addSubEntry( current ) ;
					  current = new Entry ;
					  current->protection = protection ;
					  yyLineNr++ ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 40:
YY_RULE_SETUP
{ 
					  current->name += yytext ; 
					  current->lineNo = yyLineNr ;
					}
	YY_BREAK
case 41:
YY_RULE_SETUP
{ 
					  BEGIN( FindMembers ) ;
					  if( current->lineNo == 0 ) current->lineNo = yyLineNr + 1;
					  msg( "found variable ", current->name ) ;
					  if( current->section != TYPEDEF_SEC )
					    current->section = VARIABLE_SEC ;
					  current_root->addSubEntry( current ) ;
					  current = new Entry ;
					  current->protection = protection ;
					  if( *yytext == '=' )
					    BEGIN( NextSemi ) ;
					}
	YY_BREAK
case 42:
YY_RULE_SETUP
{ 
					  current->args += yytext ;
					  BEGIN( Array ) ;
					}
	YY_BREAK
case 43:
YY_RULE_SETUP
{ 
					  current->args += *yytext ;
					  if( sharpCount > 0 )
					    --sharpCount ;
					  else
					    BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 44:
YY_RULE_SETUP
{ 
					  current->args += *yytext ;
					  ++sharpCount ;	
					}
	YY_BREAK
case 45:
YY_RULE_SETUP
{ current->args += *yytext ; }
	YY_BREAK
case 46:
YY_RULE_SETUP
{ 
					  addType( current ) ;
					  current->type += *yytext ;
					  BEGIN( Sharp ) ;
					}
	YY_BREAK
case 47:
YY_RULE_SETUP
{ 
					  current->type += *yytext ;
					  if( sharpCount > 0 )
					    --sharpCount ;
					  else
	                                    BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 48:
YY_RULE_SETUP
{ 
					  current->type += *yytext ;
					  ++sharpCount ;
					}
	YY_BREAK
case 49:
YY_RULE_SETUP
{ current->type += *yytext ; }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 51:
YY_RULE_SETUP
{ current->program += yytext ; ++yyLineNr ; }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  lastContext = Curly ;
					  BEGIN( Comment ) ;
					}
	YY_BREAK
case 54:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  ++bracketCount ;
					}
	YY_BREAK
case 55:
YY_RULE_SETUP
{ 
					  if( bracketCount > 0 )
					  {
						current->program += yytext ;
						--bracketCount ;
					  }
					  else
					  {
					    current->args += " {...}";

					    if( lastTContext ) 
					    {
					      BEGIN( TypedefName ) ;
					    }
					    else
					    {
					      int section = current->section;
					      current_root->addNextEntry( current ) ;
					      current = new Entry ;
					      current->protection = protection ;
					      if( section == CLASS_SEC ) current->protection = GLOB ;
					      BEGIN( NextSemi ) ;
					    }
					  }
					}
	YY_BREAK
case 56:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 57:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ 
					  lineCount() ; 
					  current->args = "(" ;
					  BEGIN( Round ) ;
					}
	YY_BREAK
case 59:
YY_RULE_SETUP
{ 
					  current->args += *yytext ;
					  ++bracketCount ;
					}
	YY_BREAK
case 60:
YY_RULE_SETUP
{ 
					  lineCount() ; 
					  current->args += ')' ;
					  if( bracketCount > 0 )
					    --bracketCount ;
					  else
					    BEGIN( Function ) ;
					}
	YY_BREAK
case 61:
YY_RULE_SETUP
{ lineCount() ; current->args += ", " ; }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ lineCount() ; current->args += " " ; }
	YY_BREAK
case 63:
YY_RULE_SETUP
{ current->args += *yytext ; }
	YY_BREAK
case 64:
YY_RULE_SETUP
{ lineCount() ; current->args += " const" ; }
	YY_BREAK
case 65:
YY_RULE_SETUP
{ 
					  current->args += " throw(" ;
					  lineCount() ;
				  	  BEGIN( Round ) ;
					}
	YY_BREAK
case 66:
YY_RULE_SETUP
{ 
					  current->type += current->name ;
					  current->name  = current->args ;
					  current->args  = yytext ;
					  current->lineNo = yyLineNr ;
					  BEGIN( Round ) ;
					}
	YY_BREAK
case 67:
YY_RULE_SETUP
{ 
					  msg( "found method   ", current->name ) ;
					  current->section = FUNCTION_SEC ;
					  if( *yytext == '{' && current->protection == GLOB ) current->section = IMPL_SEC;
					  current_root->addSubEntry(current);
					  current = new Entry ;
					  current->protection = protection ;
					  if( *yytext == '{' ) {
					      BEGIN( SkipCurly ) ;
					  }
					  else if( *yytext == ':' )
					      BEGIN( SkipInits ) ;
					  else
					      BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 68:
YY_RULE_SETUP
{ BEGIN( SkipCurly ) ; }
	YY_BREAK
case 69:
YY_RULE_SETUP
{ BEGIN( FindMembers ) ; }
	YY_BREAK
case 70:
YY_RULE_SETUP

	YY_BREAK
case 71:
YY_RULE_SETUP
{ ++bracketCount ; }
	YY_BREAK
case 72:
YY_RULE_SETUP
{ 
					  if( bracketCount > 0 )
					    --bracketCount ;
					  else
					    BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 73:
YY_RULE_SETUP

	YY_BREAK
case 74:
YY_RULE_SETUP
{ ++bracketCount ; }
	YY_BREAK
case 75:
YY_RULE_SETUP
{ 
					  if( bracketCount > 0 )
					    --bracketCount ;
					  else
					    BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 76:
YY_RULE_SETUP
{ 
					  current->section = VARIABLE_SEC ;
					  current_root->addSubEntry(current);
					  current = new Entry ;
					  current->protection = protection ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 77:
YY_RULE_SETUP
{ 
					  if( !current->type.empty() && !current->name.empty() ) current->type += " " ;
					  current->type += current->name ;
				  	  current->name = yytext ;
					  current->lineNo = yyLineNr ;
					}
	YY_BREAK
case 78:
YY_RULE_SETUP
{ 
					  current->args = " :" ;
					  BEGIN( Bases ) ;
					}
	YY_BREAK
case 79:
YY_RULE_SETUP
{ 
				  	  if( current->lineNo == 0 ) current->lineNo = yyLineNr ;
					  current->startLine = yyLineNr ;
				  	  msg( "found name     ", current->name ) ;
				  	  BEGIN( Curly ) ;
					}
	YY_BREAK
case 80:
YY_RULE_SETUP
{ 
					  current->extends.append( new McString(yytext) ) ;
					  if( !current->args.empty() ) current->args += " " ;
					  current->args += yytext ;
					}
	YY_BREAK
case 81:
YY_RULE_SETUP
{ current->args += ',' ; }
	YY_BREAK
case 82:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 83:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 84:
YY_RULE_SETUP
{ current->program += yytext ; }
	YY_BREAK
case 85:
YY_RULE_SETUP
{ 
					  current->program += yytext ;
					  BEGIN( Curly ) ;
					}
	YY_BREAK
case 86:
YY_RULE_SETUP
{ 
					  if( !current->type.empty() && !current->name.empty() ) current->type += " " ;
					  current->type += current->name ;
				  	  current->name = yytext ;
					  current->lineNo = yyLineNr ;
		
				          lastTContext = 0;
					  msg( "found name     ", current->name ) ;

				          int section = current->section;
					  current_root->addNextEntry( current ) ;
					  current = new Entry ;
					  current->protection = protection ;
					  if( section == CLASS_SEC ) current->protection = GLOB ;

					  BEGIN( NextSemi ) ;
					}
	YY_BREAK
case 87:
YY_RULE_SETUP
{
				          lastTContext = 0;
					  msg( "found name     ", current->name ) ;

					  int section = current->section;
					  current_root->addNextEntry( current ) ;
					  current = new Entry ;
					  current->protection = protection ;
					  if( section == CLASS_SEC ) current->protection = GLOB ;

				          if( *yytext == ',' )
					    BEGIN( NextSemi ) ;
					  else
					    BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 88:
YY_RULE_SETUP
{ 
					  lineCount() ;
					  if( !current->doc.empty()
					    ||  !current->memo.empty() )
					  {
						msg( "found doc entry" ) ;
						current->lineNo = yyLineNr ;
						current_root->addSubEntry( current ) ;
						current = new Entry ;
					  }
					  BEGIN( Cxx_Memo ) ;
					}
	YY_BREAK
case 89:
YY_RULE_SETUP
{ current->memo += yytext ; }
	YY_BREAK
case 90:
YY_RULE_SETUP
{ 
					  yyLineNr++ ;
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 91:
YY_RULE_SETUP
{ lineCount() ; }
	YY_BREAK
case 92:
YY_RULE_SETUP
{ lineCount() ; }
	YY_BREAK
case 93:
YY_RULE_SETUP
{ lineCount() ; }
	YY_BREAK
case 94:
YY_RULE_SETUP
{ 
					  lineCount() ;
					  lastCContext = YY_START ;
					  BEGIN( SkipComment ) ;
					}
	YY_BREAK
case 95:
YY_RULE_SETUP
{ 
					  lineCount() ;
					  if( !current->doc.empty() 
					      ||  !current->memo.empty() )
					  {
					     msg( "found doc entry" ) ;
					     current->lineNo = yyLineNr ;
					     current_root->addSubEntry( current ) ;
					     current = new Entry ;
					  }
					  BEGIN( Doc ) ;
					}
	YY_BREAK
case 96:
YY_RULE_SETUP
{ 
					  yyLineNr++; 
					  BEGIN( FindMembers ) ; 
					}
	YY_BREAK
case 97:
YY_RULE_SETUP
{ 
					  current->doc += yytext ;
					  BEGIN( VerbDoc ) ;
					}
	YY_BREAK
case 98:
YY_RULE_SETUP
{ 
					  current->doc += '\n' ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 99:
YY_RULE_SETUP
{ 
					  current->doc += yytext ;
					  BEGIN( Doc ) ;
					}
	YY_BREAK
case 100:
YY_RULE_SETUP

	YY_BREAK
case 101:
YY_RULE_SETUP
{ 
					  if( !current->doc.empty() ) current->doc += '\n' ;
					  yyLineNr++ ;
					}
	YY_BREAK
case 102:
YY_RULE_SETUP
{ current->doc += *yytext ; }
	YY_BREAK
case 103:
YY_RULE_SETUP
{ current->doc += yytext ; }
	YY_BREAK
case 104:
YY_RULE_SETUP
{ current->doc += yytext ; }
	YY_BREAK
case 105:
YY_RULE_SETUP
{ BEGIN( FindMembers ) ; }
	YY_BREAK
case 106:
YY_RULE_SETUP
{ 
					  current->memo += yytext ;
					  current->doc  += yytext ; 
					}
	YY_BREAK
case 107:
YY_RULE_SETUP
{ 
					  BEGIN( CppDoc ) ;
                      			  lineCount();
					  current->doc  += yytext ; 
					}
	YY_BREAK
case 108:
YY_RULE_SETUP
{ 
					  current->doc  += *yytext ; 
	                  		  lineCount();
					}
	YY_BREAK
case 109:
YY_RULE_SETUP
{ current->memo += yytext ; }
	YY_BREAK
case 110:
YY_RULE_SETUP
{ current->doc  += yytext ; }
	YY_BREAK
case 111:
YY_RULE_SETUP
{
					  lineCount() ;
					  current->see.append( new McString ) ;
					  BEGIN( See ) ;
					}
	YY_BREAK
case 112:
YY_RULE_SETUP
{
					  lineCount() ;
					  BEGIN( Author ) ; }
	YY_BREAK
case 113:
YY_RULE_SETUP
{
					  lineCount() ;
					  BEGIN( Version ) ; }
	YY_BREAK
case 114:
YY_RULE_SETUP
{
					  lineCount() ;
					  current->param.append( new McString  ) ;
					  BEGIN( Param ) ;
					}
	YY_BREAK
case 115:
YY_RULE_SETUP
{
					  lineCount() ;
					  current->exception.append( new McString ) ;
					  BEGIN( Exception ) ;
					}
	YY_BREAK
case 116:
YY_RULE_SETUP
{
					  lineCount() ;
					  BEGIN( Return ) ; }
	YY_BREAK
case 117:
YY_RULE_SETUP
{
					  current->name.clear() ;
					  current->section = MANUAL_SEC ;
					  BEGIN( Name ) ;
					}
	YY_BREAK
case 118:
YY_RULE_SETUP
{
					  lineCount() ;
					  current->memo.clear() ;
					  BEGIN( Memo ) ;
					}
	YY_BREAK
case 119:
YY_RULE_SETUP
{
					  lineCount() ;
					  current->type.clear() ;
					  BEGIN( Type ) ;
					}
	YY_BREAK
case 120:
YY_RULE_SETUP
{
					  lineCount() ;
					  current->args.clear() ;
					  BEGIN( Args ) ;
					}
	YY_BREAK
case 121:
YY_RULE_SETUP
{ current->name = yytext ; }
	YY_BREAK
case 122:
YY_RULE_SETUP
{ ++yyLineNr ; BEGIN( CppDoc ) ; }
	YY_BREAK
case 123:
YY_RULE_SETUP
{ current->type = yytext ; }
	YY_BREAK
case 124:
YY_RULE_SETUP
{ ++yyLineNr ; BEGIN( CppDoc ) ; }
	YY_BREAK
case 125:
YY_RULE_SETUP
{ current->args = yytext ; }
	YY_BREAK
case 126:
YY_RULE_SETUP
{ ++yyLineNr ; BEGIN( CppDoc ) ; }
	YY_BREAK
case 127:
YY_RULE_SETUP
{ current->author += *yytext ; }
	YY_BREAK
case 128:
YY_RULE_SETUP
{ current->version += *yytext ; }
	YY_BREAK
case 129:
YY_RULE_SETUP
{ *(current->see.last()) += *yytext ; }
	YY_BREAK
case 130:
YY_RULE_SETUP
{ *(current->param.last()) += *yytext ; }
	YY_BREAK
case 131:
YY_RULE_SETUP
{ *(current->exception.last()) += *yytext ; }
	YY_BREAK
case 132:
YY_RULE_SETUP
{ current->memo += *yytext ; }
	YY_BREAK
case 133:
YY_RULE_SETUP
{ current->retrn += *yytext ; }
	YY_BREAK
case 134:
YY_RULE_SETUP
{ current->author  += '\n' ; lineCount() ; }
	YY_BREAK
case 135:
YY_RULE_SETUP
{ current->version += '\n' ; lineCount() ; }
	YY_BREAK
case 136:
YY_RULE_SETUP
{ *(current->see.last()) += '\n' ; lineCount() ; }
	YY_BREAK
case 137:
YY_RULE_SETUP
{ *(current->param.last()) += '\n' ; lineCount() ; }
	YY_BREAK
case 138:
YY_RULE_SETUP
{ *(current->exception.last()) += '\n' ; lineCount() ; }
	YY_BREAK
case 139:
YY_RULE_SETUP
{ current->memo += *yytext ; lineCount() ; }
	YY_BREAK
case 140:
YY_RULE_SETUP
{ current->retrn += *yytext ; lineCount() ; }
	YY_BREAK
case 141:
YY_RULE_SETUP

	YY_BREAK
case 142:
YY_RULE_SETUP
{ yyLineNr++ ; }
	YY_BREAK
case 143:
YY_RULE_SETUP
{ 
					  lastCContext = YY_START ;
					  BEGIN( SkipComment ) ;
					}
	YY_BREAK
case 144:
YY_RULE_SETUP
{ BEGIN( lastCContext ) ; }
	YY_BREAK
case 145:
YY_RULE_SETUP

	YY_BREAK
case 146:
YY_RULE_SETUP

	YY_BREAK
case 147:
YY_RULE_SETUP
{ 
					  lastCContext = YY_START ;
					  BEGIN( SkipCxxComment ) ;
					}
	YY_BREAK
case 148:
YY_RULE_SETUP
{ 
					  yyLineNr++ ;
					  BEGIN( lastCContext ) ;
					}
	YY_BREAK
case 149:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Cxx_Memo):
case YY_STATE_EOF(Doc):
case YY_STATE_EOF(VerbDoc):
case YY_STATE_EOF(Define):
case YY_STATE_EOF(DefineEnd):
case YY_STATE_EOF(DefineEnded):
case YY_STATE_EOF(ClassName):
case YY_STATE_EOF(TypedefName):
case YY_STATE_EOF(Bases):
case YY_STATE_EOF(NextSemi):
case YY_STATE_EOF(FindMembers):
case YY_STATE_EOF(Function):
case YY_STATE_EOF(Operator):
case YY_STATE_EOF(Throws):
case YY_STATE_EOF(Array):
case YY_STATE_EOF(Round):
case YY_STATE_EOF(Curly):
case YY_STATE_EOF(SkipCurly):
case YY_STATE_EOF(SkipRound):
case YY_STATE_EOF(SkipInits):
case YY_STATE_EOF(SkipDefine):
case YY_STATE_EOF(SkipElse):
case YY_STATE_EOF(Sharp):
case YY_STATE_EOF(Comment):
case YY_STATE_EOF(SkipComment):
case YY_STATE_EOF(SkipCxxComment):
case YY_STATE_EOF(CppDoc):
case YY_STATE_EOF(CppMemo):
case YY_STATE_EOF(See):
case YY_STATE_EOF(Args):
case YY_STATE_EOF(Type):
case YY_STATE_EOF(Author):
case YY_STATE_EOF(Name):
case YY_STATE_EOF(Version):
case YY_STATE_EOF(Param):
case YY_STATE_EOF(Memo):
case YY_STATE_EOF(Return):
case YY_STATE_EOF(Exception):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_last_accepting_cpos;
				yy_current_state = yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 730 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 730 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 729);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif



/*@ ----------------------------------------------------------------------------
 */
void parseDoc(Entry* rt)
{
	if( !rt->doc.empty() )
	{
		Entry* _current = current ;
		rt->program = rt->doc ;
		rt->doc.clear() ;
		inputString   = rt->program ;
		inputPosition = 0 ;
		current = rt ;
		cpprestart( cppin ) ;
		if( !rt->memo.empty() )
			BEGIN( CppDoc ) ;
		else
			BEGIN( CppMemo ) ;
		cpplex() ;
		rt->program.clear() ;
		if( rt->memo.length()+2 >= rt->doc.length() )
			rt->doc.clear() ;
		current = _current ;
	}
}

void callcpplex()
{
	cpplex() ;
	if( ( !current->name.empty()  ||  !current->program.empty()  ||
		  !current->memo.empty()  ||  !current->doc.empty() ) )
	{
		if( current->section == EMPTY_SEC )
			current->section = VARIABLE_SEC ;
		current_root->addSubEntry( current ) ;
		current = new Entry ;
		current->protection = protection ;
	}
}

void parseCppClasses(Entry* rt)
{
    if( rt == 0 ) return ;
    for( Entry *cr = rt ; cr ; cr = cr->next )
    {
		if( !cr->program.empty() )
		{
#ifdef _DEBUG
			if (verb)
				printf("Scanning substuff of (%s) %s\n",
				   (const char *)cr->type,
				   (const char *)cr->name);
#endif
			inputString   = cr->program ;
			inputPosition = 0 ;
			cpprestart( cppin ) ;
			BEGIN( FindMembers ) ;
			current_root = cr ;
			yyLineNr = cr->startLine ;
			current->type.clear() ;
			current->name.clear() ;
			current->args.clear() ;
			current->section = EMPTY_SEC ;
			if( cr->section == CLASS_SEC )
				current->protection = protection = PRIV ;
			else if( cr->section == STRUCT_SEC )
				current->protection = protection = PUBL ;
			else if( cr->section == UNION_SEC )
				current->protection = protection = PUBL ;
			else if( cr->section == ENUM_SEC )
				current->protection = protection = PUBL ;
			else
				current->protection = protection = GLOB ;
			callcpplex() ;
			cr->program.clear() ;
		}
    }
    parseDoc( rt ) ;
}

void parseCpp(Entry* rt)
{
	current_root  = rt ;
	global_root   = rt ;
	protection    = GLOB ;
	current       = new Entry ;
	yyLineNr      = 1 ;
	bracketCount  = 0 ;
	sharpCount    = 0 ;
	elseCount     = 0 ;
	lastTContext  = 0 ;

	inputString   = rt->program ;
	inputPosition = 0 ;
	cpprestart( cppin ) ;
	BEGIN( FindMembers ) ;
	callcpplex() ;
	rt->program.clear() ;
	parseCppClasses( rt ) ;

	delete current;
}

extern "C" {
	int	cppwrap()	{ return 1 ; }
};
